import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog, simpledialog
import subprocess
import os
import sys
import tempfile
import ctypes
import shutil
from threading import Thread
import threading
import re
import psutil
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import platform
import glob
import winreg
from datetime import datetime
import time
import csv
import socket
import functools
import traceback
import concurrent.futures
import fnmatch

try:
    import winshell
except ImportError:
    pass  # Handle later in the code

# Set better UI fonts and colors
HEADING_FONT = ('Segoe UI', 12, 'bold')
NORMAL_FONT = ('Segoe UI', 10)
BUTTON_FONT = ('Segoe UI', 9)
DESCRIPTION_FONT = ('Segoe UI', 9)
LOG_FONT = ('Consolas', 9)

# Color scheme
BG_COLOR = "#f5f5f5"
PRIMARY_COLOR = "#3498db"
SECONDARY_COLOR = "#e74c3c"
ACCENT_COLOR = "#2ecc71"
TEXT_COLOR = "#333333"
WARNING_BG = "#fff3cd"
WARNING_FG = "#856404"
ERROR_BG = "#f8d7da"
ERROR_FG = "#721c24"
SUCCESS_BG = "#d4edda"
SUCCESS_FG = "#155724"
LOG_BG = "#f8f9fa"

# Thread safety lock for UI updates
ui_lock = threading.Lock()

# Global exception handler to prevent application crashes
def global_exception_handler(exc_type, exc_value, exc_traceback):
    """Global exception handler to prevent crashes"""
    # Format the exception
    error_msg = ''.join(traceback.format_exception(exc_type, exc_value, exc_traceback))
    # Log to console
    print(f"Unhandled exception: {error_msg}")
    # Show error message in dialog if possible
    try:
        messagebox.showerror("Unhandled Error", 
                            f"An unexpected error occurred:\n\n{str(exc_value)}\n\nSee console for details.")
    except:
        # If messagebox fails, just print to console
        print("Could not show error dialog")
    # Return True to prevent the default tkinter error dialog
    return True

# Install the exception handler
sys.excepthook = global_exception_handler

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def run_as_admin():
    # Get the script path
    script_path = os.path.abspath(sys.argv[0])
    
    # Only run if we have a valid path (not running from IDLE, etc.)
    if os.path.exists(script_path):
        try:
            # Use ShellExecuteW to run the script as admin
            ctypes.windll.shell32.ShellExecuteW(
                None, 
                "runas", 
                sys.executable, 
                f'"{script_path}"', 
                None, 
                1
            )
        except Exception as e:
            print(f"Error running as admin: {e}")
            # If there's an error, don't exit - just log it and continue without admin
            return False
    else:
        print("Could not determine script path")
        return False
    return True

def is_windows_10_or_11():
    """Check if the current system is running Windows 10 or 11"""
    try:
        # Get Windows version
        win_ver = platform.win32_ver()
        win_version = win_ver[0]  # Major version
        win_build = win_ver[1]    # Build number
        
        # Windows 10 build numbers start from 10240 (RTM)
        # Windows 11 build numbers start from 22000
        if win_version == '10':
            build_num = int(win_build.split('.')[0])
            return build_num >= 10240
        else:
            # Try to determine based on registry
            try:
                reg_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 
                                        r"SOFTWARE\Microsoft\Windows NT\CurrentVersion")
                build_num = int(winreg.QueryValueEx(reg_key, "CurrentBuildNumber")[0])
                winreg.CloseKey(reg_key)
                
                # Windows 11 builds are 22000+
                return build_num >= 10240
            except:
                # If we can't determine, we'll assume it's not compatible
                return False
    except:
        return False

def handle_exception(func):
    """Decorator for handling exceptions in methods"""
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        try:
            return func(self, *args, **kwargs)
        except Exception as e:
            # Log the exception
            self.log(f"Error in {func.__name__}: {str(e)}", 'error')
            # Log the traceback for debugging
            import traceback
            self.log(f"Traceback: {traceback.format_exc()}", 'error')
            # Show error message to user
            self.update_status(f"Error in {func.__name__}")
            messagebox.showerror("Error", f"An unexpected error occurred in {func.__name__}:\n\n{str(e)}")
            return None
    return wrapper

def thread_safe(func):
    """Decorator for ensuring thread-safe UI updates"""
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        with ui_lock:
            return func(self, *args, **kwargs)
    return wrapper

class SystemUtilities:
    def __init__(self, root):
        self.root = root
        self.root.title("Windows System Utilities")
        
        # Make window open in fullscreen by default
        self.root.state('zoomed')  # For Windows, this maximizes the window
        
        # Get screen dimensions for responsive design
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # Set minimum size for the window
        self.root.minsize(900, 600)
        
        # Set the application icon
        try:
            self.root.iconbitmap("system_icon.ico")
        except:
            # Icon file not found, continue without it
            pass
        
        # Configure the style for better appearance
        self.style = ttk.Style()
        # Apply clam theme if available
        if 'clam' in self.style.theme_names():
            self.style.theme_use('clam')
            
        self.style.configure('TFrame', background=BG_COLOR)
        self.style.configure('Tab.TFrame', background=BG_COLOR)
        self.style.configure('TLabel', background=BG_COLOR, foreground=TEXT_COLOR, font=NORMAL_FONT)
        self.style.configure('Header.TLabel', font=HEADING_FONT, foreground=PRIMARY_COLOR)
        self.style.configure('TButton', font=BUTTON_FONT)
        self.style.configure('Primary.TButton', background=PRIMARY_COLOR)
        self.style.configure('Secondary.TButton', background=SECONDARY_COLOR)
        self.style.configure('Accent.TButton', background=ACCENT_COLOR)
        self.style.configure('TLabelframe', background=BG_COLOR)
        self.style.configure('Group.TLabelframe', background=BG_COLOR)
        self.style.configure('Group.TLabelframe.Label', background=BG_COLOR, foreground=TEXT_COLOR, font=NORMAL_FONT)
        
        # Set up the main frame with split-pane layout
        main_frame = ttk.Frame(root, style='TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create PanedWindow for split layout
        self.paned = ttk.PanedWindow(main_frame, orient=tk.HORIZONTAL)
        self.paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Left side - Tool tabs
        self.left_frame = ttk.Frame(self.paned, style='TFrame')
        
        # Right side - Logs and status
        self.right_frame = ttk.Frame(self.paned, style='TFrame')
        
        # Add the frames to the paned window
        self.paned.add(self.left_frame, weight=3)
        self.paned.add(self.right_frame, weight=1)
        
        # Create tabs on the left side
        self.tabs = ttk.Notebook(self.left_frame)
        self.tabs.pack(fill=tk.BOTH, expand=True)
        
        # Create the tabs
        self.cleanup_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.system_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.update_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.storage_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.network_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.hyperv_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.optimize_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        
        # Add tabs to the notebook
        self.tabs.add(self.cleanup_tab, text="Cleanup")
        self.tabs.add(self.system_tab, text="System Tools")
        self.tabs.add(self.update_tab, text="Windows Update")
        self.tabs.add(self.storage_tab, text="Storage")
        self.tabs.add(self.network_tab, text="Network")
        self.tabs.add(self.hyperv_tab, text="Hyper-V")
        self.tabs.add(self.optimize_tab, text="Optimize")
        
        # Add tab change event 
        self.tabs.bind("<<NotebookTabChanged>>", self.on_tab_changed)
        
        # Set up the log area on the right side
        self.create_log_area()
        
        # Initialize tab contents
        self.init_cleanup_tab()
        self.init_system_tab()
        self.init_update_tab()
        self.init_storage_tab()
        self.init_network_tab()
        self.init_hyperv_tab()
        self.init_optimize_tab()
        
        # Add status bar at the bottom
        self.status_bar = ttk.Label(root, text="Ready", relief=tk.SUNKEN, anchor=tk.W, font=NORMAL_FONT)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Initialize the thread pool for background tasks
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=5)
        
        # Set background monitoring parameters
        self.background_monitoring = True
        self.show_verbose_logs = True
        
        # Show a welcome message
        self.log("System Utilities initialized successfully", "info")
        self.update_status("Ready")
        
        # Start background monitoring
        self.start_background_monitoring()
        
        # Periodically collect garbage to prevent memory leaks
        def garbage_collect():
            import gc
            gc.collect()
            self.root.after(300000, garbage_collect)  # Every 5 minutes
        
        # Start the garbage collection timer
        self.root.after(300000, garbage_collect)
    
    def on_tab_changed(self, event):
        """Handle tab change event to collect and show relevant system information"""
        tab_id = self.tabs.select()
        tab_name = self.tabs.tab(tab_id, "text")
        
        # Log the tab change
        self.log(f"Switched to {tab_name} tab", "info")
        
        # Show relevant system information based on the tab
        if tab_name == "Network":
            self.log_network_info()
        elif tab_name == "Hyper-V":
            self.log_hyperv_info()
        elif tab_name == "Optimize":
            self.log_performance_info()
        elif tab_name == "Storage":
            self.log_storage_info()
    
    def start_background_monitoring(self):
        """Start background monitoring threads"""
        self.log("Starting background system monitoring...", "background")
        
        # Start network monitoring thread
        network_thread = Thread(target=self._monitor_network_activity)
        network_thread.daemon = True
        network_thread.start()
        
        # Start performance monitoring thread
        performance_thread = Thread(target=self._monitor_system_performance)
        performance_thread.daemon = True
        performance_thread.start()
        
        # Start Hyper-V monitoring thread (if applicable)
        hyperv_thread = Thread(target=self._monitor_hyperv_status)
        hyperv_thread.daemon = True
        hyperv_thread.start()
    
    def _monitor_network_activity(self):
        """Background thread to monitor network activity"""
        try:
            # Initialize network stats
            prev_net_io = psutil.net_io_counters()
            
            while self.background_monitoring:
                time.sleep(10)  # Check every 10 seconds
                
                try:
                    # Get current network stats
                    net_io = psutil.net_io_counters()
                    
                    # Calculate data transferred since last check
                    sent_mb = (net_io.bytes_sent - prev_net_io.bytes_sent) / (1024 * 1024)
                    recv_mb = (net_io.bytes_recv - prev_net_io.bytes_recv) / (1024 * 1024)
                    
                    # Log significant network activity
                    if sent_mb > 5 or recv_mb > 5:  # Only log if more than 5MB in 10 seconds
                        self.root.after(0, lambda s=sent_mb, r=recv_mb: 
                                    self.log(f"Data transfer: {s:.2f}MB sent, {r:.2f}MB received in last 10 seconds", "network"))
                    
                    # Update previous stats
                    prev_net_io = net_io
                    
                    # Check for connection changes every 30 seconds
                    if time.time() % 30 < 10:
                        try:
                            # Get connection stats (requires admin on Windows)
                            # This might fail on non-admin, which is fine
                            connections = len(psutil.net_connections())
                            self.root.after(0, lambda c=connections: 
                                        self.log(f"Active network connections: {c}", "network"))
                        except:
                            pass
                except Exception as e:
                    # Silent fail for background monitoring
                    print(f"Network monitoring error: {str(e)}")
        
        except Exception as e:
            print(f"Error in network monitoring thread: {str(e)}")
    
    def _monitor_system_performance(self):
        """Background thread to monitor system performance"""
        try:
            while self.background_monitoring:
                time.sleep(15)  # Check every 15 seconds
                
                try:
                    # Get system performance metrics
                    cpu_percent = psutil.cpu_percent(interval=1)
                    memory = psutil.virtual_memory()
                    
                    # Log when system is under high load
                    if cpu_percent > 75:
                        self.root.after(0, lambda p=cpu_percent: 
                                    self.log(f"High CPU usage: {p}%", "system"))
                    
                    if memory.percent > 80:
                        self.root.after(0, lambda p=memory.percent: 
                                    self.log(f"High memory usage: {p}%", "system"))
                    
                    # Periodically log general system info (every 60 seconds)
                    if time.time() % 60 < 15:
                        # Get disk I/O
                        try:
                            disk_io = psutil.disk_io_counters()
                            if hasattr(self, 'prev_disk_io'):
                                read_mb = (disk_io.read_bytes - self.prev_disk_io.read_bytes) / (1024 * 1024)
                                write_mb = (disk_io.write_bytes - self.prev_disk_io.write_bytes) / (1024 * 1024)
                                
                                if read_mb > 50 or write_mb > 50:  # Only log high activity
                                    self.root.after(0, lambda r=read_mb, w=write_mb: 
                                                self.log(f"Disk activity: {r:.2f}MB read, {w:.2f}MB written in last minute", "system"))
                            
                            self.prev_disk_io = disk_io
                        except:
                            pass
                    
                except Exception as e:
                    # Silent fail for background monitoring
                    print(f"Performance monitoring error: {str(e)}")
        
        except Exception as e:
            print(f"Error in performance monitoring thread: {str(e)}")
    
    def _monitor_hyperv_status(self):
        """Background thread to monitor Hyper-V status"""
        try:
            # Initial delay to not overload startup
            time.sleep(20)
            
            while self.background_monitoring:
                # Check less frequently
                time.sleep(60)
                
                try:
                    # Only do this check on Windows
                    if platform.system() != 'Windows':
                        continue
                    
                    # Check Hyper-V status using PowerShell
                    ps_command = [
                        "powershell",
                        "-Command",
                        "(Get-Service -Name 'vmms' -ErrorAction SilentlyContinue).Status"
                    ]
                    
                    process = subprocess.Popen(
                        ps_command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    
                    stdout, stderr = process.communicate(timeout=10)
                    
                    if process.returncode == 0 and stdout.strip():
                        status = stdout.strip()
                        if status == "Running":
                            # Log running VMs
                            try:
                                vm_command = [
                                    "powershell",
                                    "-Command",
                                    "Get-VM | Where-Object {$_.State -eq 'Running'} | Select-Object -ExpandProperty Name"
                                ]
                                
                                vm_process = subprocess.Popen(
                                    vm_command,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    text=True,
                                    creationflags=subprocess.CREATE_NO_WINDOW
                                )
                                
                                vm_stdout, vm_stderr = vm_process.communicate(timeout=10)
                                
                                if vm_process.returncode == 0 and vm_stdout.strip():
                                    running_vms = vm_stdout.strip().split('\n')
                                    running_vms = [vm.strip() for vm in running_vms if vm.strip()]
                                    
                                    if running_vms:
                                        self.root.after(0, lambda vms=running_vms: 
                                                    self.log(f"Running VMs: {', '.join(vms)}", "hyperv"))
                            except:
                                pass
                
                except Exception as e:
                    # Silent fail for background monitoring
                    print(f"Hyper-V monitoring error: {str(e)}")
        
        except Exception as e:
            print(f"Error in Hyper-V monitoring thread: {str(e)}")
    
    def log_network_info(self):
        """Log detailed network information when network tab is selected"""
        self.log("Collecting network information...", "network")
        
        # Start thread to collect detailed network info
        network_info_thread = Thread(target=self._collect_network_info)
        network_info_thread.daemon = True
        network_info_thread.start()
    
    def _collect_network_info(self):
        """Collect detailed network information in a background thread"""
        try:
            # Get network interfaces
            interfaces = psutil.net_if_addrs()
            active_interfaces = []
            
            for interface, addrs in interfaces.items():
                for addr in addrs:
                    if addr.family == socket.AF_INET and not addr.address.startswith('127.'):
                        active_interfaces.append(f"{interface}: {addr.address}")
            
            if active_interfaces:
                self.root.after(0, lambda ifs=active_interfaces: 
                            self.log(f"Active network interfaces: {', '.join(ifs)}", "network"))
            
            # Get default gateway
            try:
                gateways = psutil.net_if_stats()
                for name, stats in gateways.items():
                    if stats.isup:
                        self.root.after(0, lambda n=name, s=stats: 
                                    self.log(f"Interface {n} is up, speed: {s.speed} Mbps", "network"))
            except:
                pass
            
            # Check internet connectivity
            try:
                # Try to get external IP
                urls = ["https://api.ipify.org", "https://ifconfig.me/ip", "https://icanhazip.com"]
                
                import urllib.request
                
                for url in urls:
                    try:
                        response = urllib.request.urlopen(url, timeout=3)
                        data = response.read().decode('utf-8')
                        external_ip = data.strip()
                        self.root.after(0, lambda ip=external_ip: 
                                    self.log(f"Internet connection active, external IP: {ip}", "network"))
                        break
                    except:
                        continue
            except:
                pass
            
        except Exception as e:
            print(f"Error collecting network info: {str(e)}")
    
    def log_hyperv_info(self):
        """Log detailed Hyper-V information when Hyper-V tab is selected"""
        self.log("Collecting Hyper-V information...", "hyperv")
        
        # Start thread to collect detailed Hyper-V info
        hyperv_info_thread = Thread(target=self._collect_hyperv_info)
        hyperv_info_thread.daemon = True
        hyperv_info_thread.start()
    
    def _collect_hyperv_info(self):
        """Collect detailed Hyper-V information in a background thread"""
        try:
            # Check Hyper-V status
            ps_command = [
                "powershell",
                "-Command",
                "(Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online -ErrorAction SilentlyContinue).State"
            ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=10)
            
            if process.returncode == 0 and stdout.strip():
                state = stdout.strip()
                is_enabled = state == "Enabled"
                
                if is_enabled:
                    self.root.after(0, lambda: self.log("Hyper-V is enabled on this system", "hyperv"))
                    
                    # Get VM count
                    vm_command = [
                        "powershell",
                        "-Command",
                        "Get-VM -ErrorAction SilentlyContinue | Measure-Object | Select-Object -ExpandProperty Count"
                    ]
                    
                    vm_process = subprocess.Popen(
                        vm_command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    
                    vm_stdout, vm_stderr = vm_process.communicate(timeout=10)
                    
                    if vm_process.returncode == 0 and vm_stdout.strip():
                        try:
                            vm_count = int(vm_stdout.strip())
                            self.root.after(0, lambda c=vm_count: 
                                        self.log(f"Found {c} virtual machines", "hyperv"))
                            
                            # Get running VMs
                            if vm_count > 0:
                                running_command = [
                                    "powershell",
                                    "-Command",
                                    "Get-VM | Where-Object {$_.State -eq 'Running'} | Select-Object -ExpandProperty Name"
                                ]
                                
                                running_process = subprocess.Popen(
                                    running_command,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    text=True,
                                    creationflags=subprocess.CREATE_NO_WINDOW
                                )
                                
                                running_stdout, running_stderr = running_process.communicate(timeout=10)
                                
                                if running_process.returncode == 0 and running_stdout.strip():
                                    running_vms = running_stdout.strip().split('\n')
                                    running_vms = [vm.strip() for vm in running_vms if vm.strip()]
                                    
                                    if running_vms:
                                        self.root.after(0, lambda vms=running_vms: 
                                                    self.log(f"Running VMs: {', '.join(vms)}", "hyperv"))
                        except:
                            pass
                else:
                    self.root.after(0, lambda: self.log("Hyper-V is not enabled on this system", "hyperv"))
            else:
                self.root.after(0, lambda: self.log("Could not determine Hyper-V status", "hyperv"))
            
        except Exception as e:
            print(f"Error collecting Hyper-V info: {str(e)}")
    
    def log_performance_info(self):
        """Log detailed performance information when Optimize tab is selected"""
        self.log("Collecting system performance information...", "system")
        
        # Start thread to collect detailed performance info
        perf_info_thread = Thread(target=self._collect_performance_info)
        perf_info_thread.daemon = True
        perf_info_thread.start()
    
    def _collect_performance_info(self):
        """Collect detailed performance information in a background thread"""
        try:
            # Get CPU information
            cpu_freq = psutil.cpu_freq()
            cpu_count = psutil.cpu_count(logical=False)
            cpu_logical = psutil.cpu_count(logical=True)
            
            if cpu_freq:
                self.root.after(0, lambda f=cpu_freq.current: 
                            self.log(f"CPU frequency: {f:.2f} MHz", "system"))
            
            self.root.after(0, lambda c=cpu_count, l=cpu_logical: 
                        self.log(f"CPU cores: {c} physical, {l} logical", "system"))
            
            # Get memory information
            memory = psutil.virtual_memory()
            total_gb = memory.total / (1024 * 1024 * 1024)
            used_gb = memory.used / (1024 * 1024 * 1024)
            
            self.root.after(0, lambda t=total_gb, u=used_gb, p=memory.percent: 
                        self.log(f"Memory: {u:.2f} GB used of {t:.2f} GB total ({p}%)", "system"))
            
            # Get disk information
            try:
                disk_io = psutil.disk_io_counters()
                read_gb = disk_io.read_bytes / (1024 * 1024 * 1024)
                write_gb = disk_io.write_bytes / (1024 * 1024 * 1024)
                
                self.root.after(0, lambda r=read_gb, w=write_gb: 
                            self.log(f"Disk I/O since boot: {r:.2f} GB read, {w:.2f} GB written", "system"))
            except:
                pass
            
            # Get network information
            try:
                net_io = psutil.net_io_counters()
                sent_gb = net_io.bytes_sent / (1024 * 1024 * 1024)
                recv_gb = net_io.bytes_recv / (1024 * 1024 * 1024)
                
                self.root.after(0, lambda s=sent_gb, r=recv_gb: 
                            self.log(f"Network I/O since boot: {s:.2f} GB sent, {r:.2f} GB received", "system"))
            except:
                pass
            
            # Get process information
            try:
                processes = len(psutil.pids())
                self.root.after(0, lambda p=processes: 
                            self.log(f"Running processes: {p}", "system"))
                
                # Get top 3 CPU-consuming processes
                top_processes = []
                for proc in sorted(psutil.process_iter(['pid', 'name', 'cpu_percent']), 
                                key=lambda p: p.info['cpu_percent'] or 0, reverse=True)[:3]:
                    if proc.info['cpu_percent'] > 5:  # Only include processes using significant CPU
                        top_processes.append(f"{proc.info['name']} (PID: {proc.info['pid']}): {proc.info['cpu_percent']:.1f}%")
                
                if top_processes:
                    self.root.after(0, lambda p=top_processes: 
                                self.log(f"Top CPU processes: {', '.join(p)}", "system"))
            except:
                pass
            
        except Exception as e:
            print(f"Error collecting performance info: {str(e)}")
    
    def log_storage_info(self):
        """Log detailed storage information when Storage tab is selected"""
        self.log("Collecting storage information...", "system")
        
        # Start thread to collect detailed storage info
        storage_info_thread = Thread(target=self._collect_storage_info)
        storage_info_thread.daemon = True
        storage_info_thread.start()
    
    def _collect_storage_info(self):
        """Collect detailed storage information in a background thread"""
        try:
            # Get disk partitions
            partitions = psutil.disk_partitions()
            
            total_space = 0
            used_space = 0
            
            for partition in partitions:
                try:
                    if partition.fstype:  # Skip empty partitions
                        usage = psutil.disk_usage(partition.mountpoint)
                        
                        # Convert to GB
                        total_gb = usage.total / (1024 * 1024 * 1024)
                        used_gb = usage.used / (1024 * 1024 * 1024)
                        free_gb = usage.free / (1024 * 1024 * 1024)
                        
                        # Add to totals
                        total_space += usage.total
                        used_space += usage.used
                        
                        self.root.after(0, lambda p=partition.mountpoint, t=total_gb, u=used_gb, f=free_gb, perc=usage.percent: 
                                    self.log(f"Disk {p}: {t:.2f} GB total, {u:.2f} GB used ({perc}%), {f:.2f} GB free", "system"))
                except:
                    # Skip partitions we can't access
                    continue
            
            # Log totals
            if total_space > 0:
                total_tb = total_space / (1024 * 1024 * 1024 * 1024)
                used_tb = used_space / (1024 * 1024 * 1024 * 1024)
                free_tb = (total_space - used_space) / (1024 * 1024 * 1024 * 1024)
                percent = (used_space / total_space) * 100
                
                self.root.after(0, lambda t=total_tb, u=used_tb, f=free_tb, p=percent: 
                            self.log(f"Total storage: {t:.2f} TB total, {u:.2f} TB used ({p:.1f}%), {f:.2f} TB free", "system"))
            
            # Check for large temp files
            try:
                temp_dir = os.environ.get('TEMP')
                if temp_dir and os.path.exists(temp_dir):
                    temp_size = 0
                    temp_files = 0
                    
                    for root, dirs, files in os.walk(temp_dir, topdown=False):
                        for name in files:
                            try:
                                file_path = os.path.join(root, name)
                                temp_size += os.path.getsize(file_path)
                                temp_files += 1
                            except:
                                continue
                    
                    temp_size_mb = temp_size / (1024 * 1024)
                    
                    if temp_size_mb > 100:  # Only log if > 100 MB
                        self.root.after(0, lambda s=temp_size_mb, f=temp_files: 
                                    self.log(f"Temp folder contains {f} files using {s:.2f} MB of space", "system"))
            except:
                pass
            
        except Exception as e:
            print(f"Error collecting storage info: {str(e)}")
    
    def create_log_area(self):
        """Create the log area on the right side"""
        self.log_frame = ttk.Frame(self.right_frame, style='TFrame')
        self.log_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a scrolled text widget for the log area
        self.log_text = scrolledtext.ScrolledText(
            self.log_frame,
            wrap=tk.WORD,
            font=LOG_FONT,
            bg=LOG_BG,
            state=tk.DISABLED
        )
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # Create a tag for each log level
        self.log_text.tag_configure("info", foreground="black")
        self.log_text.tag_configure("warning", foreground="orange")
        self.log_text.tag_configure("error", foreground="red")
        self.log_text.tag_configure("system", foreground="blue")
        self.log_text.tag_configure("network", foreground="green")
        self.log_text.tag_configure("hyperv", foreground="purple")
        self.log_text.tag_configure("background", foreground="gray")
        
        # Add a timestamp to the log
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] System Utilities started\n", "info")
        
        # Add version info
        version_label = tk.Label(
            self.log_frame,
            text="Version 1.1",
            font=("Segoe UI", 8),
            fg="#666666",
            bg="#f8f9fa"
        )
        version_label.pack(side=tk.BOTTOM, pady=10)
    
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog, simpledialog
import subprocess
import os
import sys
import tempfile
import ctypes
import shutil
from threading import Thread
import threading
import re
import psutil
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import platform
import glob
import winreg
from datetime import datetime
import time
import csv
import socket
import functools
import traceback
import concurrent.futures
import fnmatch

try:
    import winshell
except ImportError:
    pass  # Handle later in the code

# Set better UI fonts and colors
HEADING_FONT = ('Segoe UI', 12, 'bold')
NORMAL_FONT = ('Segoe UI', 10)
BUTTON_FONT = ('Segoe UI', 9)
DESCRIPTION_FONT = ('Segoe UI', 9)
LOG_FONT = ('Consolas', 9)

# Color scheme
BG_COLOR = "#f5f5f5"
PRIMARY_COLOR = "#3498db"
SECONDARY_COLOR = "#e74c3c"
ACCENT_COLOR = "#2ecc71"
TEXT_COLOR = "#333333"
WARNING_BG = "#fff3cd"
WARNING_FG = "#856404"
ERROR_BG = "#f8d7da"
ERROR_FG = "#721c24"
SUCCESS_BG = "#d4edda"
SUCCESS_FG = "#155724"
LOG_BG = "#f8f9fa"

# Thread safety lock for UI updates
ui_lock = threading.Lock()

# Global exception handler to prevent application crashes
def global_exception_handler(exc_type, exc_value, exc_traceback):
    """Global exception handler to prevent crashes"""
    # Format the exception
    error_msg = ''.join(traceback.format_exception(exc_type, exc_value, exc_traceback))
    # Log to console
    print(f"Unhandled exception: {error_msg}")
    # Show error message in dialog if possible
    try:
        messagebox.showerror("Unhandled Error", 
                            f"An unexpected error occurred:\n\n{str(exc_value)}\n\nSee console for details.")
    except:
        # If messagebox fails, just print to console
        print("Could not show error dialog")
    # Return True to prevent the default tkinter error dialog
    return True

# Install the exception handler
sys.excepthook = global_exception_handler

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def run_as_admin():
    # Get the script path
    script_path = os.path.abspath(sys.argv[0])
    
    # Only run if we have a valid path (not running from IDLE, etc.)
    if os.path.exists(script_path):
        try:
            # Use ShellExecuteW to run the script as admin
            ctypes.windll.shell32.ShellExecuteW(
                None, 
                "runas", 
                sys.executable, 
                f'"{script_path}"', 
                None, 
                1
            )
        except Exception as e:
            print(f"Error running as admin: {e}")
            # If there's an error, don't exit - just log it and continue without admin
            return False
    else:
        print("Could not determine script path")
        return False
    return True

def is_windows_10_or_11():
    """Check if the current system is running Windows 10 or 11"""
    try:
        # Get Windows version
        win_ver = platform.win32_ver()
        win_version = win_ver[0]  # Major version
        win_build = win_ver[1]    # Build number
        
        # Windows 10 build numbers start from 10240 (RTM)
        # Windows 11 build numbers start from 22000
        if win_version == '10':
            build_num = int(win_build.split('.')[0])
            return build_num >= 10240
        else:
            # Try to determine based on registry
            try:
                reg_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 
                                        r"SOFTWARE\Microsoft\Windows NT\CurrentVersion")
                build_num = int(winreg.QueryValueEx(reg_key, "CurrentBuildNumber")[0])
                winreg.CloseKey(reg_key)
                
                # Windows 11 builds are 22000+
                return build_num >= 10240
            except:
                # If we can't determine, we'll assume it's not compatible
                return False
    except:
        return False

def handle_exception(func):
    """Decorator for handling exceptions in methods"""
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        try:
            return func(self, *args, **kwargs)
        except Exception as e:
            # Log the exception
            self.log(f"Error in {func.__name__}: {str(e)}", 'error')
            # Log the traceback for debugging
            import traceback
            self.log(f"Traceback: {traceback.format_exc()}", 'error')
            # Show error message to user
            self.update_status(f"Error in {func.__name__}")
            messagebox.showerror("Error", f"An unexpected error occurred in {func.__name__}:\n\n{str(e)}")
            return None
    return wrapper

def thread_safe(func):
    """Decorator for ensuring thread-safe UI updates"""
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        with ui_lock:
            return func(self, *args, **kwargs)
    return wrapper

class SystemUtilities:
    def __init__(self, root):
        self.root = root
        self.root.title("Windows System Utilities")
        
        # Make window open in fullscreen by default
        self.root.state('zoomed')  # For Windows, this maximizes the window
        
        # Get screen dimensions for responsive design
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # Set minimum size for the window
        self.root.minsize(900, 600)
        
        # Set the application icon
        try:
            self.root.iconbitmap("system_icon.ico")
        except:
            # Icon file not found, continue without it
            pass
        
        # Configure the style for better appearance
        self.style = ttk.Style()
        # Apply clam theme if available
        if 'clam' in self.style.theme_names():
            self.style.theme_use('clam')
            
        self.style.configure('TFrame', background=BG_COLOR)
        self.style.configure('Tab.TFrame', background=BG_COLOR)
        self.style.configure('TLabel', background=BG_COLOR, foreground=TEXT_COLOR, font=NORMAL_FONT)
        self.style.configure('Header.TLabel', font=HEADING_FONT, foreground=PRIMARY_COLOR)
        self.style.configure('TButton', font=BUTTON_FONT)
        self.style.configure('Primary.TButton', background=PRIMARY_COLOR)
        self.style.configure('Secondary.TButton', background=SECONDARY_COLOR)
        self.style.configure('Accent.TButton', background=ACCENT_COLOR)
        self.style.configure('TLabelframe', background=BG_COLOR)
        self.style.configure('Group.TLabelframe', background=BG_COLOR)
        self.style.configure('Group.TLabelframe.Label', background=BG_COLOR, foreground=TEXT_COLOR, font=NORMAL_FONT)
        
        # Set up the main frame with split-pane layout
        main_frame = ttk.Frame(root, style='TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create PanedWindow for split layout
        self.paned = ttk.PanedWindow(main_frame, orient=tk.HORIZONTAL)
        self.paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Left side - Tool tabs
        self.left_frame = ttk.Frame(self.paned, style='TFrame')
        
        # Right side - Logs and status
        self.right_frame = ttk.Frame(self.paned, style='TFrame')
        
        # Add the frames to the paned window
        self.paned.add(self.left_frame, weight=3)
        self.paned.add(self.right_frame, weight=1)
        
        # Create tabs on the left side
        self.tabs = ttk.Notebook(self.left_frame)
        self.tabs.pack(fill=tk.BOTH, expand=True)
        
        # Create the tabs
        self.cleanup_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.system_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.update_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.storage_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.network_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.hyperv_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.optimize_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        
        # Add tabs to the notebook
        self.tabs.add(self.cleanup_tab, text="Cleanup")
        self.tabs.add(self.system_tab, text="System Tools")
        self.tabs.add(self.update_tab, text="Windows Update")
        self.tabs.add(self.storage_tab, text="Storage")
        self.tabs.add(self.network_tab, text="Network")
        self.tabs.add(self.hyperv_tab, text="Hyper-V")
        self.tabs.add(self.optimize_tab, text="Optimize")
        
        # Add tab change event 
        self.tabs.bind("<<NotebookTabChanged>>", self.on_tab_changed)
        
        # Set up the log area on the right side
        self.create_log_area()
        
        # Initialize tab contents
        self.init_cleanup_tab()
        self.init_system_tab()
        self.init_update_tab()
        self.init_storage_tab()
        self.init_network_tab()
        self.init_hyperv_tab()
        self.init_optimize_tab()
        
        # Add status bar at the bottom
        self.status_bar = ttk.Label(root, text="Ready", relief=tk.SUNKEN, anchor=tk.W, font=NORMAL_FONT)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Initialize the thread pool for background tasks
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=5)
        
        # Set background monitoring parameters
        self.background_monitoring = True
        self.show_verbose_logs = True
        
        # Show a welcome message
        self.log("System Utilities initialized successfully", "info")
        self.update_status("Ready")
        
        # Start background monitoring
        self.start_background_monitoring()
        
        # Periodically collect garbage to prevent memory leaks
        def garbage_collect():
            import gc
            gc.collect()
            self.root.after(300000, garbage_collect)  # Every 5 minutes
        
        # Start the garbage collection timer
        self.root.after(300000, garbage_collect)
    
    def on_tab_changed(self, event):
        """Handle tab change event to collect and show relevant system information"""
        tab_id = self.tabs.select()
        tab_name = self.tabs.tab(tab_id, "text")
        
        # Log the tab change
        self.log(f"Switched to {tab_name} tab", "info")
        
        # Show relevant system information based on the tab
        if tab_name == "Network":
            self.log_network_info()
        elif tab_name == "Hyper-V":
            self.log_hyperv_info()
        elif tab_name == "Optimize":
            self.log_performance_info()
        elif tab_name == "Storage":
            self.log_storage_info()
    
    def start_background_monitoring(self):
        """Start background monitoring threads"""
        self.log("Starting background system monitoring...", "background")
        
        # Start network monitoring thread
        network_thread = Thread(target=self._monitor_network_activity)
        network_thread.daemon = True
        network_thread.start()
        
        # Start performance monitoring thread
        performance_thread = Thread(target=self._monitor_system_performance)
        performance_thread.daemon = True
        performance_thread.start()
        
        # Start Hyper-V monitoring thread (if applicable)
        hyperv_thread = Thread(target=self._monitor_hyperv_status)
        hyperv_thread.daemon = True
        hyperv_thread.start()
    
    def _monitor_network_activity(self):
        """Background thread to monitor network activity"""
        try:
            # Initialize network stats
            prev_net_io = psutil.net_io_counters()
            
            while self.background_monitoring:
                time.sleep(10)  # Check every 10 seconds
                
                try:
                    # Get current network stats
                    net_io = psutil.net_io_counters()
                    
                    # Calculate data transferred since last check
                    sent_mb = (net_io.bytes_sent - prev_net_io.bytes_sent) / (1024 * 1024)
                    recv_mb = (net_io.bytes_recv - prev_net_io.bytes_recv) / (1024 * 1024)
                    
                    # Log significant network activity
                    if sent_mb > 5 or recv_mb > 5:  # Only log if more than 5MB in 10 seconds
                        self.root.after(0, lambda s=sent_mb, r=recv_mb: 
                                    self.log(f"Data transfer: {s:.2f}MB sent, {r:.2f}MB received in last 10 seconds", "network"))
                    
                    # Update previous stats
                    prev_net_io = net_io
                    
                    # Check for connection changes every 30 seconds
                    if time.time() % 30 < 10:
                        try:
                            # Get connection stats (requires admin on Windows)
                            # This might fail on non-admin, which is fine
                            connections = len(psutil.net_connections())
                            self.root.after(0, lambda c=connections: 
                                        self.log(f"Active network connections: {c}", "network"))
                        except:
                            pass
                except Exception as e:
                    # Silent fail for background monitoring
                    print(f"Network monitoring error: {str(e)}")
        
        except Exception as e:
            print(f"Error in network monitoring thread: {str(e)}")
    
    def _monitor_system_performance(self):
        """Background thread to monitor system performance"""
        try:
            while self.background_monitoring:
                time.sleep(15)  # Check every 15 seconds
                
                try:
                    # Get system performance metrics
                    cpu_percent = psutil.cpu_percent(interval=1)
                    memory = psutil.virtual_memory()
                    
                    # Log when system is under high load
                    if cpu_percent > 75:
                        self.root.after(0, lambda p=cpu_percent: 
                                    self.log(f"High CPU usage: {p}%", "system"))
                    
                    if memory.percent > 80:
                        self.root.after(0, lambda p=memory.percent: 
                                    self.log(f"High memory usage: {p}%", "system"))
                    
                    # Periodically log general system info (every 60 seconds)
                    if time.time() % 60 < 15:
                        # Get disk I/O
                        try:
                            disk_io = psutil.disk_io_counters()
                            if hasattr(self, 'prev_disk_io'):
                                read_mb = (disk_io.read_bytes - self.prev_disk_io.read_bytes) / (1024 * 1024)
                                write_mb = (disk_io.write_bytes - self.prev_disk_io.write_bytes) / (1024 * 1024)
                                
                                if read_mb > 50 or write_mb > 50:  # Only log high activity
                                    self.root.after(0, lambda r=read_mb, w=write_mb: 
                                                self.log(f"Disk activity: {r:.2f}MB read, {w:.2f}MB written in last minute", "system"))
                            
                            self.prev_disk_io = disk_io
                        except:
                            pass
                    
                except Exception as e:
                    # Silent fail for background monitoring
                    print(f"Performance monitoring error: {str(e)}")
        
        except Exception as e:
            print(f"Error in performance monitoring thread: {str(e)}")
    
    def _monitor_hyperv_status(self):
        """Background thread to monitor Hyper-V status"""
        try:
            # Initial delay to not overload startup
            time.sleep(20)
            
            while self.background_monitoring:
                # Check less frequently
                time.sleep(60)
                
                try:
                    # Only do this check on Windows
                    if platform.system() != 'Windows':
                        continue
                    
                    # Check Hyper-V status using PowerShell
                    ps_command = [
                        "powershell",
                        "-Command",
                        "(Get-Service -Name 'vmms' -ErrorAction SilentlyContinue).Status"
                    ]
                    
                    process = subprocess.Popen(
                        ps_command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    
                    stdout, stderr = process.communicate(timeout=10)
                    
                    if process.returncode == 0 and stdout.strip():
                        status = stdout.strip()
                        if status == "Running":
                            # Log running VMs
                            try:
                                vm_command = [
                                    "powershell",
                                    "-Command",
                                    "Get-VM | Where-Object {$_.State -eq 'Running'} | Select-Object -ExpandProperty Name"
                                ]
                                
                                vm_process = subprocess.Popen(
                                    vm_command,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    text=True,
                                    creationflags=subprocess.CREATE_NO_WINDOW
                                )
                                
                                vm_stdout, vm_stderr = vm_process.communicate(timeout=10)
                                
                                if vm_process.returncode == 0 and vm_stdout.strip():
                                    running_vms = vm_stdout.strip().split('\n')
                                    running_vms = [vm.strip() for vm in running_vms if vm.strip()]
                                    
                                    if running_vms:
                                        self.root.after(0, lambda vms=running_vms: 
                                                    self.log(f"Running VMs: {', '.join(vms)}", "hyperv"))
                            except:
                                pass
                
                except Exception as e:
                    # Silent fail for background monitoring
                    print(f"Hyper-V monitoring error: {str(e)}")
        
        except Exception as e:
            print(f"Error in Hyper-V monitoring thread: {str(e)}")
    
    def log_network_info(self):
        """Log detailed network information when network tab is selected"""
        self.log("Collecting network information...", "network")
        
        # Start thread to collect detailed network info
        network_info_thread = Thread(target=self._collect_network_info)
        network_info_thread.daemon = True
        network_info_thread.start()
    
    def _collect_network_info(self):
        """Collect detailed network information in a background thread"""
        try:
            # Get network interfaces
            interfaces = psutil.net_if_addrs()
            active_interfaces = []
            
            for interface, addrs in interfaces.items():
                for addr in addrs:
                    if addr.family == socket.AF_INET and not addr.address.startswith('127.'):
                        active_interfaces.append(f"{interface}: {addr.address}")
            
            if active_interfaces:
                self.root.after(0, lambda ifs=active_interfaces: 
                            self.log(f"Active network interfaces: {', '.join(ifs)}", "network"))
            
            # Get default gateway
            try:
                gateways = psutil.net_if_stats()
                for name, stats in gateways.items():
                    if stats.isup:
                        self.root.after(0, lambda n=name, s=stats: 
                                    self.log(f"Interface {n} is up, speed: {s.speed} Mbps", "network"))
            except:
                pass
            
            # Check internet connectivity
            try:
                # Try to get external IP
                urls = ["https://api.ipify.org", "https://ifconfig.me/ip", "https://icanhazip.com"]
                
                import urllib.request
                
                for url in urls:
                    try:
                        response = urllib.request.urlopen(url, timeout=3)
                        data = response.read().decode('utf-8')
                        external_ip = data.strip()
                        self.root.after(0, lambda ip=external_ip: 
                                    self.log(f"Internet connection active, external IP: {ip}", "network"))
                        break
                    except:
                        continue
            except:
                pass
            
        except Exception as e:
            print(f"Error collecting network info: {str(e)}")
    
    def log_hyperv_info(self):
        """Log detailed Hyper-V information when Hyper-V tab is selected"""
        self.log("Collecting Hyper-V information...", "hyperv")
        
        # Start thread to collect detailed Hyper-V info
        hyperv_info_thread = Thread(target=self._collect_hyperv_info)
        hyperv_info_thread.daemon = True
        hyperv_info_thread.start()
    
    def _collect_hyperv_info(self):
        """Collect detailed Hyper-V information in a background thread"""
        try:
            # Check Hyper-V status
            ps_command = [
                "powershell",
                "-Command",
                "(Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online -ErrorAction SilentlyContinue).State"
            ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=10)
            
            if process.returncode == 0 and stdout.strip():
                state = stdout.strip()
                is_enabled = state == "Enabled"
                
                if is_enabled:
                    self.root.after(0, lambda: self.log("Hyper-V is enabled on this system", "hyperv"))
                    
                    # Get VM count
                    vm_command = [
                        "powershell",
                        "-Command",
                        "Get-VM -ErrorAction SilentlyContinue | Measure-Object | Select-Object -ExpandProperty Count"
                    ]
                    
                    vm_process = subprocess.Popen(
                        vm_command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    
                    vm_stdout, vm_stderr = vm_process.communicate(timeout=10)
                    
                    if vm_process.returncode == 0 and vm_stdout.strip():
                        try:
                            vm_count = int(vm_stdout.strip())
                            self.root.after(0, lambda c=vm_count: 
                                        self.log(f"Found {c} virtual machines", "hyperv"))
                            
                            # Get running VMs
                            if vm_count > 0:
                                running_command = [
                                    "powershell",
                                    "-Command",
                                    "Get-VM | Where-Object {$_.State -eq 'Running'} | Select-Object -ExpandProperty Name"
                                ]
                                
                                running_process = subprocess.Popen(
                                    running_command,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    text=True,
                                    creationflags=subprocess.CREATE_NO_WINDOW
                                )
                                
                                running_stdout, running_stderr = running_process.communicate(timeout=10)
                                
                                if running_process.returncode == 0 and running_stdout.strip():
                                    running_vms = running_stdout.strip().split('\n')
                                    running_vms = [vm.strip() for vm in running_vms if vm.strip()]
                                    
                                    if running_vms:
                                        self.root.after(0, lambda vms=running_vms: 
                                                    self.log(f"Running VMs: {', '.join(vms)}", "hyperv"))
                        except:
                            pass
                else:
                    self.root.after(0, lambda: self.log("Hyper-V is not enabled on this system", "hyperv"))
            else:
                self.root.after(0, lambda: self.log("Could not determine Hyper-V status", "hyperv"))
            
        except Exception as e:
            print(f"Error collecting Hyper-V info: {str(e)}")
    
    def log_performance_info(self):
        """Log detailed performance information when Optimize tab is selected"""
        self.log("Collecting system performance information...", "system")
        
        # Start thread to collect detailed performance info
        perf_info_thread = Thread(target=self._collect_performance_info)
        perf_info_thread.daemon = True
        perf_info_thread.start()
    
    def _collect_performance_info(self):
        """Collect detailed performance information in a background thread"""
        try:
            # Get CPU information
            cpu_freq = psutil.cpu_freq()
            cpu_count = psutil.cpu_count(logical=False)
            cpu_logical = psutil.cpu_count(logical=True)
            
            if cpu_freq:
                self.root.after(0, lambda f=cpu_freq.current: 
                            self.log(f"CPU frequency: {f:.2f} MHz", "system"))
            
            self.root.after(0, lambda c=cpu_count, l=cpu_logical: 
                        self.log(f"CPU cores: {c} physical, {l} logical", "system"))
            
            # Get memory information
            memory = psutil.virtual_memory()
            total_gb = memory.total / (1024 * 1024 * 1024)
            used_gb = memory.used / (1024 * 1024 * 1024)
            
            self.root.after(0, lambda t=total_gb, u=used_gb, p=memory.percent: 
                        self.log(f"Memory: {u:.2f} GB used of {t:.2f} GB total ({p}%)", "system"))
            
            # Get disk information
            try:
                disk_io = psutil.disk_io_counters()
                read_gb = disk_io.read_bytes / (1024 * 1024 * 1024)
                write_gb = disk_io.write_bytes / (1024 * 1024 * 1024)
                
                self.root.after(0, lambda r=read_gb, w=write_gb: 
                            self.log(f"Disk I/O since boot: {r:.2f} GB read, {w:.2f} GB written", "system"))
            except:
                pass
            
            # Get network information
            try:
                net_io = psutil.net_io_counters()
                sent_gb = net_io.bytes_sent / (1024 * 1024 * 1024)
                recv_gb = net_io.bytes_recv / (1024 * 1024 * 1024)
                
                self.root.after(0, lambda s=sent_gb, r=recv_gb: 
                            self.log(f"Network I/O since boot: {s:.2f} GB sent, {r:.2f} GB received", "system"))
            except:
                pass
            
            # Get process information
            try:
                processes = len(psutil.pids())
                self.root.after(0, lambda p=processes: 
                            self.log(f"Running processes: {p}", "system"))
                
                # Get top 3 CPU-consuming processes
                top_processes = []
                for proc in sorted(psutil.process_iter(['pid', 'name', 'cpu_percent']), 
                                key=lambda p: p.info['cpu_percent'] or 0, reverse=True)[:3]:
                    if proc.info['cpu_percent'] > 5:  # Only include processes using significant CPU
                        top_processes.append(f"{proc.info['name']} (PID: {proc.info['pid']}): {proc.info['cpu_percent']:.1f}%")
                
                if top_processes:
                    self.root.after(0, lambda p=top_processes: 
                                self.log(f"Top CPU processes: {', '.join(p)}", "system"))
            except:
                pass
            
        except Exception as e:
            print(f"Error collecting performance info: {str(e)}")
    
    def log_storage_info(self):
        """Log detailed storage information when Storage tab is selected"""
        self.log("Collecting storage information...", "system")
        
        # Start thread to collect detailed storage info
        storage_info_thread = Thread(target=self._collect_storage_info)
        storage_info_thread.daemon = True
        storage_info_thread.start()
    
    def _collect_storage_info(self):
        """Collect detailed storage information in a background thread"""
        try:
            # Get disk partitions
            partitions = psutil.disk_partitions()
            
            total_space = 0
            used_space = 0
            
            for partition in partitions:
                try:
                    if partition.fstype:  # Skip empty partitions
                        usage = psutil.disk_usage(partition.mountpoint)
                        
                        # Convert to GB
                        total_gb = usage.total / (1024 * 1024 * 1024)
                        used_gb = usage.used / (1024 * 1024 * 1024)
                        free_gb = usage.free / (1024 * 1024 * 1024)
                        
                        # Add to totals
                        total_space += usage.total
                        used_space += usage.used
                        
                        self.root.after(0, lambda p=partition.mountpoint, t=total_gb, u=used_gb, f=free_gb, perc=usage.percent: 
                                    self.log(f"Disk {p}: {t:.2f} GB total, {u:.2f} GB used ({perc}%), {f:.2f} GB free", "system"))
                except:
                    # Skip partitions we can't access
                    continue
            
            # Log totals
            if total_space > 0:
                total_tb = total_space / (1024 * 1024 * 1024 * 1024)
                used_tb = used_space / (1024 * 1024 * 1024 * 1024)
                free_tb = (total_space - used_space) / (1024 * 1024 * 1024 * 1024)
                percent = (used_space / total_space) * 100
                
                self.root.after(0, lambda t=total_tb, u=used_tb, f=free_tb, p=percent: 
                            self.log(f"Total storage: {t:.2f} TB total, {u:.2f} TB used ({p:.1f}%), {f:.2f} TB free", "system"))
            
            # Check for large temp files
            try:
                temp_dir = os.environ.get('TEMP')
                if temp_dir and os.path.exists(temp_dir):
                    temp_size = 0
                    temp_files = 0
                    
                    for root, dirs, files in os.walk(temp_dir, topdown=False):
                        for name in files:
                            try:
                                file_path = os.path.join(root, name)
                                temp_size += os.path.getsize(file_path)
                                temp_files += 1
                            except:
                                continue
                    
                    temp_size_mb = temp_size / (1024 * 1024)
                    
                    if temp_size_mb > 100:  # Only log if > 100 MB
                        self.root.after(0, lambda s=temp_size_mb, f=temp_files: 
                                    self.log(f"Temp folder contains {f} files using {s:.2f} MB of space", "system"))
            except:
                pass
            
        except Exception as e:
            print(f"Error collecting storage info: {str(e)}")
    
    def create_log_area(self):
        """Create the log area on the right side"""
        self.log_frame = ttk.Frame(self.right_frame, style='TFrame')
        self.log_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a scrolled text widget for the log area
        self.log_text = scrolledtext.ScrolledText(
            self.log_frame,
            wrap=tk.WORD,
            font=LOG_FONT,
            bg=LOG_BG,
            state=tk.DISABLED
        )
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # Create a tag for each log level
        self.log_text.tag_configure("info", foreground="black")
        self.log_text.tag_configure("warning", foreground="orange")
        self.log_text.tag_configure("error", foreground="red")
        self.log_text.tag_configure("system", foreground="blue")
        self.log_text.tag_configure("network", foreground="green")
        self.log_text.tag_configure("hyperv", foreground="purple")
        self.log_text.tag_configure("background", foreground="gray")
        
        # Add a timestamp to the log
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] System Utilities started\n", "info")
        
        # Add version info
        version_label = tk.Label(
            self.log_frame,
            text="Version 1.1",
            font=("Segoe UI", 8),
            fg="#666666",
            bg="#f8f9fa"
        )
        version_label.pack(side=tk.BOTTOM, pady=10)
    
    def log(self, message, level="info"):
        """Log a message to the log area"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        formatted_message = f"[{timestamp}] {message}\n"
        
        # Update the log area in a thread-safe manner
        self.root.after(0, lambda msg=formatted_message, lvl=level: self._update_log(msg, lvl))
    
    @thread_safe
    def _update_log(self, message, level):
        """Update the log area with the given message and level"""
        self.log_text.configure(state=tk.NORMAL)
        self.log_text.insert(tk.END, message, level)
        self.log_text.configure(state=tk.DISABLED)
        
        # Scroll to the end of the log
        self.log_text.see(tk.END)
    
    def update_status(self, message):
        """Update the status bar with the given message"""
        self.status_bar.configure(text=message)
    
    def init_cleanup_tab(self):
        """Initialize the Cleanup tab"""
        self.cleanup_frame = ttk.Frame(self.cleanup_tab, style='TFrame')
        self.cleanup_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the cleanup options
        self.cleanup_options_frame = ttk.LabelFrame(self.cleanup_frame, text="Cleanup Options", style='Group.TLabelframe')
        self.cleanup_options_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create a frame for the cleanup buttons
        self.cleanup_buttons_frame = ttk.Frame(self.cleanup_options_frame, style='TFrame')
        self.cleanup_buttons_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the cleanup description
        self.cleanup_description_frame = ttk.Frame(self.cleanup_options_frame, style='TFrame')
        self.cleanup_description_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the progress bar
        self.cleanup_progress_frame = ttk.Frame(self.cleanup_options_frame, style='TFrame')
        self.cleanup_progress_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the cleanup output
        self.cleanup_output_frame = ttk.Frame(self.cleanup_options_frame, style='TFrame')
        self.cleanup_output_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the additional tools
        self.additional_tools_frame = ttk.LabelFrame(self.cleanup_frame, text="Additional Tools", style='Group.TLabelframe')
        self.additional_tools_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create a frame for the additional tools buttons
        self.additional_tools_buttons_frame = ttk.Frame(self.additional_tools_frame, style='TFrame')
        self.additional_tools_buttons_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the additional tools description
        self.additional_tools_description_frame = ttk.Frame(self.additional_tools_frame, style='TFrame')
        self.additional_tools_description_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the additional tools progress bar
        self.additional_tools_progress_frame = ttk.Frame(self.additional_tools_frame, style='TFrame')
        self.additional_tools_progress_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the additional tools output
        self.additional_tools_output_frame = ttk.Frame(self.additional_tools_frame, style='TFrame')
        self.additional_tools_output_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the system restore points
        self.system_restore_frame = ttk.LabelFrame(self.cleanup_frame, text="System Restore Points", style='Group.TLabelframe')
        self.system_restore_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create a frame for the system restore buttons
        self.system_restore_buttons_frame = ttk.Frame(self.system_restore_frame, style='TFrame')
        self.system_restore_buttons_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the system restore description
        self.system_restore_description_frame = ttk.Frame(self.system_restore_frame, style='TFrame')
        self.system_restore_description_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the system restore progress bar
        self.system_restore_progress_frame = ttk.Frame(self.system_restore_frame, style='TFrame')
        self.system_restore_progress_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the system restore output
        self.system_restore_output_frame = ttk.Frame(self.system_restore_frame, style='TFrame')
        self.system_restore_output_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the system backup
        self.system_backup_frame = ttk.LabelFrame(self.cleanup_frame, text="System Backup", style='Group.TLabelframe')
        self.system_backup_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create a frame for the system backup buttons
        self.system_backup_buttons_frame = ttk.Frame(self.system_backup_frame, style='TFrame')
        self.system_backup_buttons_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create a frame for the system backup description
        self.system_backup_description_frame = ttk.Frame(self.system_backup_frame, style='TFrame')
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog, simpledialog
import subprocess
import os
import sys
import tempfile
import ctypes
import shutil
from threading import Thread
import threading
import re
import psutil
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import platform
import glob
import winreg
from datetime import datetime
import time
import csv
import socket
import functools
import traceback
import concurrent.futures
import fnmatch

try:
    import winshell
except ImportError:
    pass  # Handle later in the code

# Set better UI fonts and colors
HEADING_FONT = ('Segoe UI', 12, 'bold')
NORMAL_FONT = ('Segoe UI', 10)
BUTTON_FONT = ('Segoe UI', 9)
DESCRIPTION_FONT = ('Segoe UI', 9)
LOG_FONT = ('Consolas', 9)

# Color scheme
BG_COLOR = "#f5f5f5"
PRIMARY_COLOR = "#3498db"
SECONDARY_COLOR = "#e74c3c"
ACCENT_COLOR = "#2ecc71"
TEXT_COLOR = "#333333"
WARNING_BG = "#fff3cd"
WARNING_FG = "#856404"
ERROR_BG = "#f8d7da"
ERROR_FG = "#721c24"
SUCCESS_BG = "#d4edda"
SUCCESS_FG = "#155724"
LOG_BG = "#f8f9fa"

# Thread safety lock for UI updates
ui_lock = threading.Lock()

# Global exception handler to prevent application crashes
def global_exception_handler(exc_type, exc_value, exc_traceback):
    """Global exception handler to prevent crashes"""
    # Format the exception
    error_msg = ''.join(traceback.format_exception(exc_type, exc_value, exc_traceback))
    # Log to console
    print(f"Unhandled exception: {error_msg}")
    # Show error message in dialog if possible
    try:
        messagebox.showerror("Unhandled Error", 
                            f"An unexpected error occurred:\n\n{str(exc_value)}\n\nSee console for details.")
    except:
        # If messagebox fails, just print to console
        print("Could not show error dialog")
    # Return True to prevent the default tkinter error dialog
    return True

# Install the exception handler
sys.excepthook = global_exception_handler

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def run_as_admin():
    # Get the script path
    script_path = os.path.abspath(sys.argv[0])
    
    # Only run if we have a valid path (not running from IDLE, etc.)
    if os.path.exists(script_path):
        try:
            # Use ShellExecuteW to run the script as admin
            ctypes.windll.shell32.ShellExecuteW(
                None, 
                "runas", 
                sys.executable, 
                f'"{script_path}"', 
                None, 
                1
            )
        except Exception as e:
            print(f"Error running as admin: {e}")
            # If there's an error, don't exit - just log it and continue without admin
            return False
    else:
        print("Could not determine script path")
        return False
    return True

def is_windows_10_or_11():
    """Check if the current system is running Windows 10 or 11"""
    try:
        # Get Windows version
        win_ver = platform.win32_ver()
        win_version = win_ver[0]  # Major version
        win_build = win_ver[1]    # Build number
        
        # Windows 10 build numbers start from 10240 (RTM)
        # Windows 11 build numbers start from 22000
        if win_version == '10':
            build_num = int(win_build.split('.')[0])
            return build_num >= 10240
        else:
            # Try to determine based on registry
            try:
                reg_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 
                                        r"SOFTWARE\Microsoft\Windows NT\CurrentVersion")
                build_num = int(winreg.QueryValueEx(reg_key, "CurrentBuildNumber")[0])
                winreg.CloseKey(reg_key)
                
                # Windows 11 builds are 22000+
                return build_num >= 10240
            except:
                # If we can't determine, we'll assume it's not compatible
                return False
    except:
        return False

def handle_exception(func):
    """Decorator for handling exceptions in methods"""
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        try:
            return func(self, *args, **kwargs)
        except Exception as e:
            # Log the exception
            self.log(f"Error in {func.__name__}: {str(e)}", 'error')
            # Log the traceback for debugging
            import traceback
            self.log(f"Traceback: {traceback.format_exc()}", 'error')
            # Show error message to user
            self.update_status(f"Error in {func.__name__}")
            messagebox.showerror("Error", f"An unexpected error occurred in {func.__name__}:\n\n{str(e)}")
            return None
    return wrapper

def thread_safe(func):
    """Decorator for ensuring thread-safe UI updates"""
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        with ui_lock:
            return func(self, *args, **kwargs)
    return wrapper

class SystemUtilities:
    def __init__(self, root):
        self.root = root
        self.root.title("Windows System Utilities")
        
        # Make window open in fullscreen by default
        self.root.state('zoomed')  # For Windows, this maximizes the window
        
        # Get screen dimensions for responsive design
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # Set minimum size for the window
        self.root.minsize(900, 600)
        
        # Set the application icon
        try:
            self.root.iconbitmap("system_icon.ico")
        except:
            # Icon file not found, continue without it
            pass
        
        # Configure the style for better appearance
        self.style = ttk.Style()
        # Apply clam theme if available
        if 'clam' in self.style.theme_names():
            self.style.theme_use('clam')
            
        self.style.configure('TFrame', background=BG_COLOR)
        self.style.configure('Tab.TFrame', background=BG_COLOR)
        self.style.configure('TLabel', background=BG_COLOR, foreground=TEXT_COLOR, font=NORMAL_FONT)
        self.style.configure('Header.TLabel', font=HEADING_FONT, foreground=PRIMARY_COLOR)
        self.style.configure('TButton', font=BUTTON_FONT)
        self.style.configure('Primary.TButton', background=PRIMARY_COLOR)
        self.style.configure('Secondary.TButton', background=SECONDARY_COLOR)
        self.style.configure('Accent.TButton', background=ACCENT_COLOR)
        self.style.configure('TLabelframe', background=BG_COLOR)
        self.style.configure('Group.TLabelframe', background=BG_COLOR)
        self.style.configure('Group.TLabelframe.Label', background=BG_COLOR, foreground=TEXT_COLOR, font=NORMAL_FONT)
        
        # Set up the main frame with split-pane layout
        main_frame = ttk.Frame(root, style='TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create PanedWindow for split layout
        self.paned = ttk.PanedWindow(main_frame, orient=tk.HORIZONTAL)
        self.paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Left side - Tool tabs
        self.left_frame = ttk.Frame(self.paned, style='TFrame')
        
        # Right side - Logs and status
        self.right_frame = ttk.Frame(self.paned, style='TFrame')
        
        # Add the frames to the paned window
        self.paned.add(self.left_frame, weight=3)
        self.paned.add(self.right_frame, weight=1)
        
        # Create tabs on the left side
        self.tabs = ttk.Notebook(self.left_frame)
        self.tabs.pack(fill=tk.BOTH, expand=True)
        
        # Create the tabs
        self.cleanup_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.system_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.update_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.storage_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.network_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.hyperv_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.optimize_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        
        # Add tabs to the notebook
        self.tabs.add(self.cleanup_tab, text="Cleanup")
        self.tabs.add(self.system_tab, text="System Tools")
        self.tabs.add(self.update_tab, text="Windows Update")
        self.tabs.add(self.storage_tab, text="Storage")
        self.tabs.add(self.network_tab, text="Network")
        self.tabs.add(self.hyperv_tab, text="Hyper-V")
        self.tabs.add(self.optimize_tab, text="Optimize")
        
        # Add tab change event 
        self.tabs.bind("<<NotebookTabChanged>>", self.on_tab_changed)
        
        # Set up the log area on the right side
        self.create_log_area()
        
        # Initialize tab contents
        self.init_cleanup_tab()
        self.init_system_tab()
        self.init_update_tab()
        self.init_storage_tab()
        self.init_network_tab()
        self.init_hyperv_tab()
        self.init_optimize_tab()
        
        # Add status bar at the bottom
        self.status_bar = ttk.Label(root, text="Ready", relief=tk.SUNKEN, anchor=tk.W, font=NORMAL_FONT)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Initialize the thread pool for background tasks
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=5)
        
        # Set background monitoring parameters
        self.background_monitoring = True
        self.show_verbose_logs = True
        
        # Show a welcome message
        self.log("System Utilities initialized successfully", "info")
        self.update_status("Ready")
        
        # Start background monitoring
        self.start_background_monitoring()
        
        # Periodically collect garbage to prevent memory leaks
        def garbage_collect():
            import gc
            gc.collect()
            self.root.after(300000, garbage_collect)  # Every 5 minutes
        
        # Start the garbage collection timer
        self.root.after(300000, garbage_collect)
    
    def on_tab_changed(self, event):
        """Handle tab change event to collect and show relevant system information"""
        tab_id = self.tabs.select()
        tab_name = self.tabs.tab(tab_id, "text")
        
        # Log the tab change
        self.log(f"Switched to {tab_name} tab", "info")
        
        # Show relevant system information based on the tab
        if tab_name == "Network":
            self.log_network_info()
        elif tab_name == "Hyper-V":
            self.log_hyperv_info()
        elif tab_name == "Optimize":
            self.log_performance_info()
        elif tab_name == "Storage":
            self.log_storage_info()
    
    def start_background_monitoring(self):
        """Start background monitoring threads"""
        self.log("Starting background system monitoring...", "background")
        
        # Start network monitoring thread
        network_thread = Thread(target=self._monitor_network_activity)
        network_thread.daemon = True
        network_thread.start()
        
        # Start performance monitoring thread
        performance_thread = Thread(target=self._monitor_system_performance)
        performance_thread.daemon = True
        performance_thread.start()
        
        # Start Hyper-V monitoring thread (if applicable)
        hyperv_thread = Thread(target=self._monitor_hyperv_status)
        hyperv_thread.daemon = True
        hyperv_thread.start()
    
    def _monitor_network_activity(self):
        """Background thread to monitor network activity"""
        try:
            # Initialize network stats
            prev_net_io = psutil.net_io_counters()
            
            while self.background_monitoring:
                time.sleep(10)  # Check every 10 seconds
                
                try:
                    # Get current network stats
                    net_io = psutil.net_io_counters()
                    
                    # Calculate data transferred since last check
                    sent_mb = (net_io.bytes_sent - prev_net_io.bytes_sent) / (1024 * 1024)
                    recv_mb = (net_io.bytes_recv - prev_net_io.bytes_recv) / (1024 * 1024)
                    
                    # Log significant network activity
                    if sent_mb > 5 or recv_mb > 5:  # Only log if more than 5MB in 10 seconds
                        self.root.after(0, lambda s=sent_mb, r=recv_mb: 
                                    self.log(f"Data transfer: {s:.2f}MB sent, {r:.2f}MB received in last 10 seconds", "network"))
                    
                    # Update previous stats
                    prev_net_io = net_io
                    
                    # Check for connection changes every 30 seconds
                    if time.time() % 30 < 10:
                        try:
                            # Get connection stats (requires admin on Windows)
                            # This might fail on non-admin, which is fine
                            connections = len(psutil.net_connections())
                            self.root.after(0, lambda c=connections: 
                                        self.log(f"Active network connections: {c}", "network"))
                        except:
                            pass
                except Exception as e:
                    # Silent fail for background monitoring
                    print(f"Network monitoring error: {str(e)}")
        
        except Exception as e:
            print(f"Error in network monitoring thread: {str(e)}")
    
    def _monitor_system_performance(self):
        """Background thread to monitor system performance"""
        try:
            while self.background_monitoring:
                time.sleep(15)  # Check every 15 seconds
                
                try:
                    # Get system performance metrics
                    cpu_percent = psutil.cpu_percent(interval=1)
                    memory = psutil.virtual_memory()
                    
                    # Log when system is under high load
                    if cpu_percent > 75:
                        self.root.after(0, lambda p=cpu_percent: 
                                    self.log(f"High CPU usage: {p}%", "system"))
                    
                    if memory.percent > 80:
                        self.root.after(0, lambda p=memory.percent: 
                                    self.log(f"High memory usage: {p}%", "system"))
                    
                    # Periodically log general system info (every 60 seconds)
                    if time.time() % 60 < 15:
                        # Get disk I/O
                        try:
                            disk_io = psutil.disk_io_counters()
                            if hasattr(self, 'prev_disk_io'):
                                read_mb = (disk_io.read_bytes - self.prev_disk_io.read_bytes) / (1024 * 1024)
                                write_mb = (disk_io.write_bytes - self.prev_disk_io.write_bytes) / (1024 * 1024)
                                
                                if read_mb > 50 or write_mb > 50:  # Only log high activity
                                    self.root.after(0, lambda r=read_mb, w=write_mb: 
                                                self.log(f"Disk activity: {r:.2f}MB read, {w:.2f}MB written in last minute", "system"))
                            
                            self.prev_disk_io = disk_io
                        except:
                            pass
                    
                except Exception as e:
                    # Silent fail for background monitoring
                    print(f"Performance monitoring error: {str(e)}")
        
        except Exception as e:
            print(f"Error in performance monitoring thread: {str(e)}")
    
    def _monitor_hyperv_status(self):
        """Background thread to monitor Hyper-V status"""
        try:
            # Initial delay to not overload startup
            time.sleep(20)
            
            while self.background_monitoring:
                # Check less frequently
                time.sleep(60)
                
                try:
                    # Only do this check on Windows
                    if platform.system() != 'Windows':
                        continue
                    
                    # Check Hyper-V status using PowerShell
                    ps_command = [
                        "powershell",
                        "-Command",
                        "(Get-Service -Name 'vmms' -ErrorAction SilentlyContinue).Status"
                    ]
                    
                    process = subprocess.Popen(
                        ps_command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    
                    stdout, stderr = process.communicate(timeout=10)
                    
                    if process.returncode == 0 and stdout.strip():
                        status = stdout.strip()
                        if status == "Running":
                            # Log running VMs
                            try:
                                vm_command = [
                                    "powershell",
                                    "-Command",
                                    "Get-VM | Where-Object {$_.State -eq 'Running'} | Select-Object -ExpandProperty Name"
                                ]
                                
                                vm_process = subprocess.Popen(
                                    vm_command,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    text=True,
                                    creationflags=subprocess.CREATE_NO_WINDOW
                                )
                                
                                vm_stdout, vm_stderr = vm_process.communicate(timeout=10)
                                
                                if vm_process.returncode == 0 and vm_stdout.strip():
                                    running_vms = vm_stdout.strip().split('\n')
                                    running_vms = [vm.strip() for vm in running_vms if vm.strip()]
                                    
                                    if running_vms:
                                        self.root.after(0, lambda vms=running_vms: 
                                                    self.log(f"Running VMs: {', '.join(vms)}", "hyperv"))
                            except:
                                pass
                
                except Exception as e:
                    # Silent fail for background monitoring
                    print(f"Hyper-V monitoring error: {str(e)}")
        
        except Exception as e:
            print(f"Error in Hyper-V monitoring thread: {str(e)}")
    
    def log_network_info(self):
        """Log detailed network information when network tab is selected"""
        self.log("Collecting network information...", "network")
        
        # Start thread to collect detailed network info
        network_info_thread = Thread(target=self._collect_network_info)
        network_info_thread.daemon = True
        network_info_thread.start()
    
    def _collect_network_info(self):
        """Collect detailed network information in a background thread"""
        try:
            # Get network interfaces
            interfaces = psutil.net_if_addrs()
            active_interfaces = []
            
            for interface, addrs in interfaces.items():
                for addr in addrs:
                    if addr.family == socket.AF_INET and not addr.address.startswith('127.'):
                        active_interfaces.append(f"{interface}: {addr.address}")
            
            if active_interfaces:
                self.root.after(0, lambda ifs=active_interfaces: 
                            self.log(f"Active network interfaces: {', '.join(ifs)}", "network"))
            
            # Get default gateway
            try:
                gateways = psutil.net_if_stats()
                for name, stats in gateways.items():
                    if stats.isup:
                        self.root.after(0, lambda n=name, s=stats: 
                                    self.log(f"Interface {n} is up, speed: {s.speed} Mbps", "network"))
            except:
                pass
            
            # Check internet connectivity
            try:
                # Try to get external IP
                urls = ["https://api.ipify.org", "https://ifconfig.me/ip", "https://icanhazip.com"]
                
                import urllib.request
                
                for url in urls:
                    try:
                        response = urllib.request.urlopen(url, timeout=3)
                        data = response.read().decode('utf-8')
                        external_ip = data.strip()
                        self.root.after(0, lambda ip=external_ip: 
                                    self.log(f"Internet connection active, external IP: {ip}", "network"))
                        break
                    except:
                        continue
            except:
                pass
            
        except Exception as e:
            print(f"Error collecting network info: {str(e)}")
    
    def log_hyperv_info(self):
        """Log detailed Hyper-V information when Hyper-V tab is selected"""
        self.log("Collecting Hyper-V information...", "hyperv")
        
        # Start thread to collect detailed Hyper-V info
        hyperv_info_thread = Thread(target=self._collect_hyperv_info)
        hyperv_info_thread.daemon = True
        hyperv_info_thread.start()
    
    def _collect_hyperv_info(self):
        """Collect detailed Hyper-V information in a background thread"""
        try:
            # Check Hyper-V status
            ps_command = [
                "powershell",
                "-Command",
                "(Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online -ErrorAction SilentlyContinue).State"
            ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=10)
            
            if process.returncode == 0 and stdout.strip():
                state = stdout.strip()
                is_enabled = state == "Enabled"
                
                if is_enabled:
                    self.root.after(0, lambda: self.log("Hyper-V is enabled on this system", "hyperv"))
                    
                    # Get VM count
                    vm_command = [
                        "powershell",
                        "-Command",
                        "Get-VM -ErrorAction SilentlyContinue | Measure-Object | Select-Object -ExpandProperty Count"
                    ]
                    
                    vm_process = subprocess.Popen(
                        vm_command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    
                    vm_stdout, vm_stderr = vm_process.communicate(timeout=10)
                    
                    if vm_process.returncode == 0 and vm_stdout.strip():
                        try:
                            vm_count = int(vm_stdout.strip())
                            self.root.after(0, lambda c=vm_count: 
                                        self.log(f"Found {c} virtual machines", "hyperv"))
                            
                            # Get running VMs
                            if vm_count > 0:
                                running_command = [
                                    "powershell",
                                    "-Command",
                                    "Get-VM | Where-Object {$_.State -eq 'Running'} | Select-Object -ExpandProperty Name"
                                ]
                                
                                running_process = subprocess.Popen(
                                    running_command,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    text=True,
                                    creationflags=subprocess.CREATE_NO_WINDOW
                                )
                                
                                running_stdout, running_stderr = running_process.communicate(timeout=10)
                                
                                if running_process.returncode == 0 and running_stdout.strip():
                                    running_vms = running_stdout.strip().split('\n')
                                    running_vms = [vm.strip() for vm in running_vms if vm.strip()]
                                    
                                    if running_vms:
                                        self.root.after(0, lambda vms=running_vms: 
                                                    self.log(f"Running VMs: {', '.join(vms)}", "hyperv"))
                        except:
                            pass
                else:
                    self.root.after(0, lambda: self.log("Hyper-V is not enabled on this system", "hyperv"))
            else:
                self.root.after(0, lambda: self.log("Could not determine Hyper-V status", "hyperv"))
            
        except Exception as e:
            print(f"Error collecting Hyper-V info: {str(e)}")
    
    def log_performance_info(self):
        """Log detailed performance information when Optimize tab is selected"""
        self.log("Collecting system performance information...", "system")
        
        # Start thread to collect detailed performance info
        perf_info_thread = Thread(target=self._collect_performance_info)
        perf_info_thread.daemon = True
        perf_info_thread.start()
    
    def _collect_performance_info(self):
        """Collect detailed performance information in a background thread"""
        try:
            # Get CPU information
            cpu_freq = psutil.cpu_freq()
            cpu_count = psutil.cpu_count(logical=False)
            cpu_logical = psutil.cpu_count(logical=True)
            
            if cpu_freq:
                self.root.after(0, lambda f=cpu_freq.current: 
                            self.log(f"CPU frequency: {f:.2f} MHz", "system"))
            
            self.root.after(0, lambda c=cpu_count, l=cpu_logical: 
                        self.log(f"CPU cores: {c} physical, {l} logical", "system"))
            
            # Get memory information
            memory = psutil.virtual_memory()
            total_gb = memory.total / (1024 * 1024 * 1024)
            used_gb = memory.used / (1024 * 1024 * 1024)
            
            self.root.after(0, lambda t=total_gb, u=used_gb, p=memory.percent: 
                        self.log(f"Memory: {u:.2f} GB used of {t:.2f} GB total ({p}%)", "system"))
            
            # Get disk information
            try:
                disk_io = psutil.disk_io_counters()
                read_gb = disk_io.read_bytes / (1024 * 1024 * 1024)
                write_gb = disk_io.write_bytes / (1024 * 1024 * 1024)
                
                self.root.after(0, lambda r=read_gb, w=write_gb: 
                            self.log(f"Disk I/O since boot: {r:.2f} GB read, {w:.2f} GB written", "system"))
            except:
                pass
            
            # Get network information
            try:
                net_io = psutil.net_io_counters()
                sent_gb = net_io.bytes_sent / (1024 * 1024 * 1024)
                recv_gb = net_io.bytes_recv / (1024 * 1024 * 1024)
                
                self.root.after(0, lambda s=sent_gb, r=recv_gb: 
                            self.log(f"Network I/O since boot: {s:.2f} GB sent, {r:.2f} GB received", "system"))
            except:
                pass
            
            # Get process information
            try:
                processes = len(psutil.pids())
                self.root.after(0, lambda p=processes: 
                            self.log(f"Running processes: {p}", "system"))
                
                # Get top 3 CPU-consuming processes
                top_processes = []
                for proc in sorted(psutil.process_iter(['pid', 'name', 'cpu_percent']), 
                                key=lambda p: p.info['cpu_percent'] or 0, reverse=True)[:3]:
                    if proc.info['cpu_percent'] > 5:  # Only include processes using significant CPU
                        top_processes.append(f"{proc.info['name']} (PID: {proc.info['pid']}): {proc.info['cpu_percent']:.1f}%")
                
                if top_processes:
                    self.root.after(0, lambda p=top_processes: 
                                self.log(f"Top CPU processes: {', '.join(p)}", "system"))
            except:
                pass
            
        except Exception as e:
            print(f"Error collecting performance info: {str(e)}")
    
    def log_storage_info(self):
        """Log detailed storage information when Storage tab is selected"""
        self.log("Collecting storage information...", "system")
        
        # Start thread to collect detailed storage info
        storage_info_thread = Thread(target=self._collect_storage_info)
        storage_info_thread.daemon = True
        storage_info_thread.start()
    
    def _collect_storage_info(self):
        """Collect detailed storage information in a background thread"""
        try:
            # Get disk partitions
            partitions = psutil.disk_partitions()
            
            total_space = 0
            used_space = 0
            
            for partition in partitions:
                try:
                    if partition.fstype:  # Skip empty partitions
                        usage = psutil.disk_usage(partition.mountpoint)
                        
                        # Convert to GB
                        total_gb = usage.total / (1024 * 1024 * 1024)
                        used_gb = usage.used / (1024 * 1024 * 1024)
                        free_gb = usage.free / (1024 * 1024 * 1024)
                        
                        # Add to totals
                        total_space += usage.total
                        used_space += usage.used
                        
                        self.root.after(0, lambda p=partition.mountpoint, t=total_gb, u=used_gb, f=free_gb, perc=usage.percent: 
                                    self.log(f"Disk {p}: {t:.2f} GB total, {u:.2f} GB used ({perc}%), {f:.2f} GB free", "system"))
                except:
                    # Skip partitions we can't access
                    continue
            
            # Log totals
            if total_space > 0:
                total_tb = total_space / (1024 * 1024 * 1024 * 1024)
                used_tb = used_space / (1024 * 1024 * 1024 * 1024)
                free_tb = (total_space - used_space) / (1024 * 1024 * 1024 * 1024)
                percent = (used_space / total_space) * 100
                
                self.root.after(0, lambda t=total_tb, u=used_tb, f=free_tb, p=percent: 
                            self.log(f"Total storage: {t:.2f} TB total, {u:.2f} TB used ({p:.1f}%), {f:.2f} TB free", "system"))
            
            # Check for large temp files
            try:
                temp_dir = os.environ.get('TEMP')
                if temp_dir and os.path.exists(temp_dir):
                    temp_size = 0
                    temp_files = 0
                    
                    for root, dirs, files in os.walk(temp_dir, topdown=False):
                        for name in files:
                            try:
                                file_path = os.path.join(root, name)
                                temp_size += os.path.getsize(file_path)
                                temp_files += 1
                            except:
                                continue
                    
                    temp_size_mb = temp_size / (1024 * 1024)
                    
                    if temp_size_mb > 100:  # Only log if > 100 MB
                        self.root.after(0, lambda s=temp_size_mb, f=temp_files: 
                                    self.log(f"Temp folder contains {f} files using {s:.2f} MB of space", "system"))
            except:
                pass
            
        except Exception as e:
            print(f"Error collecting storage info: {str(e)}")
    
    def log_network_status(self):
        """Log network interfaces status"""
        try:
            # Get network interfaces
            net_if_thread = Thread(target=self._log_network_interfaces)
            net_if_thread.daemon = True
            net_if_thread.start()
            
            # Try to get external IP in background
            ext_ip_thread = Thread(target=self._log_external_ip)
            ext_ip_thread.daemon = True
            ext_ip_thread.start()
        except Exception as e:
            print(f"Error logging network status: {str(e)}")

    def _log_network_interfaces(self):
        """Log information about network interfaces"""
        try:
            # Get network interfaces
            interfaces = psutil.net_if_addrs()
            
            # Log active interfaces
            active_interfaces = []
            for name, addrs in interfaces.items():
                for addr in addrs:
                    if addr.family == socket.AF_INET and not addr.address.startswith('127.'):
                        active_interfaces.append(f"{name}: {addr.address}")
            
            if active_interfaces:
                self.root.after(0, lambda: self.log(f"Active network interfaces: {', '.join(active_interfaces)}", "info"))
        except Exception as e:
            print(f"Error logging network interfaces: {str(e)}")

    def _log_external_ip(self):
        """Log external IP information"""
        try:
            # There are multiple services we can try
            urls = [
                "https://api.ipify.org",
                "https://ifconfig.me/ip",
                "https://icanhazip.com"
            ]
            
            import urllib.request
            import re
            
            for url in urls:
                try:
                    response = urllib.request.urlopen(url, timeout=3)
                    data = response.read().decode('utf-8')
                    
                    # Extract IP (needed for some services that return HTML)
                    if "<body>" in data:
                        # For services that return HTML
                        ip_match = re.search(r'\d+\.\d+\.\d+\.\d+', data)
                        if ip_match:
                            external_ip = ip_match.group(0)
                            self.root.after(0, lambda: self.log(f"External IP: {external_ip}", "info"))
                            return
                    else:
                        # For services that return just the IP
                        external_ip = data.strip()
                        self.root.after(0, lambda: self.log(f"External IP: {external_ip}", "info"))
                        return
                except:
                    continue
        except Exception as e:
            print(f"Error logging external IP: {str(e)}")

    def log_hyperv_status(self):
        """Log Hyper-V status information"""
        try:
            hyperv_thread = Thread(target=self._check_hyperv_status_for_log)
            hyperv_thread.daemon = True
            hyperv_thread.start()
        except Exception as e:
            print(f"Error logging Hyper-V status: {str(e)}")

    def _check_hyperv_status_for_log(self):
        """Check Hyper-V status and log it"""
        try:
            # Check if Hyper-V feature is installed
            ps_command = [
                "powershell",
                "-Command",
                "(Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online).State"
            ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=10)
            
            if process.returncode == 0 and stdout.strip():
                state = stdout.strip()
                is_enabled = state == "Enabled"
                
                if is_enabled:
                    self.root.after(0, lambda: self.log("Hyper-V status: Enabled", "info"))
                    
                    # Check Hyper-V service status
                    service_command = [
                        "powershell",
                        "-Command",
                        "(Get-Service -Name 'vmms').Status"
                    ]
                    
                    service_process = subprocess.Popen(
                        service_command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    
                    service_stdout, _ = service_process.communicate(timeout=10)
                    
                    if service_process.returncode == 0 and service_stdout.strip():
                        service_status = service_stdout.strip()
                        self.root.after(0, lambda: self.log(f"Hyper-V service status: {service_status}", "info"))
                    
                    # Call VM logging function
                    self._log_hyperv_vms()
                else:
                    self.root.after(0, lambda: self.log("Hyper-V status: Not enabled", "info"))
            else:
                self.root.after(0, lambda: self.log("Hyper-V status: Unknown", "warning"))
        except Exception as e:
            print(f"Error checking Hyper-V status: {str(e)}")

    def log_system_performance(self):
        """Log detailed system performance information"""
        try:
            perf_thread = Thread(target=self._log_performance_metrics)
            perf_thread.daemon = True
            perf_thread.start()
        except Exception as e:
            print(f"Error logging system performance: {str(e)}")

    def _log_performance_metrics(self):
        """Log detailed performance metrics"""
        try:
            # Get basic stats
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            
            # Log CPU and memory
            self.root.after(0, lambda: self.log(f"CPU usage: {cpu_percent}%", "info"))
            self.root.after(0, lambda: self.log(f"Memory usage: {memory.percent}% ({memory.used/1024/1024/1024:.2f}GB used of {memory.total/1024/1024/1024:.2f}GB total)", "info"))
            
            # Log disk usage
            disk_thread = Thread(target=self._log_disk_performance)
            disk_thread.daemon = True
            disk_thread.start()
            
            # Log running processes count
            processes = len(psutil.pids())
            self.root.after(0, lambda: self.log(f"Running processes: {processes}", "info"))
            
            # Log active network connections
            try:
                connections = len(psutil.net_connections())
                self.root.after(0, lambda: self.log(f"Active network connections: {connections}", "info"))
            except:
                # Requires admin rights on Windows, so may fail
                pass
        except Exception as e:
            print(f"Error logging performance metrics: {str(e)}")

    def _log_disk_performance(self):
        """Log disk performance metrics"""
        try:
            # Get disk partitions
            partitions = psutil.disk_partitions()
            
            for partition in partitions:
                try:
                    if 'cdrom' in partition.opts or partition.fstype == '':
                        # Skip CD-ROM drives or invalid partitions
                        continue
                    
                    usage = psutil.disk_usage(partition.mountpoint)
                    
                    # Only log disks that are reasonably full
                    if usage.percent > 75:
                        self.root.after(0, lambda p=partition.mountpoint, u=usage.percent: 
                                    self.log(f"Disk {p} is {u}% full", "warning"))
                except:
                    # Skip partitions we can't access
                    continue
        except Exception as e:
            print(f"Error logging disk performance: {str(e)}")

    def log_storage_status(self):
        """Log storage status information"""
        try:
            storage_thread = Thread(target=self._log_storage_metrics)
            storage_thread.daemon = True
            storage_thread.start()
        except Exception as e:
            print(f"Error logging storage status: {str(e)}")

    def _log_storage_metrics(self):
        """Log detailed storage metrics"""
        try:
            # Get disk partitions
            partitions = psutil.disk_partitions()
            
            total_space = 0
            used_space = 0
            
            for partition in partitions:
                try:
                    if 'cdrom' in partition.opts or partition.fstype == '':
                        # Skip CD-ROM drives or invalid partitions
                        continue
                    
                    usage = psutil.disk_usage(partition.mountpoint)
                    
                    # Convert to GB
                    total_gb = usage.total / (1024**3)
                    used_gb = usage.used / (1024**3)
                    free_gb = usage.free / (1024**3)
                    
                    # Add to totals
                    total_space += usage.total
                    used_space += usage.used
                    
                    self.root.after(0, lambda p=partition.mountpoint, t=total_gb, u=used_gb, f=free_gb, perc=usage.percent: 
                                self.log(f"Disk {p}: {t:.2f}GB total, {u:.2f}GB used ({perc}%), {f:.2f}GB free", "info"))
                except:
                    # Skip partitions we can't access
                    continue
            
            # Log totals
            if total_space > 0:
                total_gb = total_space / (1024**3)
                used_gb = used_space / (1024**3)
                free_gb = (total_space - used_space) / (1024**3)
                percent = (used_space / total_space) * 100
                
                self.root.after(0, lambda: self.log(f"All disks: {total_gb:.2f}GB total, {used_gb:.2f}GB used ({percent:.1f}%), {free_gb:.2f}GB free", "info"))
        except Exception as e:
            print(f"Error logging storage metrics: {str(e)}")

    def update_background_logs(self):
        """Periodically update logs with background information"""
        # Log active processes
        self.log_active_background_processes()
        
        # Update system stats if performance tab is active
        current_tab = self.tabs.tab(self.tabs.select(), "text")
        
        if current_tab == "Optimize":
            self.log_system_performance()
        elif current_tab == "Network":
            self.log_network_status()
        elif current_tab == "Storage":
            self.log_storage_status()
        elif current_tab == "Hyper-V":
            self.log_hyperv_status()
            
        # Schedule next update
        self.root.after(60000, self.update_background_logs)

    def log_active_background_processes(self):
        """Log information about active background processes"""
        # Only log if there are active processes
        if hasattr(self, 'background_processes') and self.background_processes:
            active_count = len([p for p in self.background_processes.values() if p.get('active', False)])
            if active_count > 0:
                self.log(f"{active_count} background processes active", "info")

    def register_background_process(self, name, description):
        """Register a background process for tracking"""
        process_id = self.bg_process_count
        self.bg_process_count += 1
        
        self.background_processes[process_id] = {
            'name': name,
            'description': description,
            'start_time': datetime.now(),
            'active': True
        }
        
        return process_id
        
    def complete_background_process(self, process_id):
        """Mark a background process as completed"""
        if process_id in self.background_processes:
            self.background_processes[process_id]['active'] = False
            self.background_processes[process_id]['end_time'] = datetime.now()
    
    def create_log_area(self):
        """Create the log area on the right side"""
        log_frame = ttk.LabelFrame(self.right_frame, text="Activity Log", style='Group.TLabelframe')
        log_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Create a text widget for the log with a scrollbar
        self.log_text = scrolledtext.ScrolledText(log_frame, wrap=tk.WORD, height=10, 
                                                font=LOG_FONT, background=LOG_BG)
        self.log_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.log_text.config(state=tk.DISABLED)
        
        # Add text tags for different log levels
        self.log_text.tag_configure("error", foreground=ERROR_FG, background=ERROR_BG)
        self.log_text.tag_configure("warning", foreground=WARNING_FG, background=WARNING_BG)
        self.log_text.tag_configure("success", foreground=SUCCESS_FG, background=SUCCESS_BG)
        self.log_text.tag_configure("info", foreground=PRIMARY_COLOR)
        
        # Create buttons for log control
        button_frame = ttk.Frame(log_frame)
        button_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(button_frame, text="Clear Log", command=self.clear_log).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Save Log", command=self.save_log).pack(side=tk.LEFT, padx=5)
    
    @thread_safe
    def log(self, message, level="info"):
        """Add a message to the log with timestamp"""
        if not hasattr(self, 'log_text'):
            return
            
        self.log_text.config(state=tk.NORMAL)
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Format based on log level
        if level == "error":
            formatted_msg = f"[{timestamp}] ERROR: {message}\n"
            tag = "error"
        elif level == "warning":
            formatted_msg = f"[{timestamp}] WARNING: {message}\n"
            tag = "warning"
        elif level == "success":
            formatted_msg = f"[{timestamp}] SUCCESS: {message}\n"
            tag = "success"
        elif level == "background":
            # Special format for background activities
            formatted_msg = f"[{timestamp}] BACKGROUND: {message}\n"
            tag = "info"
        elif level == "network":
            # Special format for network activities
            formatted_msg = f"[{timestamp}] NETWORK: {message}\n"
            tag = "info"
        elif level == "hyperv":
            # Special format for Hyper-V activities
            formatted_msg = f"[{timestamp}] HYPER-V: {message}\n"
            tag = "info"
        elif level == "system":
            # Special format for system performance activities
            formatted_msg = f"[{timestamp}] SYSTEM: {message}\n" 
            tag = "info"
        else:
            formatted_msg = f"[{timestamp}] INFO: {message}\n"
            tag = "info"
        
        self.log_text.insert(tk.END, formatted_msg, tag)
        self.log_text.see(tk.END)
        self.log_text.config(state=tk.DISABLED)
        
        # Also print to console for debugging
        print(formatted_msg.strip())
    
    def clear_log(self):
        """Clear the log text"""
        self.log_text.config(state=tk.NORMAL)
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state=tk.DISABLED)
        self.log("Log cleared", "info")
    
    def save_log(self):
        """Save the log content to a file"""
        # Get the current date and time for the filename
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        default_filename = f"system_utilities_log_{timestamp}.txt"
        
        # Ask user for file location
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
            initialfile=default_filename,
            title="Save Log File"
        )
        
        if not file_path:
            return  # User cancelled
        
        try:
            # Get log content
            self.log_text.config(state=tk.NORMAL)
            log_content = self.log_text.get(1.0, tk.END)
            self.log_text.config(state=tk.DISABLED)
            
            # Write to file
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(log_content)
                
            self.log(f"Log saved to {file_path}", "success")
        except Exception as e:
            self.log(f"Error saving log: {str(e)}", "error")
            messagebox.showerror("Error", f"Failed to save log: {str(e)}")
    
    @thread_safe
    def update_status(self, message):
        """Update the status bar text"""
        self.status_bar.config(text=message)
    
    def create_button(self, parent, text, command=None, row=0, column=0, 
                     columnspan=1, rowspan=1, padx=5, pady=5, sticky=tk.NSEW, 
                     is_primary=False, is_secondary=False):
        """Helper to create a styled button"""
        if is_primary:
            button = ttk.Button(parent, text=text, command=command, style='Primary.TButton')
        elif is_secondary:
            button = ttk.Button(parent, text=text, command=command, style='Secondary.TButton')
        else:
            button = ttk.Button(parent, text=text, command=command)
            
        button.grid(row=row, column=column, padx=padx, pady=pady, 
                   columnspan=columnspan, rowspan=rowspan, sticky=sticky)
        
        return button
    
    def restart_as_admin(self):
        """Restart the application with admin privileges"""
        if run_as_admin():
            self.root.destroy()  # Close current instance
        else:
            self.log("Failed to restart with admin privileges", "error")
            messagebox.showerror("Error", "Failed to restart with admin privileges.")
    
    def check_admin_rights(self, feature_name="This feature"):
        """Check if app has admin rights, offer to restart if not"""
        if not is_admin():
            self.log(f"{feature_name} requires administrator privileges", 'warning')
            if messagebox.askyesno("Admin Rights Required", 
                                 f"{feature_name} requires administrator privileges.\n\nDo you want to restart as administrator?"):
                self.restart_as_admin()
                return False
            return False
        return True
    
    def init_cleanup_tab(self):
        """Initialize the cleanup tab"""
        frame = ttk.Frame(self.cleanup_tab, style='Tab.TFrame', padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title with icon
        title_frame = ttk.Frame(frame, style='Tab.TFrame')
        title_frame.grid(column=0, row=0, columnspan=2, sticky=tk.W, pady=(0, 10))
        
        ttk.Label(
            title_frame, 
            text="System Cleanup", 
            font=HEADING_FONT,
            foreground=PRIMARY_COLOR
        ).pack(side=tk.LEFT)
        
        # Cleanup tools frame
        cleanup_frame = ttk.LabelFrame(frame, text="Cleanup Tools", padding=8, style='Group.TLabelframe')
        cleanup_frame.grid(column=0, row=1, sticky=tk.NSEW, pady=5, padx=5)
        
        # Cleanup tools buttons
        self.create_button(cleanup_frame, "Disk Cleanup", 
                          lambda: self.run_disk_cleanup(), 0, 0)
        
        self.create_button(cleanup_frame, "Empty Recycle Bin", 
                          lambda: self.empty_recycle_bin(), 0, 1)
        
        self.create_button(cleanup_frame, "Clear Temp Files", 
                          lambda: self.clear_temp_files(), 0, 2)
        
        self.create_button(cleanup_frame, "Clear Windows Cache", 
                          lambda: self.clear_windows_cache(), 0, 3)
        
        # Additional cleanup tools
        additional_cleanup_frame = ttk.LabelFrame(frame, text="Advanced Cleanup", padding=8, style='Group.TLabelframe')
        additional_cleanup_frame.grid(column=0, row=2, sticky=tk.NSEW, pady=5, padx=5)
        
        self.create_button(additional_cleanup_frame, "Remove Update Files", 
                          lambda: self.remove_update_files(), 0, 0)
        
        self.create_button(additional_cleanup_frame, "Clean Browser Data", 
                          lambda: self.clean_browser_data(), 0, 1)
        
        self.create_button(additional_cleanup_frame, "Full System Cleanup", 
                          lambda: self.full_system_cleanup(), 0, 2, is_primary=True)
        
        # Description area for cleanup tab
        desc_frame = ttk.LabelFrame(frame, text="Description", padding=10, style='Group.TLabelframe')
        desc_frame.grid(column=1, row=1, rowspan=2, padx=10, pady=5, sticky=tk.NSEW)
        
        self.cleanup_desc_text = tk.Text(desc_frame, wrap=tk.WORD, width=40, height=15, 
                                       font=DESCRIPTION_FONT, borderwidth=0,
                                       background=BG_COLOR, foreground=TEXT_COLOR,
                                       padx=5, pady=5)
        self.cleanup_desc_text.pack(fill=tk.BOTH, expand=True)
        self.cleanup_desc_text.config(state=tk.DISABLED)
        
        # Configure grid weights
        frame.columnconfigure(0, weight=2)
        frame.columnconfigure(1, weight=3)
        for i in range(1, 3):
            frame.rowconfigure(i, weight=1)
        
        # Set default description
        self.update_cleanup_description("Select a cleanup option from the left to see its description.")

    def update_cleanup_description(self, text):
        """Update the description in the cleanup tab"""
        if hasattr(self, 'cleanup_desc_text'):
            self.cleanup_desc_text.config(state=tk.NORMAL)
            self.cleanup_desc_text.delete(1.0, tk.END)
            self.cleanup_desc_text.insert(tk.END, text)
            self.cleanup_desc_text.config(state=tk.DISABLED)
    
    def init_system_tab(self):
        """Initialize the system tools tab"""
        frame = ttk.Frame(self.system_tab, style='Tab.TFrame', padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title with icon
        title_frame = ttk.Frame(frame, style='Tab.TFrame')
        title_frame.grid(column=0, row=0, columnspan=2, sticky=tk.W, pady=(0, 10))
        
        ttk.Label(
            title_frame, 
            text="System Tools", 
            font=HEADING_FONT,
            foreground=PRIMARY_COLOR
        ).pack(side=tk.LEFT)
        
        # System tools frame
        tools_frame = ttk.LabelFrame(frame, text="System Management", padding=8, style='Group.TLabelframe')
        tools_frame.grid(column=0, row=1, sticky=tk.NSEW, pady=5, padx=5)
        
        # System tools buttons
        self.create_button(tools_frame, "Enable Group Policy Editor", 
                          lambda: self.enable_group_policy_editor(), 0, 0)
        
        self.create_button(tools_frame, "System Information", 
                          lambda: self.show_system_information(), 0, 1)
        
        self.create_button(tools_frame, "Manage Services", 
                          lambda: self.manage_services(), 0, 2)
        
        self.create_button(tools_frame, "Registry Backup", 
                          lambda: self.backup_registry(), 0, 3)
        
        # Additional tools frame
        additional_tools_frame = ttk.LabelFrame(frame, text="Additional Tools", padding=8, style='Group.TLabelframe')
        additional_tools_frame.grid(column=0, row=2, sticky=tk.NSEW, pady=5, padx=5)
        
        self.create_button(additional_tools_frame, "Driver Update Check", 
                          lambda: self.check_driver_updates(), 0, 0)
        
        self.create_button(additional_tools_frame, "Network Diagnostics", 
                          lambda: self.run_network_diagnostics(), 0, 1)
        
        self.create_button(additional_tools_frame, "System Restore Point", 
                          lambda: self.create_system_restore_point(), 0, 2, is_primary=True)
        
        # Description area for system tab
        desc_frame = ttk.LabelFrame(frame, text="Description", padding=10, style='Group.TLabelframe')
        desc_frame.grid(column=1, row=1, rowspan=2, padx=10, pady=5, sticky=tk.NSEW)
        
        self.system_desc_text = tk.Text(desc_frame, wrap=tk.WORD, width=40, height=15, 
                                      font=DESCRIPTION_FONT, borderwidth=0,
                                      background=BG_COLOR, foreground=TEXT_COLOR,
                                      padx=5, pady=5)
        self.system_desc_text.pack(fill=tk.BOTH, expand=True)
        self.system_desc_text.config(state=tk.DISABLED)
        
        # Configure grid weights
        frame.columnconfigure(0, weight=2)
        frame.columnconfigure(1, weight=3)
        for i in range(1, 3):
            frame.rowconfigure(i, weight=1)
        
        # Set default description
        self.update_system_description("Select an option from the left to see its description.")
    
    def enable_group_policy_editor(self):
        """Enable Group Policy Editor in Windows Home editions"""
        self.log("Starting Group Policy Editor enabler...")
        self.update_status("Enabling Group Policy Editor...")
        
        # Check if running with admin rights
        if not is_admin():
            self.log("Enabling Group Policy Editor requires administrator privileges", 'warning')
            if messagebox.askyesno("Admin Rights Required", 
                                 "Enabling Group Policy Editor requires administrator privileges.\n\nDo you want to restart as administrator?"):
                self.restart_as_admin()
                return
            return
        
        # Check if running on Windows Home edition
        try:
            # Get Windows edition using PowerShell
            ps_command = ["powershell", "-Command", "(Get-WmiObject -Class Win32_OperatingSystem).Caption"]
            process = subprocess.Popen(ps_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                     text=True, creationflags=subprocess.CREATE_NO_WINDOW)
            stdout, stderr = process.communicate(timeout=10)
            
            is_home_edition = False
            if process.returncode == 0 and stdout.strip():
                windows_edition = stdout.strip().lower()
                is_home_edition = "home" in windows_edition
            
            if not is_home_edition:
                self.log("This feature is only needed for Windows Home editions.", 'warning')
                self.update_status("Group Policy Editor already available")
                messagebox.showinfo("Not Required", 
                                  "Group Policy Editor is already available in your Windows edition.\n\nThis feature is only needed for Windows Home editions.")
                return
        except Exception as e:
            self.log(f"Error detecting Windows edition: {str(e)}", 'error')
            # Continue anyway - user might know they need this
        
        # Update the description
        self.update_system_description(
            "Enabling Group Policy Editor... This may take a few minutes.\n\n" +
            "Please do not close the application or perform other operations until this process completes."
        )
        self.root.update_idletasks()
        
        # Create a thread to perform the installation
        gpedit_thread = Thread(target=self._install_group_policy_editor)
        gpedit_thread.daemon = True
        gpedit_thread.start()

    def _install_group_policy_editor(self):
        """Install Group Policy Editor in a background thread"""
        try:
            # Create temporary directory for files
            temp_dir = os.path.join(tempfile.gettempdir(), "gpedit_enabler")
            if not os.path.exists(temp_dir):
                os.makedirs(temp_dir)
            
            self.root.after(0, lambda: self.log(f"Created temporary directory at {temp_dir}"))
            
            # Define the required DLL files
            required_files = {
                "gpedit.msc": os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), "System32\\gpedit.msc"),
                "GroupPolicy.admx": os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), "PolicyDefinitions\\GroupPolicy.admx"),
                "GroupPolicy.adml": os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), "PolicyDefinitions\\en-US\\GroupPolicy.adml")
            }
            
            # Check if required system files exist
            missing_files = []
            for filename, path in required_files.items():
                if not os.path.exists(path):
                    missing_files.append(filename)
            
            if missing_files:
                error_msg = f"Missing required system files: {', '.join(missing_files)}"
                self.root.after(0, lambda: self.log(error_msg, 'error'))
                self.root.after(0, lambda: self.update_status("Installation failed"))
                self.root.after(0, lambda: messagebox.showerror("Error", error_msg))
                return
            
            # Download required files 
            # NOTE: In a real implementation, we would download the necessary files from a trusted source
            # or include them with the application. For this example, we'll simulate the download.
            self.root.after(0, lambda: self.log("Preparing installation files..."))
            
            # Create installation script
            script_path = os.path.join(temp_dir, "install_gpedit.bat")
            
            script_content = """@echo off
echo Installing Group Policy Editor for Windows Home Edition...

:: Copy DLL files
if not exist "%SystemRoot%\\System32\\GroupPolicy" mkdir "%SystemRoot%\\System32\\GroupPolicy"
if not exist "%SystemRoot%\\System32\\GroupPolicyUsers" mkdir "%SystemRoot%\\System32\\GroupPolicyUsers"

:: Copy DLL files
copy /y "%SystemRoot%\\System32\\gpedit.msc" "%SystemRoot%\\System32\\gpedit.msc.backup" >nul 2>&1
reg add "HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore" /v "DisableSR" /t REG_DWORD /d 1 /f >nul 2>&1
:: Registration of required DLL files
regsvr32 /s "%SystemRoot%\\System32\\GroupPolicyUsers.dll" >nul 2>&1
regsvr32 /s "%SystemRoot%\\System32\\GroupPolicy.dll" >nul 2>&1
regsvr32 /s "%SystemRoot%\\System32\\appmgmts.dll" >nul 2>&1
regsvr32 /s "%SystemRoot%\\System32\\gpprefcl.dll" >nul 2>&1

:: Create policy directories
if not exist "%SystemRoot%\\PolicyDefinitions" mkdir "%SystemRoot%\\PolicyDefinitions"
if not exist "%SystemRoot%\\PolicyDefinitions\\en-US" mkdir "%SystemRoot%\\PolicyDefinitions\\en-US"

:: Set registry values
reg add "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\EnableGroupPolicyRegistration" /v "EnableGroupPolicy" /t REG_DWORD /d 1 /f >nul 2>&1

:: Re-enable System Restore
reg add "HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore" /v "DisableSR" /t REG_DWORD /d 0 /f >nul 2>&1

echo Group Policy Editor installation completed.
echo Please restart your computer for changes to take effect.
pause
"""
            
            with open(script_path, 'w') as f:
                f.write(script_content)
            
            self.root.after(0, lambda: self.log("Installation files prepared"))
            
            # Run the installation script with elevated privileges
            self.root.after(0, lambda: self.log("Running installation script..."))
            
            process = subprocess.Popen(
                ["powershell", "-Command", f"Start-Process '{script_path}' -Verb RunAs -Wait"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            stdout, stderr = process.communicate(timeout=120)  # Allow up to 2 minutes
            
            if process.returncode == 0:
                self.root.after(0, lambda: self._gpedit_installation_completed(True))
            else:
                error_msg = f"Installation script failed: {stderr}"
                self.root.after(0, lambda: self.log(error_msg, 'error'))
                self.root.after(0, lambda: self._gpedit_installation_completed(False, error_msg))
            
        except Exception as e:
            error_msg = f"Error enabling Group Policy Editor: {str(e)}"
            self.root.after(0, lambda: self.log(error_msg, 'error'))
            self.root.after(0, lambda: self._gpedit_installation_completed(False, error_msg))

    def _gpedit_installation_completed(self, success, error_message=None):
        """Handle completion of Group Policy Editor installation"""
        if success:
            self.log("Group Policy Editor enabler completed successfully", 'success')
            self.update_status("Group Policy Editor enabled")
            
            # Update the description
            self.update_system_description(
                "Group Policy Editor has been successfully enabled!\n\n" +
                "You need to restart your computer for the changes to take effect.\n\n" +
                "After restarting, you can access the Group Policy Editor by:\n" +
                "1. Press Win+R to open the Run dialog\n" +
                "2. Type 'gpedit.msc' and press Enter\n\n" +
                "Note: If the Group Policy Editor doesn't work after restart, you may need to:\n" +
                "- Verify that your Windows version is compatible\n" +
                "- Run this tool again with administrator privileges\n" +
                "- Check Windows Update for any pending updates"
            )
            
            # Show success message
            messagebox.showinfo("Installation Complete", 
                              "Group Policy Editor has been successfully enabled!\n\n" +
                              "Please restart your computer for the changes to take effect.")
        else:
            self.log(f"Group Policy Editor enabler failed: {error_message}", 'error')
            self.update_status("Group Policy Editor installation failed")
            
            # Update the description
            self.update_system_description(
                "Failed to enable Group Policy Editor.\n\n" +
                f"Error: {error_message}\n\n" +
                "Possible solutions:\n" +
                "1. Make sure you're running the application as administrator\n" +
                "2. Verify that your Windows version is compatible\n" +
                "3. Try disabling your antivirus temporarily during installation\n" +
                "4. Make sure Windows is up to date"
            )
            
            # Show error message
            messagebox.showerror("Installation Failed", 
                               f"Failed to enable Group Policy Editor:\n\n{error_message}")

    def update_system_description(self, text):
        """Update the description in the system tab"""
        if hasattr(self, 'system_desc_text'):
            self.system_desc_text.config(state=tk.NORMAL)
            self.system_desc_text.delete(1.0, tk.END)
            self.system_desc_text.insert(tk.END, text)
            self.system_desc_text.config(state=tk.DISABLED)
    
    def init_update_tab(self):
        """Initialize the Windows Update tab with controls"""
        frame = ttk.Frame(self.update_tab, style='Tab.TFrame', padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title with icon
        title_frame = ttk.Frame(frame, style='Tab.TFrame')
        title_frame.grid(column=0, row=0, columnspan=2, sticky=tk.W, pady=(0, 10))
        
        ttk.Label(
            title_frame, 
            text="Windows Update Controls", 
            font=HEADING_FONT,
            foreground=PRIMARY_COLOR
        ).pack(side=tk.LEFT)
        
        # Windows Update Controls frame
        update_frame = ttk.LabelFrame(frame, text="Update Settings", padding=8, style='Group.TLabelframe')
        update_frame.grid(column=0, row=1, sticky=tk.NSEW, pady=5, padx=5)
        
        # Windows Update controls buttons
        self.create_button(update_frame, "Check for Updates", 
                          lambda: self.check_for_updates(), 0, 0)
        
        self.create_button(update_frame, "View Update History", 
                          lambda: self.view_update_history(), 0, 1)
        
        self.create_button(update_frame, "Open Windows Update", 
                          lambda: self.open_windows_update(), 0, 2)
        
        # Update Status frame
        status_frame = ttk.LabelFrame(frame, text="Update Status", padding=8, style='Group.TLabelframe')
        status_frame.grid(column=0, row=2, sticky=tk.NSEW, pady=5, padx=5)
        
        # Status display
        self.update_status_label = ttk.Label(status_frame, text="Current Status: Unknown")
        self.update_status_label.grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        
        # Refresh status button
        self.create_button(status_frame, "Refresh Status", 
                          lambda: self.refresh_update_status(), 0, 1)
        
        # Update Configuration frame
        config_frame = ttk.LabelFrame(frame, text="Update Configuration", padding=8, style='Group.TLabelframe')
        config_frame.grid(column=1, row=1, rowspan=2, sticky=tk.NSEW, pady=5, padx=5)
        
        # Update configuration radio buttons
        self.update_config_var = tk.StringVar(value="default")
        
        ttk.Radiobutton(
            config_frame, 
            text="Default (Microsoft Managed)",
            variable=self.update_config_var,
            value="default"
        ).grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        
        ttk.Radiobutton(
            config_frame, 
            text="Notify Only (Don't Download or Install)",
            variable=self.update_config_var,
            value="notify"
        ).grid(column=0, row=1, sticky=tk.W, padx=5, pady=5)
        
        ttk.Radiobutton(
            config_frame, 
            text="Download Only (Don't Install)",
            variable=self.update_config_var,
            value="download"
        ).grid(column=0, row=2, sticky=tk.W, padx=5, pady=5)
        
        ttk.Radiobutton(
            config_frame, 
            text="Completely Disable Windows Update",
            variable=self.update_config_var,
            value="disable"
        ).grid(column=0, row=3, sticky=tk.W, padx=5, pady=5)
        
        # Apply button
        self.create_button(config_frame, "Apply Configuration", 
                          lambda: self.apply_update_configuration(), 0, 4, 
                          is_primary=True)
        
        # Advanced Options frame
        advanced_frame = ttk.LabelFrame(frame, text="Advanced Options", padding=8, style='Group.TLabelframe')
        advanced_frame.grid(column=0, row=3, columnspan=2, sticky=tk.NSEW, pady=5, padx=5)
        
        # Advanced options buttons
        self.create_button(advanced_frame, "Pause Updates for 7 Days", 
                          lambda: self.pause_updates(7), 0, 0)
        
        self.create_button(advanced_frame, "Disable Feature Updates Only", 
                          lambda: self.disable_feature_updates(), 0, 1)
        
        self.create_button(advanced_frame, "Clear Update Cache", 
                          lambda: self.clear_update_cache(), 0, 2)
        
        self.create_button(advanced_frame, "Reset Windows Update", 
                          lambda: self.reset_windows_update(), 0, 3, 
                          is_secondary=True)
        
        # Configure grid weights
        frame.columnconfigure(0, weight=1)
        frame.columnconfigure(1, weight=1)
        for i in range(1, 4):
            frame.rowconfigure(i, weight=1)
        
        # Get initial update status
        self.root.after(1000, self.refresh_update_status)
    
    def check_for_updates(self):
        """Manually check for Windows updates"""
        self.log("Checking for Windows updates...")
        self.update_status("Checking for Windows updates...")
        
        try:
            subprocess.Popen("ms-settings:windowsupdate-action", shell=True)
            self.log("Windows Update check initiated", "success")
        except Exception as e:
            self.log(f"Error checking for updates: {str(e)}", "error")
            self.update_status("Error checking for updates")
    
    def view_update_history(self):
        """View Windows Update history"""
        self.log("Opening Windows Update history...")
        self.update_status("Opening Windows Update history...")
        
        try:
            subprocess.Popen("ms-settings:windowsupdate-history", shell=True)
            self.log("Windows Update history opened", "success")
        except Exception as e:
            self.log(f"Error opening update history: {str(e)}", "error")
            self.update_status("Error opening update history")
    
    def open_windows_update(self):
        """Open Windows Update settings"""
        self.log("Opening Windows Update settings...")
        self.update_status("Opening Windows Update settings...")
        
        try:
            subprocess.Popen("ms-settings:windowsupdate", shell=True)
            self.log("Windows Update settings opened", "success")
        except Exception as e:
            self.log(f"Error opening Windows Update: {str(e)}", "error")
            self.update_status("Error opening Windows Update")
    
    def refresh_update_status(self):
        """Refresh Windows Update status"""
        self.log("Refreshing Windows Update status...")
        
        try:
            # Use PowerShell to get update service status
            ps_command = [
                "powershell", 
                "-Command", 
                "(Get-Service -Name wuauserv).Status"
            ]
            
            process = subprocess.Popen(
                ps_command, 
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=10)
            
            if process.returncode == 0 and stdout.strip():
                service_status = stdout.strip()
                
                # Now check update settings using registry
                ps_registry_command = [
                    "powershell",
                    "-Command",
                    "Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU' -Name 'NoAutoUpdate' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty NoAutoUpdate"
                ]
                
                registry_process = subprocess.Popen(
                    ps_registry_command,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                
                reg_stdout, reg_stderr = registry_process.communicate(timeout=10)
                
                # Determine update policy based on registry value
                if registry_process.returncode == 0 and reg_stdout.strip():
                    try:
                        no_auto_update = int(reg_stdout.strip())
                        if no_auto_update == 1:
                            policy_status = "Disabled"
                            self.update_config_var.set("disable")
                        else:
                            # Check for AUOptions value
                            ps_au_command = [
                                "powershell",
                                "-Command",
                                "Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU' -Name 'AUOptions' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty AUOptions"
                            ]
                            
                            au_process = subprocess.Popen(
                                ps_au_command,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                text=True,
                                creationflags=subprocess.CREATE_NO_WINDOW
                            )
                            
                            au_stdout, au_stderr = au_process.communicate(timeout=10)
                            
                            if au_process.returncode == 0 and au_stdout.strip():
                                try:
                                    au_option = int(au_stdout.strip())
                                    if au_option == 2:
                                        policy_status = "Notify Only"
                                        self.update_config_var.set("notify")
                                    elif au_option == 3:
                                        policy_status = "Download Only"
                                        self.update_config_var.set("download")
                                    else:
                                        policy_status = "Microsoft Managed"
                                        self.update_config_var.set("default")
                                except ValueError:
                                    policy_status = "Microsoft Managed (Default)"
                                    self.update_config_var.set("default")
                            else:
                                policy_status = "Microsoft Managed (Default)"
                                self.update_config_var.set("default")
                    except ValueError:
                        policy_status = "Unknown"
                        self.update_config_var.set("default")
                else:
                    policy_status = "Microsoft Managed (Default)"
                    self.update_config_var.set("default")
                
                # Update the status label
                status_text = f"Service Status: {service_status}, Policy: {policy_status}"
                self.update_status_label.config(text=status_text)
                self.log(f"Windows Update status: {status_text}", "info")
            else:
                self.update_status_label.config(text="Could not determine update status")
                self.log("Failed to get Windows Update status", "warning")
        
        except Exception as e:
            self.update_status_label.config(text="Error checking update status")
            self.log(f"Error refreshing update status: {str(e)}", "error")
    
    def apply_update_configuration(self):
        """Apply the selected Windows Update configuration"""
        selected_config = self.update_config_var.get()
        self.log(f"Applying Windows Update configuration: {selected_config}")
        
        # Check for admin rights
        if not self.check_admin_rights("Changing Windows Update settings"):
            return
        
        # Define registry paths
        au_path = r"SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
        wu_path = r"SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"
        
        try:
            # Ensure the registry keys exist
            ps_create_keys = [
                "powershell",
                "-Command",
                f"New-Item -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows' -Name 'WindowsUpdate' -Force; New-Item -Path 'HKLM:\\{wu_path}' -Name 'AU' -Force"
            ]
            
            subprocess.run(
                ps_create_keys,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW,
                check=True
            )
            
            if selected_config == "disable":
                # Completely disable Windows Update
                ps_commands = [
                    f"Set-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'NoAutoUpdate' -Value 1 -Type DWord -Force",
                    # Stop and disable the Windows Update service
                    "Stop-Service -Name wuauserv -Force; Set-Service -Name wuauserv -StartupType Disabled"
                ]
                status_msg = "Windows Update has been completely disabled"
            
            elif selected_config == "notify":
                # Set to notify only (don't download or install)
                ps_commands = [
                    f"Set-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'NoAutoUpdate' -Value 0 -Type DWord -Force",
                    f"Set-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'AUOptions' -Value 2 -Type DWord -Force",
                    # Ensure the service is running
                    "Set-Service -Name wuauserv -StartupType Manual; Start-Service -Name wuauserv"
                ]
                status_msg = "Windows Update set to notify only mode"
            
            elif selected_config == "download":
                # Set to download only (don't install)
                ps_commands = [
                    f"Set-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'NoAutoUpdate' -Value 0 -Type DWord -Force",
                    f"Set-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'AUOptions' -Value 3 -Type DWord -Force",
                    # Ensure the service is running
                    "Set-Service -Name wuauserv -StartupType Automatic; Start-Service -Name wuauserv"
                ]
                status_msg = "Windows Update set to download only mode"
            
            else:  # default
                # Remove custom settings and restore defaults
                ps_commands = [
                    f"Remove-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'NoAutoUpdate' -Force -ErrorAction SilentlyContinue",
                    f"Remove-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'AUOptions' -Force -ErrorAction SilentlyContinue",
                    # Ensure the service is running with automatic startup
                    "Set-Service -Name wuauserv -StartupType Automatic; Start-Service -Name wuauserv"
                ]
                status_msg = "Windows Update restored to default settings"
            
            # Execute the commands
            for cmd in ps_commands:
                ps_full_cmd = ["powershell", "-Command", cmd]
                subprocess.run(
                    ps_full_cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW,
                    check=True
                )
            
            # Refresh status after applying changes
            self.refresh_update_status()
            
            self.log(status_msg, "success")
            self.update_status(status_msg)
            messagebox.showinfo("Success", status_msg)
            
        except Exception as e:
            error_msg = f"Error applying update configuration: {str(e)}"
            self.log(error_msg, "error")
            self.update_status("Error applying update configuration")
            messagebox.showerror("Error", error_msg)
    
    def pause_updates(self, days=7):
        """Pause Windows updates for the specified number of days"""
        self.log(f"Pausing Windows updates for {days} days...")
        
        # Check for admin rights
        if not self.check_admin_rights("Pausing Windows Updates"):
            return
        
        try:
            # Use PowerShell to pause updates
            ps_command = [
                "powershell",
                "-Command",
                f"New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\WindowsUpdate\\UX\\Settings' -Name 'PauseUpdatesExpiryTime' -Value ((Get-Date).AddDays({days}).ToString('yyyy-MM-dd')) -PropertyType String -Force"
            ]
            
            subprocess.run(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW,
                check=True
            )
            
            self.log(f"Windows updates paused for {days} days", "success")
            self.update_status(f"Windows updates paused for {days} days")
            messagebox.showinfo("Success", f"Windows updates have been paused for {days} days.")
            
            # Refresh the status
            self.refresh_update_status()
            
        except Exception as e:
            error_msg = f"Error pausing updates: {str(e)}"
            self.log(error_msg, "error")
            self.update_status("Error pausing updates")
            messagebox.showerror("Error", error_msg)
    
    def disable_feature_updates(self):
        """Disable feature updates while allowing security updates"""
        self.log("Disabling Windows feature updates...")
        
        # Check for admin rights
        if not self.check_admin_rights("Modifying Windows Update settings"):
            return
        
        try:
            # Set registry keys to disable feature updates
            ps_commands = [
                # Create the TargetReleaseVersion key
                "New-Item -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Force",
                # Set the policies to defer feature updates
                "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Name 'DisableOSUpgrade' -Value 1 -Type DWord -Force",
                "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Name 'TargetReleaseVersion' -Value 1 -Type DWord -Force"
            ]
            
            for cmd in ps_commands:
                ps_full_cmd = ["powershell", "-Command", cmd]
                subprocess.run(
                    ps_full_cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW,
                    check=True
                )
            
            self.log("Windows feature updates disabled successfully", "success")
            self.update_status("Feature updates disabled")
            messagebox.showinfo("Success", "Windows feature updates have been disabled. Security updates will still be installed.")
            
            # Refresh the status
            self.refresh_update_status()
            
        except Exception as e:
            error_msg = f"Error disabling feature updates: {str(e)}"
            self.log(error_msg, "error")
            self.update_status("Error disabling feature updates")
            messagebox.showerror("Error", error_msg)
    
    def clear_update_cache(self):
        """Clear Windows Update cache files"""
        self.log("Clearing Windows Update cache...")
        
        # Check for admin rights
        if not self.check_admin_rights("Clearing Windows Update cache"):
            return
        
        # Create a thread to clear the cache
        clear_thread = Thread(target=self._clear_update_cache_thread)
        clear_thread.daemon = True
        clear_thread.start()
    
    def _clear_update_cache_thread(self):
        """Thread to clear Windows Update cache"""
        try:
            self.root.after(0, lambda: self.update_status("Stopping Windows Update service..."))
            
            # Command list to execute
            commands = [
                # Stop Windows Update service
                ["net", "stop", "wuauserv"],
                ["net", "stop", "bits"],
                ["net", "stop", "cryptsvc"],
                
                # Rename SoftwareDistribution folder
                ["cmd", "/c", "ren %systemroot%\\SoftwareDistribution SoftwareDistribution.old"],
                ["cmd", "/c", "ren %systemroot%\\System32\\catroot2 catroot2.old"],
                
                # Start services again
                ["net", "start", "wuauserv"],
                ["net", "start", "bits"],
                ["net", "start", "cryptsvc"]
            ]
            
            for cmd in commands:
                self.root.after(0, lambda c=cmd: self.log(f"Executing: {' '.join(c)}"))
                process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                stdout, stderr = process.communicate()
                
                if stderr and process.returncode != 0:
                    self.root.after(0, lambda s=stderr: self.log(f"Command error: {s}", "warning"))
            
            self.root.after(0, lambda: self.log("Windows Update cache cleared successfully", "success"))
            self.root.after(0, lambda: self.update_status("Update cache cleared"))
            self.root.after(0, lambda: messagebox.showinfo("Cache Cleared", 
                                                        "Windows Update cache has been cleared successfully.\n\n"
                                                        "You may need to restart your computer for the changes to take effect."))
            
            # Refresh the status
            self.root.after(1000, self.refresh_update_status)
            
        except Exception as e:
            error_msg = f"Error clearing update cache: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error clearing update cache"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))
    
    def reset_windows_update(self):
        """Reset Windows Update components"""
        self.log("Preparing to reset Windows Update components...")
        
        # Check for admin rights
        if not self.check_admin_rights("Resetting Windows Update"):
            return
        
        # Ask for confirmation as this is a significant operation
        if not messagebox.askyesno("Confirm Reset", 
                                 "This will reset all Windows Update components to their default state.\n\n"
                                 "This is a significant operation and should only be used when Windows Update "
                                 "is experiencing serious problems.\n\n"
                                 "Do you want to continue?"):
            self.log("Windows Update reset cancelled by user", "info")
            return
        
        # Create a thread to reset Windows Update
        reset_thread = Thread(target=self._reset_windows_update_thread)
        reset_thread.daemon = True
        reset_thread.start()
    
    def _reset_windows_update_thread(self):
        """Thread to reset Windows Update components"""
        try:
            self.root.after(0, lambda: self.update_status("Resetting Windows Update components..."))
            
            # Create a temporary batch file with the reset commands
            temp_dir = tempfile.gettempdir()
            batch_file = os.path.join(temp_dir, "reset_windows_update.bat")
            
            reset_script = """@echo off
echo Resetting Windows Update components...
echo.

echo Stopping services...
net stop wuauserv
net stop cryptSvc
net stop bits
net stop msiserver
echo.

echo Removing Windows Update data...
rd /s /q %systemroot%\\SoftwareDistribution
rd /s /q %systemroot%\\System32\\catroot2
echo.

echo Resetting Windows Update components...
netsh winsock reset
netsh winhttp reset proxy
echo.

echo Registering DLLs...
regsvr32 /s atl.dll
regsvr32 /s urlmon.dll
regsvr32 /s mshtml.dll
regsvr32 /s shdocvw.dll
regsvr32 /s browseui.dll
regsvr32 /s jscript.dll
regsvr32 /s vbscript.dll
regsvr32 /s scrrun.dll
regsvr32 /s msxml.dll
regsvr32 /s msxml3.dll
regsvr32 /s msxml6.dll
regsvr32 /s actxprxy.dll
regsvr32 /s softpub.dll
regsvr32 /s wintrust.dll
regsvr32 /s dssenh.dll
regsvr32 /s rsaenh.dll
regsvr32 /s gpkcsp.dll
regsvr32 /s sccbase.dll
regsvr32 /s slbcsp.dll
regsvr32 /s cryptdlg.dll
regsvr32 /s oleaut32.dll
regsvr32 /s ole32.dll
regsvr32 /s shell32.dll
regsvr32 /s initpki.dll
regsvr32 /s wuapi.dll
regsvr32 /s wuaueng.dll
regsvr32 /s wuaueng1.dll
regsvr32 /s wucltui.dll
regsvr32 /s wups.dll
regsvr32 /s wups2.dll
regsvr32 /s wuweb.dll
regsvr32 /s qmgr.dll
regsvr32 /s qmgrprxy.dll
regsvr32 /s wucltux.dll
regsvr32 /s muweb.dll
regsvr32 /s wuwebv.dll
echo.

echo Starting services...
net start wuauserv
net start cryptSvc
net start bits
net start msiserver
echo.

echo Reset completed. Please restart your computer.
echo.
"""
            
            with open(batch_file, 'w') as f:
                f.write(reset_script)
            
            # Execute the batch file with admin privileges
            self.root.after(0, lambda: self.log("Executing Windows Update reset script..."))
            
            process = subprocess.Popen(
                ["powershell", "-Command", f"Start-Process '{batch_file}' -Verb RunAs -Wait"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=300)  # Allow up to 5 minutes
            
            if process.returncode == 0:
                self.root.after(0, lambda: self.log("Windows Update components reset successfully", "success"))
                self.root.after(0, lambda: self.update_status("Windows Update reset completed"))
                self.root.after(0, lambda: messagebox.showinfo("Reset Complete", 
                                                            "Windows Update components have been reset successfully.\n\n"
                                                            "Please restart your computer for the changes to take effect."))
            else:
                self.root.after(0, lambda: self.log(f"Error during reset: {stderr}", "error"))
                self.root.after(0, lambda: self.update_status("Error resetting Windows Update"))
                self.root.after(0, lambda: messagebox.showerror("Error", 
                                                             f"Error resetting Windows Update components:\n\n{stderr}"))
            
            # Try to delete the temporary batch file
            try:
                os.remove(batch_file)
            except:
                pass
            
            # Refresh the status
            self.root.after(1000, self.refresh_update_status)
            
        except Exception as e:
            error_msg = f"Error resetting Windows Update: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error resetting Windows Update"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))
    
    def init_storage_tab(self):
        """Initialize the Storage tab with disk space analysis features"""
        frame = ttk.Frame(self.storage_tab, style='Tab.TFrame', padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title with icon
        title_frame = ttk.Frame(frame, style='Tab.TFrame')
        title_frame.grid(column=0, row=0, columnspan=3, sticky=tk.W, pady=(0, 10))
        
        ttk.Label(
            title_frame, 
            text="Storage Management", 
            font=HEADING_FONT,
            foreground=PRIMARY_COLOR
        ).pack(side=tk.LEFT)
        
        # Drive selection frame
        drive_frame = ttk.LabelFrame(frame, text="Drives", padding=8, style='Group.TLabelframe')
        drive_frame.grid(column=0, row=1, sticky=tk.NSEW, pady=5, padx=5)
        
        # Drive selection
        ttk.Label(drive_frame, text="Select Drive:").grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        
        # Get available drives
        self.drives_var = tk.StringVar()
        self.drives_listbox = tk.Listbox(drive_frame, height=5, exportselection=False)
        self.drives_listbox.grid(column=0, row=1, sticky=tk.NSEW, padx=5, pady=5)
        self.drives_listbox.bind('<<ListboxSelect>>', self.on_drive_select)
        
        # Scrollbar for drives listbox
        drives_scrollbar = ttk.Scrollbar(drive_frame, orient="vertical", command=self.drives_listbox.yview)
        drives_scrollbar.grid(column=1, row=1, sticky=tk.NS, pady=5)
        self.drives_listbox.config(yscrollcommand=drives_scrollbar.set)
        
        # Drive information
        self.drive_info_var = tk.StringVar(value="No drive selected")
        ttk.Label(drive_frame, textvariable=self.drive_info_var).grid(column=0, row=2, columnspan=2, sticky=tk.W, padx=5, pady=5)
        
        # Refresh drives button
        self.create_button(drive_frame, "Refresh Drives", 
                          lambda: self.refresh_drives(), 0, 3, columnspan=2)
        
        # Storage tools frame
        tools_frame = ttk.LabelFrame(frame, text="Storage Tools", padding=8, style='Group.TLabelframe')
        tools_frame.grid(column=0, row=2, sticky=tk.NSEW, pady=5, padx=5)
        
        # Storage tools buttons
        self.create_button(tools_frame, "Disk Cleanup", 
                          lambda: self.run_disk_cleanup(), 0, 0)
        
        self.create_button(tools_frame, "Disk Defragment", 
                          lambda: self.defragment_disk(), 0, 1)
        
        self.create_button(tools_frame, "Check Disk", 
                          lambda: self.check_disk(), 0, 2)
        
        # Folder analysis frame
        analysis_frame = ttk.LabelFrame(frame, text="Folder Analysis", padding=8, style='Group.TLabelframe')
        analysis_frame.grid(column=1, row=1, rowspan=2, sticky=tk.NSEW, padx=5, pady=5)
        
        # Folder selection
        ttk.Label(analysis_frame, text="Select Folder to Analyze:").grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        
        self.folder_path_var = tk.StringVar()
        folder_entry = ttk.Entry(analysis_frame, textvariable=self.folder_path_var, width=40)
        folder_entry.grid(column=0, row=1, sticky=tk.EW, padx=5, pady=5)
        
        self.create_button(analysis_frame, "Browse...", 
                          lambda: self.select_folder_to_analyze(), 1, 1)
        
        self.create_button(analysis_frame, "Analyze Folder", 
                          lambda: self.analyze_folder(), 0, 2, columnspan=2, is_primary=True)
        
        # Add a separator
        ttk.Separator(analysis_frame, orient='horizontal').grid(column=0, row=3, columnspan=2, sticky=tk.EW, pady=10)
        
        # Results area
        ttk.Label(analysis_frame, text="Analysis Results:").grid(column=0, row=4, sticky=tk.W, padx=5, pady=5)
        
        # Results treeview
        self.folder_results_tree = ttk.Treeview(analysis_frame, columns=("size", "percent"), show="tree headings")
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog, simpledialog
import subprocess
import os
import sys
import tempfile
import ctypes
import shutil
from threading import Thread
import threading
import re
import psutil
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import platform
import glob
import winreg
from datetime import datetime
import time
import csv
import socket
import functools
import traceback
import concurrent.futures
import fnmatch

try:
    import winshell
except ImportError:
    pass  # Handle later in the code

# Set better UI fonts and colors
HEADING_FONT = ('Segoe UI', 12, 'bold')
NORMAL_FONT = ('Segoe UI', 10)
BUTTON_FONT = ('Segoe UI', 9)
DESCRIPTION_FONT = ('Segoe UI', 9)
LOG_FONT = ('Consolas', 9)

# Color scheme
BG_COLOR = "#f5f5f5"
PRIMARY_COLOR = "#3498db"
SECONDARY_COLOR = "#e74c3c"
ACCENT_COLOR = "#2ecc71"
TEXT_COLOR = "#333333"
WARNING_BG = "#fff3cd"
WARNING_FG = "#856404"
ERROR_BG = "#f8d7da"
ERROR_FG = "#721c24"
SUCCESS_BG = "#d4edda"
SUCCESS_FG = "#155724"
LOG_BG = "#f8f9fa"

# Thread safety lock for UI updates
ui_lock = threading.Lock()

# Global exception handler to prevent application crashes
def global_exception_handler(exc_type, exc_value, exc_traceback):
    """Global exception handler to prevent crashes"""
    # Format the exception
    error_msg = ''.join(traceback.format_exception(exc_type, exc_value, exc_traceback))
    # Log to console
    print(f"Unhandled exception: {error_msg}")
    # Show error message in dialog if possible
    try:
        messagebox.showerror("Unhandled Error", 
                            f"An unexpected error occurred:\n\n{str(exc_value)}\n\nSee console for details.")
    except:
        # If messagebox fails, just print to console
        print("Could not show error dialog")
    # Return True to prevent the default tkinter error dialog
    return True

# Install the exception handler
sys.excepthook = global_exception_handler

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def run_as_admin():
    # Get the script path
    script_path = os.path.abspath(sys.argv[0])
    
    # Only run if we have a valid path (not running from IDLE, etc.)
    if os.path.exists(script_path):
        try:
            # Use ShellExecuteW to run the script as admin
            ctypes.windll.shell32.ShellExecuteW(
                None, 
                "runas", 
                sys.executable, 
                f'"{script_path}"', 
                None, 
                1
            )
        except Exception as e:
            print(f"Error running as admin: {e}")
            # If there's an error, don't exit - just log it and continue without admin
            return False
    else:
        print("Could not determine script path")
        return False
    return True

def is_windows_10_or_11():
    """Check if the current system is running Windows 10 or 11"""
    try:
        # Get Windows version
        win_ver = platform.win32_ver()
        win_version = win_ver[0]  # Major version
        win_build = win_ver[1]    # Build number
        
        # Windows 10 build numbers start from 10240 (RTM)
        # Windows 11 build numbers start from 22000
        if win_version == '10':
            build_num = int(win_build.split('.')[0])
            return build_num >= 10240
        else:
            # Try to determine based on registry
            try:
                reg_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 
                                        r"SOFTWARE\Microsoft\Windows NT\CurrentVersion")
                build_num = int(winreg.QueryValueEx(reg_key, "CurrentBuildNumber")[0])
                winreg.CloseKey(reg_key)
                
                # Windows 11 builds are 22000+
                return build_num >= 10240
            except:
                # If we can't determine, we'll assume it's not compatible
                return False
    except:
        return False

def handle_exception(func):
    """Decorator for handling exceptions in methods"""
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        try:
            return func(self, *args, **kwargs)
        except Exception as e:
            # Log the exception
            self.log(f"Error in {func.__name__}: {str(e)}", 'error')
            # Log the traceback for debugging
            import traceback
            self.log(f"Traceback: {traceback.format_exc()}", 'error')
            # Show error message to user
            self.update_status(f"Error in {func.__name__}")
            messagebox.showerror("Error", f"An unexpected error occurred in {func.__name__}:\n\n{str(e)}")
            return None
    return wrapper

def thread_safe(func):
    """Decorator for ensuring thread-safe UI updates"""
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        with ui_lock:
            return func(self, *args, **kwargs)
    return wrapper

class SystemUtilities:
    def __init__(self, root):
        self.root = root
        self.root.title("Windows System Utilities")
        
        # Make window open in fullscreen by default
        self.root.state('zoomed')  # For Windows, this maximizes the window
        
        # Get screen dimensions for responsive design
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # Set minimum size for the window
        self.root.minsize(900, 600)
        
        # Set the application icon
        try:
            self.root.iconbitmap("system_icon.ico")
        except:
            # Icon file not found, continue without it
            pass
        
        # Configure the style for better appearance
        self.style = ttk.Style()
        # Apply clam theme if available
        if 'clam' in self.style.theme_names():
            self.style.theme_use('clam')
            
        self.style.configure('TFrame', background=BG_COLOR)
        self.style.configure('Tab.TFrame', background=BG_COLOR)
        self.style.configure('TLabel', background=BG_COLOR, foreground=TEXT_COLOR, font=NORMAL_FONT)
        self.style.configure('Header.TLabel', font=HEADING_FONT, foreground=PRIMARY_COLOR)
        self.style.configure('TButton', font=BUTTON_FONT)
        self.style.configure('Primary.TButton', background=PRIMARY_COLOR)
        self.style.configure('Secondary.TButton', background=SECONDARY_COLOR)
        self.style.configure('Accent.TButton', background=ACCENT_COLOR)
        self.style.configure('TLabelframe', background=BG_COLOR)
        self.style.configure('Group.TLabelframe', background=BG_COLOR)
        self.style.configure('Group.TLabelframe.Label', background=BG_COLOR, foreground=TEXT_COLOR, font=NORMAL_FONT)
        
        # Set up the main frame with split-pane layout
        main_frame = ttk.Frame(root, style='TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create PanedWindow for split layout
        self.paned = ttk.PanedWindow(main_frame, orient=tk.HORIZONTAL)
        self.paned.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Left side - Tool tabs
        self.left_frame = ttk.Frame(self.paned, style='TFrame')
        
        # Right side - Logs and status
        self.right_frame = ttk.Frame(self.paned, style='TFrame')
        
        # Add the frames to the paned window
        self.paned.add(self.left_frame, weight=3)
        self.paned.add(self.right_frame, weight=1)
        
        # Create tabs on the left side
        self.tabs = ttk.Notebook(self.left_frame)
        self.tabs.pack(fill=tk.BOTH, expand=True)
        
        # Create the tabs
        self.cleanup_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.system_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.update_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.storage_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.network_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.hyperv_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        self.optimize_tab = ttk.Frame(self.tabs, style='Tab.TFrame')
        
        # Add tabs to the notebook
        self.tabs.add(self.cleanup_tab, text="Cleanup")
        self.tabs.add(self.system_tab, text="System Tools")
        self.tabs.add(self.update_tab, text="Windows Update")
        self.tabs.add(self.storage_tab, text="Storage")
        self.tabs.add(self.network_tab, text="Network")
        self.tabs.add(self.hyperv_tab, text="Hyper-V")
        self.tabs.add(self.optimize_tab, text="Optimize")
        
        # Add tab change event to update logs
        self.tabs.bind("<<NotebookTabChanged>>", self.on_tab_changed)
        
        # Set up the log area on the right side
        self.create_log_area()
        
        # Initialize tab contents
        self.init_cleanup_tab()
        self.init_system_tab()
        self.init_update_tab()
        self.init_storage_tab()
        self.init_network_tab()
        self.init_hyperv_tab()
        self.init_optimize_tab()
        
        # Add status bar at the bottom
        self.status_bar = ttk.Label(root, text="Ready", relief=tk.SUNKEN, anchor=tk.W, font=NORMAL_FONT)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Initialize the thread pool for background tasks
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=5)
        
        # Active background processes tracking
        self.background_processes = {}
        self.bg_process_count = 0
        
        # Show a welcome message
        self.log("System Utilities initialized successfully", "info")
        self.update_status("Ready")
        
        # Start background system monitoring for detailed logging
        self.start_background_monitoring()
        
        # Periodically collect garbage to prevent memory leaks
        def garbage_collect():
            import gc
            gc.collect()
            self.root.after(300000, garbage_collect)  # Every 5 minutes
        
        # Start the garbage collection timer
        self.root.after(300000, garbage_collect)
    
    def on_tab_changed(self, event):
        """Handle tab change event to update logs with relevant information"""
        tab_id = self.tabs.select()
        tab_name = self.tabs.tab(tab_id, "text")
        
        self.log(f"Switched to {tab_name} tab", "info")
        
        # Show tab-specific system information in the log
        if tab_name == "Network":
            self.log_network_status()
        elif tab_name == "Hyper-V":
            self.log_hyperv_status()
        elif tab_name == "Optimize":
            self.log_system_performance()
        elif tab_name == "Storage":
            self.log_storage_status()

    def start_background_monitoring(self):
        """Start background monitoring for system activities"""
        self.log("Starting background system monitoring...", "info")
        
        # Start a thread for monitoring network activity
        network_thread = Thread(target=self._monitor_network)
        network_thread.daemon = True
        network_thread.start()
        
        # Monitor Hyper-V status if on Windows
        hyperv_thread = Thread(target=self._monitor_hyperv)
        hyperv_thread.daemon = True
        hyperv_thread.start()
        
        # Monitor system performance
        perf_thread = Thread(target=self._monitor_performance)
        perf_thread.daemon = True
        perf_thread.start()
        
        # Schedule log updates
        self.root.after(60000, self.update_background_logs)  # Update logs every minute

    def _monitor_network(self):
        """Background thread to monitor network activity"""
        try:
            # Get initial network stats
            net_io_start = psutil.net_io_counters()
            self.last_net_sent = net_io_start.bytes_sent
            self.last_net_recv = net_io_start.bytes_recv
            
            # Log initial network interfaces
            self.root.after(2000, self.log_network_status)
            
            while True:
                time.sleep(10)  # Check every 10 seconds
                
                # Get current network stats
                try:
                    net_io = psutil.net_io_counters()
                    # Calculate network activity
                    sent_mb = (net_io.bytes_sent - self.last_net_sent) / (1024 * 1024)
                    recv_mb = (net_io.bytes_recv - self.last_net_recv) / (1024 * 1024)
                    
                    # Update for next check
                    self.last_net_sent = net_io.bytes_sent
                    self.last_net_recv = net_io.bytes_recv
                    
                    # Log significant network activity
                    if sent_mb > 5 or recv_mb > 5:  # Log if more than 5MB transferred
                        self.root.after(0, lambda s=sent_mb, r=recv_mb: 
                                    self.log(f"Network activity: {s:.2f} MB sent, {r:.2f} MB received", "info"))
                except:
                    pass
        except Exception as e:
            # Silently handle errors in background thread
            print(f"Network monitoring error: {str(e)}")

    def _monitor_hyperv(self):
        """Background thread to monitor Hyper-V status"""
        try:
            # Only check once at startup, then wait for user to check manually
            time.sleep(5)  # Wait for app to fully initialize
            
            try:
                # Check if Hyper-V feature is installed
                ps_command = [
                    "powershell",
                    "-Command",
                    "(Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online).State"
                ]
                
                process = subprocess.Popen(
                    ps_command,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                
                stdout, stderr = process.communicate(timeout=10)
                
                if process.returncode == 0 and stdout.strip():
                    state = stdout.strip()
                    is_enabled = state == "Enabled"
                    
                    if is_enabled:
                        # If enabled, try to get VM info
                        self.root.after(0, lambda: self.log("Hyper-V is enabled on this system", "info"))
                        # Get VM list in the background
                        vm_thread = Thread(target=self._log_hyperv_vms)
                        vm_thread.daemon = True
                        vm_thread.start()
                    else:
                        self.root.after(0, lambda: self.log("Hyper-V is not enabled on this system", "info"))
            except:
                pass
        except Exception as e:
            # Silently handle errors in background thread
            print(f"Hyper-V monitoring error: {str(e)}")

    def _log_hyperv_vms(self):
        """Log information about Hyper-V VMs in background"""
        try:
            time.sleep(2)  # Add a slight delay
            
            # Get list of VMs
            ps_command = [
                "powershell",
                "-Command",
                "Get-VM | Measure-Object | Select-Object -ExpandProperty Count"
            ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=10)
            
            if process.returncode == 0 and stdout.strip():
                try:
                    vm_count = int(stdout.strip())
                    self.root.after(0, lambda: self.log(f"Found {vm_count} virtual machines", "info"))
                    
                    # Get running VMs
                    ps_running = [
                        "powershell",
                        "-Command",
                        "Get-VM | Where-Object {$_.State -eq 'Running'} | Measure-Object | Select-Object -ExpandProperty Count"
                    ]
                    
                    running_process = subprocess.Popen(
                        ps_running,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    
                    running_stdout, _ = running_process.communicate(timeout=10)
                    
                    if running_process.returncode == 0 and running_stdout.strip():
                        running_count = int(running_stdout.strip())
                        if running_count > 0:
                            self.root.after(0, lambda: self.log(f"{running_count} VMs are currently running", "info"))
                except:
                    pass
        except Exception as e:
            # Silently handle errors
            print(f"Hyper-V VM logging error: {str(e)}")

    def _monitor_performance(self):
        """Background thread to monitor system performance"""
        try:
            while True:
                time.sleep(30)  # Check every 30 seconds
                
                try:
                    # Get CPU and memory stats
                    cpu_percent = psutil.cpu_percent(interval=1)
                    memory = psutil.virtual_memory()
                    
                    # Log high resource usage
                    if cpu_percent > 80:
                        self.root.after(0, lambda: self.log(f"High CPU usage detected: {cpu_percent}%", "warning"))
                    
                    if memory.percent > 85:
                        self.root.after(0, lambda: self.log(f"High memory usage detected: {memory.percent}%", "warning"))
                except:
                    pass
        except Exception as e:
            # Silently handle errors in background thread
            print(f"Performance monitoring error: {str(e)}")

    def log_network_status(self):
        """Log network interfaces status"""
        try:
            # Get network interfaces
            net_if_thread = Thread(target=self._log_network_interfaces)
            net_if_thread.daemon = True
            net_if_thread.start()
            
            # Try to get external IP in background
            ext_ip_thread = Thread(target=self._log_external_ip)
            ext_ip_thread.daemon = True
            ext_ip_thread.start()
        except Exception as e:
            print(f"Error logging network status: {str(e)}")

    def _log_network_interfaces(self):
        """Log information about network interfaces"""
        try:
            # Get network interfaces
            interfaces = psutil.net_if_addrs()
            
            # Log active interfaces
            active_interfaces = []
            for name, addrs in interfaces.items():
                for addr in addrs:
                    if addr.family == socket.AF_INET and not addr.address.startswith('127.'):
                        active_interfaces.append(f"{name}: {addr.address}")
            
            if active_interfaces:
                self.root.after(0, lambda: self.log(f"Active network interfaces: {', '.join(active_interfaces)}", "info"))
        except Exception as e:
            print(f"Error logging network interfaces: {str(e)}")

    def _log_external_ip(self):
        """Log external IP information"""
        try:
            # There are multiple services we can try
            urls = [
                "https://api.ipify.org",
                "https://ifconfig.me/ip",
                "https://icanhazip.com"
            ]
            
            import urllib.request
            import re
            
            for url in urls:
                try:
                    response = urllib.request.urlopen(url, timeout=3)
                    data = response.read().decode('utf-8')
                    
                    # Extract IP (needed for some services that return HTML)
                    if "<body>" in data:
                        # For services that return HTML
                        ip_match = re.search(r'\d+\.\d+\.\d+\.\d+', data)
                        if ip_match:
                            external_ip = ip_match.group(0)
                            self.root.after(0, lambda: self.log(f"External IP: {external_ip}", "info"))
                            return
                    else:
                        # For services that return just the IP
                        external_ip = data.strip()
                        self.root.after(0, lambda: self.log(f"External IP: {external_ip}", "info"))
                        return
                except:
                    continue
        except Exception as e:
            print(f"Error logging external IP: {str(e)}")

    def log_hyperv_status(self):
        """Log Hyper-V status information"""
        try:
            hyperv_thread = Thread(target=self._check_hyperv_status_for_log)
            hyperv_thread.daemon = True
            hyperv_thread.start()
        except Exception as e:
            print(f"Error logging Hyper-V status: {str(e)}")

    def _check_hyperv_status_for_log(self):
        """Check Hyper-V status and log it"""
        try:
            # Check if Hyper-V feature is installed
            ps_command = [
                "powershell",
                "-Command",
                "(Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online).State"
            ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=10)
            
            if process.returncode == 0 and stdout.strip():
                state = stdout.strip()
                is_enabled = state == "Enabled"
                
                if is_enabled:
                    self.root.after(0, lambda: self.log("Hyper-V status: Enabled", "info"))
                    
                    # Check Hyper-V service status
                    service_command = [
                        "powershell",
                        "-Command",
                        "(Get-Service -Name 'vmms').Status"
                    ]
                    
                    service_process = subprocess.Popen(
                        service_command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    
                    service_stdout, _ = service_process.communicate(timeout=10)
                    
                    if service_process.returncode == 0 and service_stdout.strip():
                        service_status = service_stdout.strip()
                        self.root.after(0, lambda: self.log(f"Hyper-V service status: {service_status}", "info"))
                    
                    # Call VM logging function
                    self._log_hyperv_vms()
                else:
                    self.root.after(0, lambda: self.log("Hyper-V status: Not enabled", "info"))
            else:
                self.root.after(0, lambda: self.log("Hyper-V status: Unknown", "warning"))
        except Exception as e:
            print(f"Error checking Hyper-V status: {str(e)}")

    def log_system_performance(self):
        """Log detailed system performance information"""
        try:
            perf_thread = Thread(target=self._log_performance_metrics)
            perf_thread.daemon = True
            perf_thread.start()
        except Exception as e:
            print(f"Error logging system performance: {str(e)}")

    def _log_performance_metrics(self):
        """Log detailed performance metrics"""
        try:
            # Get basic stats
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            
            # Log CPU and memory
            self.root.after(0, lambda: self.log(f"CPU usage: {cpu_percent}%", "info"))
            self.root.after(0, lambda: self.log(f"Memory usage: {memory.percent}% ({memory.used/1024/1024/1024:.2f}GB used of {memory.total/1024/1024/1024:.2f}GB total)", "info"))
            
            # Log disk usage
            disk_thread = Thread(target=self._log_disk_performance)
            disk_thread.daemon = True
            disk_thread.start()
            
            # Log running processes count
            processes = len(psutil.pids())
            self.root.after(0, lambda: self.log(f"Running processes: {processes}", "info"))
            
            # Log active network connections
            try:
                connections = len(psutil.net_connections())
                self.root.after(0, lambda: self.log(f"Active network connections: {connections}", "info"))
            except:
                # Requires admin rights on Windows, so may fail
                pass
        except Exception as e:
            print(f"Error logging performance metrics: {str(e)}")

    def _log_disk_performance(self):
        """Log disk performance metrics"""
        try:
            # Get disk partitions
            partitions = psutil.disk_partitions()
            
            for partition in partitions:
                try:
                    if 'cdrom' in partition.opts or partition.fstype == '':
                        # Skip CD-ROM drives or invalid partitions
                        continue
                    
                    usage = psutil.disk_usage(partition.mountpoint)
                    
                    # Only log disks that are reasonably full
                    if usage.percent > 75:
                        self.root.after(0, lambda p=partition.mountpoint, u=usage.percent: 
                                    self.log(f"Disk {p} is {u}% full", "warning"))
                except:
                    # Skip partitions we can't access
                    continue
        except Exception as e:
            print(f"Error logging disk performance: {str(e)}")

    def log_storage_status(self):
        """Log storage status information"""
        try:
            storage_thread = Thread(target=self._log_storage_metrics)
            storage_thread.daemon = True
            storage_thread.start()
        except Exception as e:
            print(f"Error logging storage status: {str(e)}")

    def _log_storage_metrics(self):
        """Log detailed storage metrics"""
        try:
            # Get disk partitions
            partitions = psutil.disk_partitions()
            
            total_space = 0
            used_space = 0
            
            for partition in partitions:
                try:
                    if 'cdrom' in partition.opts or partition.fstype == '':
                        # Skip CD-ROM drives or invalid partitions
                        continue
                    
                    usage = psutil.disk_usage(partition.mountpoint)
                    
                    # Convert to GB
                    total_gb = usage.total / (1024**3)
                    used_gb = usage.used / (1024**3)
                    free_gb = usage.free / (1024**3)
                    
                    # Add to totals
                    total_space += usage.total
                    used_space += usage.used
                    
                    self.root.after(0, lambda p=partition.mountpoint, t=total_gb, u=used_gb, f=free_gb, perc=usage.percent: 
                                self.log(f"Disk {p}: {t:.2f}GB total, {u:.2f}GB used ({perc}%), {f:.2f}GB free", "info"))
                except:
                    # Skip partitions we can't access
                    continue
            
            # Log totals
            if total_space > 0:
                total_gb = total_space / (1024**3)
                used_gb = used_space / (1024**3)
                free_gb = (total_space - used_space) / (1024**3)
                percent = (used_space / total_space) * 100
                
                self.root.after(0, lambda: self.log(f"All disks: {total_gb:.2f}GB total, {used_gb:.2f}GB used ({percent:.1f}%), {free_gb:.2f}GB free", "info"))
        except Exception as e:
            print(f"Error logging storage metrics: {str(e)}")

    def update_background_logs(self):
        """Periodically update logs with background information"""
        # Log active processes
        self.log_active_background_processes()
        
        # Update system stats if performance tab is active
        current_tab = self.tabs.tab(self.tabs.select(), "text")
        
        if current_tab == "Optimize":
            self.log_system_performance()
        elif current_tab == "Network":
            self.log_network_status()
        elif current_tab == "Storage":
            self.log_storage_status()
        elif current_tab == "Hyper-V":
            self.log_hyperv_status()
            
        # Schedule next update
        self.root.after(60000, self.update_background_logs)

    def log_active_background_processes(self):
        """Log information about active background processes"""
        # Only log if there are active processes
        if hasattr(self, 'background_processes') and self.background_processes:
            active_count = len([p for p in self.background_processes.values() if p.get('active', False)])
            if active_count > 0:
                self.log(f"{active_count} background processes active", "info")

    def register_background_process(self, name, description):
        """Register a background process for tracking"""
        process_id = self.bg_process_count
        self.bg_process_count += 1
        
        self.background_processes[process_id] = {
            'name': name,
            'description': description,
            'start_time': datetime.now(),
            'active': True
        }
        
        return process_id
        
    def complete_background_process(self, process_id):
        """Mark a background process as completed"""
        if process_id in self.background_processes:
            self.background_processes[process_id]['active'] = False
            self.background_processes[process_id]['end_time'] = datetime.now()
    
    def create_log_area(self):
        """Create the log area on the right side"""
        log_frame = ttk.LabelFrame(self.right_frame, text="Activity Log", style='Group.TLabelframe')
        log_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Create a text widget for the log with a scrollbar
        self.log_text = scrolledtext.ScrolledText(log_frame, wrap=tk.WORD, height=10, 
                                                font=LOG_FONT, background=LOG_BG)
        self.log_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.log_text.config(state=tk.DISABLED)
        
        # Add text tags for different log levels
        self.log_text.tag_configure("error", foreground=ERROR_FG, background=ERROR_BG)
        self.log_text.tag_configure("warning", foreground=WARNING_FG, background=WARNING_BG)
        self.log_text.tag_configure("success", foreground=SUCCESS_FG, background=SUCCESS_BG)
        self.log_text.tag_configure("info", foreground=PRIMARY_COLOR)
        
        # Create buttons for log control
        button_frame = ttk.Frame(log_frame)
        button_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(button_frame, text="Clear Log", command=self.clear_log).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Save Log", command=self.save_log).pack(side=tk.LEFT, padx=5)
    
    @thread_safe
    def log(self, message, level="info"):
        """Add a message to the log with timestamp"""
        if not hasattr(self, 'log_text'):
            return
            
        self.log_text.config(state=tk.NORMAL)
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Format based on log level
        if level == "error":
            formatted_msg = f"[{timestamp}] ERROR: {message}\n"
            tag = "error"
        elif level == "warning":
            formatted_msg = f"[{timestamp}] WARNING: {message}\n"
            tag = "warning"
        elif level == "success":
            formatted_msg = f"[{timestamp}] SUCCESS: {message}\n"
            tag = "success"
        elif level == "background":
            # Special format for background activities
            formatted_msg = f"[{timestamp}] BACKGROUND: {message}\n"
            tag = "info"
        elif level == "network":
            # Special format for network activities
            formatted_msg = f"[{timestamp}] NETWORK: {message}\n"
            tag = "info"
        elif level == "hyperv":
            # Special format for Hyper-V activities
            formatted_msg = f"[{timestamp}] HYPER-V: {message}\n"
            tag = "info"
        elif level == "system":
            # Special format for system performance activities
            formatted_msg = f"[{timestamp}] SYSTEM: {message}\n" 
            tag = "info"
        else:
            formatted_msg = f"[{timestamp}] INFO: {message}\n"
            tag = "info"
        
        self.log_text.insert(tk.END, formatted_msg, tag)
        self.log_text.see(tk.END)
        self.log_text.config(state=tk.DISABLED)
        
        # Also print to console for debugging
        print(formatted_msg.strip())
    
    def clear_log(self):
        """Clear the log text"""
        self.log_text.config(state=tk.NORMAL)
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state=tk.DISABLED)
        self.log("Log cleared", "info")
    
    def save_log(self):
        """Save the log content to a file"""
        # Get the current date and time for the filename
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        default_filename = f"system_utilities_log_{timestamp}.txt"
        
        # Ask user for file location
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
            initialfile=default_filename,
            title="Save Log File"
        )
        
        if not file_path:
            return  # User cancelled
        
        try:
            # Get log content
            self.log_text.config(state=tk.NORMAL)
            log_content = self.log_text.get(1.0, tk.END)
            self.log_text.config(state=tk.DISABLED)
            
            # Write to file
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(log_content)
                
            self.log(f"Log saved to {file_path}", "success")
        except Exception as e:
            self.log(f"Error saving log: {str(e)}", "error")
            messagebox.showerror("Error", f"Failed to save log: {str(e)}")
    
    @thread_safe
    def update_status(self, message):
        """Update the status bar text"""
        self.status_bar.config(text=message)
    
    def create_button(self, parent, text, command=None, row=0, column=0, 
                     columnspan=1, rowspan=1, padx=5, pady=5, sticky=tk.NSEW, 
                     is_primary=False, is_secondary=False):
        """Helper to create a styled button"""
        if is_primary:
            button = ttk.Button(parent, text=text, command=command, style='Primary.TButton')
        elif is_secondary:
            button = ttk.Button(parent, text=text, command=command, style='Secondary.TButton')
        else:
            button = ttk.Button(parent, text=text, command=command)
            
        button.grid(row=row, column=column, padx=padx, pady=pady, 
                   columnspan=columnspan, rowspan=rowspan, sticky=sticky)
        
        return button
    
    def restart_as_admin(self):
        """Restart the application with admin privileges"""
        if run_as_admin():
            self.root.destroy()  # Close current instance
        else:
            self.log("Failed to restart with admin privileges", "error")
            messagebox.showerror("Error", "Failed to restart with admin privileges.")
    
    def check_admin_rights(self, feature_name="This feature"):
        """Check if app has admin rights, offer to restart if not"""
        if not is_admin():
            self.log(f"{feature_name} requires administrator privileges", 'warning')
            if messagebox.askyesno("Admin Rights Required", 
                                 f"{feature_name} requires administrator privileges.\n\nDo you want to restart as administrator?"):
                self.restart_as_admin()
                return False
            return False
        return True
    
    def init_cleanup_tab(self):
        """Initialize the cleanup tab"""
        frame = ttk.Frame(self.cleanup_tab, style='Tab.TFrame', padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title with icon
        title_frame = ttk.Frame(frame, style='Tab.TFrame')
        title_frame.grid(column=0, row=0, columnspan=2, sticky=tk.W, pady=(0, 10))
        
        ttk.Label(
            title_frame, 
            text="System Cleanup", 
            font=HEADING_FONT,
            foreground=PRIMARY_COLOR
        ).pack(side=tk.LEFT)
        
        # Cleanup tools frame
        cleanup_frame = ttk.LabelFrame(frame, text="Cleanup Tools", padding=8, style='Group.TLabelframe')
        cleanup_frame.grid(column=0, row=1, sticky=tk.NSEW, pady=5, padx=5)
        
        # Cleanup tools buttons
        self.create_button(cleanup_frame, "Disk Cleanup", 
                          lambda: self.run_disk_cleanup(), 0, 0)
        
        self.create_button(cleanup_frame, "Empty Recycle Bin", 
                          lambda: self.empty_recycle_bin(), 0, 1)
        
        self.create_button(cleanup_frame, "Clear Temp Files", 
                          lambda: self.clear_temp_files(), 0, 2)
        
        self.create_button(cleanup_frame, "Clear Windows Cache", 
                          lambda: self.clear_windows_cache(), 0, 3)
        
        # Additional cleanup tools
        additional_cleanup_frame = ttk.LabelFrame(frame, text="Advanced Cleanup", padding=8, style='Group.TLabelframe')
        additional_cleanup_frame.grid(column=0, row=2, sticky=tk.NSEW, pady=5, padx=5)
        
        self.create_button(additional_cleanup_frame, "Remove Update Files", 
                          lambda: self.remove_update_files(), 0, 0)
        
        self.create_button(additional_cleanup_frame, "Clean Browser Data", 
                          lambda: self.clean_browser_data(), 0, 1)
        
        self.create_button(additional_cleanup_frame, "Full System Cleanup", 
                          lambda: self.full_system_cleanup(), 0, 2, is_primary=True)
        
        # Description area for cleanup tab
        desc_frame = ttk.LabelFrame(frame, text="Description", padding=10, style='Group.TLabelframe')
        desc_frame.grid(column=1, row=1, rowspan=2, padx=10, pady=5, sticky=tk.NSEW)
        
        self.cleanup_desc_text = tk.Text(desc_frame, wrap=tk.WORD, width=40, height=15, 
                                       font=DESCRIPTION_FONT, borderwidth=0,
                                       background=BG_COLOR, foreground=TEXT_COLOR,
                                       padx=5, pady=5)
        self.cleanup_desc_text.pack(fill=tk.BOTH, expand=True)
        self.cleanup_desc_text.config(state=tk.DISABLED)
        
        # Configure grid weights
        frame.columnconfigure(0, weight=2)
        frame.columnconfigure(1, weight=3)
        for i in range(1, 3):
            frame.rowconfigure(i, weight=1)
        
        # Set default description
        self.update_cleanup_description("Select a cleanup option from the left to see its description.")

    def update_cleanup_description(self, text):
        """Update the description in the cleanup tab"""
        if hasattr(self, 'cleanup_desc_text'):
            self.cleanup_desc_text.config(state=tk.NORMAL)
            self.cleanup_desc_text.delete(1.0, tk.END)
            self.cleanup_desc_text.insert(tk.END, text)
            self.cleanup_desc_text.config(state=tk.DISABLED)
    
    def init_system_tab(self):
        """Initialize the system tools tab"""
        frame = ttk.Frame(self.system_tab, style='Tab.TFrame', padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title with icon
        title_frame = ttk.Frame(frame, style='Tab.TFrame')
        title_frame.grid(column=0, row=0, columnspan=2, sticky=tk.W, pady=(0, 10))
        
        ttk.Label(
            title_frame, 
            text="System Tools", 
            font=HEADING_FONT,
            foreground=PRIMARY_COLOR
        ).pack(side=tk.LEFT)
        
        # System tools frame
        tools_frame = ttk.LabelFrame(frame, text="System Management", padding=8, style='Group.TLabelframe')
        tools_frame.grid(column=0, row=1, sticky=tk.NSEW, pady=5, padx=5)
        
        # System tools buttons
        self.create_button(tools_frame, "Enable Group Policy Editor", 
                          lambda: self.enable_group_policy_editor(), 0, 0)
        
        self.create_button(tools_frame, "System Information", 
                          lambda: self.show_system_information(), 0, 1)
        
        self.create_button(tools_frame, "Manage Services", 
                          lambda: self.manage_services(), 0, 2)
        
        self.create_button(tools_frame, "Registry Backup", 
                          lambda: self.backup_registry(), 0, 3)
        
        # Additional tools frame
        additional_tools_frame = ttk.LabelFrame(frame, text="Additional Tools", padding=8, style='Group.TLabelframe')
        additional_tools_frame.grid(column=0, row=2, sticky=tk.NSEW, pady=5, padx=5)
        
        self.create_button(additional_tools_frame, "Driver Update Check", 
                          lambda: self.check_driver_updates(), 0, 0)
        
        self.create_button(additional_tools_frame, "Network Diagnostics", 
                          lambda: self.run_network_diagnostics(), 0, 1)
        
        self.create_button(additional_tools_frame, "System Restore Point", 
                          lambda: self.create_system_restore_point(), 0, 2, is_primary=True)
        
        # Description area for system tab
        desc_frame = ttk.LabelFrame(frame, text="Description", padding=10, style='Group.TLabelframe')
        desc_frame.grid(column=1, row=1, rowspan=2, padx=10, pady=5, sticky=tk.NSEW)
        
        self.system_desc_text = tk.Text(desc_frame, wrap=tk.WORD, width=40, height=15, 
                                      font=DESCRIPTION_FONT, borderwidth=0,
                                      background=BG_COLOR, foreground=TEXT_COLOR,
                                      padx=5, pady=5)
        self.system_desc_text.pack(fill=tk.BOTH, expand=True)
        self.system_desc_text.config(state=tk.DISABLED)
        
        # Configure grid weights
        frame.columnconfigure(0, weight=2)
        frame.columnconfigure(1, weight=3)
        for i in range(1, 3):
            frame.rowconfigure(i, weight=1)
        
        # Set default description
        self.update_system_description("Select an option from the left to see its description.")
    
    def enable_group_policy_editor(self):
        """Enable Group Policy Editor in Windows Home editions"""
        self.log("Starting Group Policy Editor enabler...")
        self.update_status("Enabling Group Policy Editor...")
        
        # Check if running with admin rights
        if not is_admin():
            self.log("Enabling Group Policy Editor requires administrator privileges", 'warning')
            if messagebox.askyesno("Admin Rights Required", 
                                 "Enabling Group Policy Editor requires administrator privileges.\n\nDo you want to restart as administrator?"):
                self.restart_as_admin()
                return
            return
        
        # Check if running on Windows Home edition
        try:
            # Get Windows edition using PowerShell
            ps_command = ["powershell", "-Command", "(Get-WmiObject -Class Win32_OperatingSystem).Caption"]
            process = subprocess.Popen(ps_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                     text=True, creationflags=subprocess.CREATE_NO_WINDOW)
            stdout, stderr = process.communicate(timeout=10)
            
            is_home_edition = False
            if process.returncode == 0 and stdout.strip():
                windows_edition = stdout.strip().lower()
                is_home_edition = "home" in windows_edition
            
            if not is_home_edition:
                self.log("This feature is only needed for Windows Home editions.", 'warning')
                self.update_status("Group Policy Editor already available")
                messagebox.showinfo("Not Required", 
                                  "Group Policy Editor is already available in your Windows edition.\n\nThis feature is only needed for Windows Home editions.")
                return
        except Exception as e:
            self.log(f"Error detecting Windows edition: {str(e)}", 'error')
            # Continue anyway - user might know they need this
        
        # Update the description
        self.update_system_description(
            "Enabling Group Policy Editor... This may take a few minutes.\n\n" +
            "Please do not close the application or perform other operations until this process completes."
        )
        self.root.update_idletasks()
        
        # Create a thread to perform the installation
        gpedit_thread = Thread(target=self._install_group_policy_editor)
        gpedit_thread.daemon = True
        gpedit_thread.start()

    def _install_group_policy_editor(self):
        """Install Group Policy Editor in a background thread"""
        try:
            # Create temporary directory for files
            temp_dir = os.path.join(tempfile.gettempdir(), "gpedit_enabler")
            if not os.path.exists(temp_dir):
                os.makedirs(temp_dir)
            
            self.root.after(0, lambda: self.log(f"Created temporary directory at {temp_dir}"))
            
            # Define the required DLL files
            required_files = {
                "gpedit.msc": os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), "System32\\gpedit.msc"),
                "GroupPolicy.admx": os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), "PolicyDefinitions\\GroupPolicy.admx"),
                "GroupPolicy.adml": os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), "PolicyDefinitions\\en-US\\GroupPolicy.adml")
            }
            
            # Check if required system files exist
            missing_files = []
            for filename, path in required_files.items():
                if not os.path.exists(path):
                    missing_files.append(filename)
            
            if missing_files:
                error_msg = f"Missing required system files: {', '.join(missing_files)}"
                self.root.after(0, lambda: self.log(error_msg, 'error'))
                self.root.after(0, lambda: self.update_status("Installation failed"))
                self.root.after(0, lambda: messagebox.showerror("Error", error_msg))
                return
            
            # Download required files 
            # NOTE: In a real implementation, we would download the necessary files from a trusted source
            # or include them with the application. For this example, we'll simulate the download.
            self.root.after(0, lambda: self.log("Preparing installation files..."))
            
            # Create installation script
            script_path = os.path.join(temp_dir, "install_gpedit.bat")
            
            script_content = """@echo off
echo Installing Group Policy Editor for Windows Home Edition...

:: Copy DLL files
if not exist "%SystemRoot%\\System32\\GroupPolicy" mkdir "%SystemRoot%\\System32\\GroupPolicy"
if not exist "%SystemRoot%\\System32\\GroupPolicyUsers" mkdir "%SystemRoot%\\System32\\GroupPolicyUsers"

:: Copy DLL files
copy /y "%SystemRoot%\\System32\\gpedit.msc" "%SystemRoot%\\System32\\gpedit.msc.backup" >nul 2>&1
reg add "HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore" /v "DisableSR" /t REG_DWORD /d 1 /f >nul 2>&1
:: Registration of required DLL files
regsvr32 /s "%SystemRoot%\\System32\\GroupPolicyUsers.dll" >nul 2>&1
regsvr32 /s "%SystemRoot%\\System32\\GroupPolicy.dll" >nul 2>&1
regsvr32 /s "%SystemRoot%\\System32\\appmgmts.dll" >nul 2>&1
regsvr32 /s "%SystemRoot%\\System32\\gpprefcl.dll" >nul 2>&1

:: Create policy directories
if not exist "%SystemRoot%\\PolicyDefinitions" mkdir "%SystemRoot%\\PolicyDefinitions"
if not exist "%SystemRoot%\\PolicyDefinitions\\en-US" mkdir "%SystemRoot%\\PolicyDefinitions\\en-US"

:: Set registry values
reg add "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\EnableGroupPolicyRegistration" /v "EnableGroupPolicy" /t REG_DWORD /d 1 /f >nul 2>&1

:: Re-enable System Restore
reg add "HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore" /v "DisableSR" /t REG_DWORD /d 0 /f >nul 2>&1

echo Group Policy Editor installation completed.
echo Please restart your computer for changes to take effect.
pause
"""
            
            with open(script_path, 'w') as f:
                f.write(script_content)
            
            self.root.after(0, lambda: self.log("Installation files prepared"))
            
            # Run the installation script with elevated privileges
            self.root.after(0, lambda: self.log("Running installation script..."))
            
            process = subprocess.Popen(
                ["powershell", "-Command", f"Start-Process '{script_path}' -Verb RunAs -Wait"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            stdout, stderr = process.communicate(timeout=120)  # Allow up to 2 minutes
            
            if process.returncode == 0:
                self.root.after(0, lambda: self._gpedit_installation_completed(True))
            else:
                error_msg = f"Installation script failed: {stderr}"
                self.root.after(0, lambda: self.log(error_msg, 'error'))
                self.root.after(0, lambda: self._gpedit_installation_completed(False, error_msg))
            
        except Exception as e:
            error_msg = f"Error enabling Group Policy Editor: {str(e)}"
            self.root.after(0, lambda: self.log(error_msg, 'error'))
            self.root.after(0, lambda: self._gpedit_installation_completed(False, error_msg))

    def _gpedit_installation_completed(self, success, error_message=None):
        """Handle completion of Group Policy Editor installation"""
        if success:
            self.log("Group Policy Editor enabler completed successfully", 'success')
            self.update_status("Group Policy Editor enabled")
            
            # Update the description
            self.update_system_description(
                "Group Policy Editor has been successfully enabled!\n\n" +
                "You need to restart your computer for the changes to take effect.\n\n" +
                "After restarting, you can access the Group Policy Editor by:\n" +
                "1. Press Win+R to open the Run dialog\n" +
                "2. Type 'gpedit.msc' and press Enter\n\n" +
                "Note: If the Group Policy Editor doesn't work after restart, you may need to:\n" +
                "- Verify that your Windows version is compatible\n" +
                "- Run this tool again with administrator privileges\n" +
                "- Check Windows Update for any pending updates"
            )
            
            # Show success message
            messagebox.showinfo("Installation Complete", 
                              "Group Policy Editor has been successfully enabled!\n\n" +
                              "Please restart your computer for the changes to take effect.")
        else:
            self.log(f"Group Policy Editor enabler failed: {error_message}", 'error')
            self.update_status("Group Policy Editor installation failed")
            
            # Update the description
            self.update_system_description(
                "Failed to enable Group Policy Editor.\n\n" +
                f"Error: {error_message}\n\n" +
                "Possible solutions:\n" +
                "1. Make sure you're running the application as administrator\n" +
                "2. Verify that your Windows version is compatible\n" +
                "3. Try disabling your antivirus temporarily during installation\n" +
                "4. Make sure Windows is up to date"
            )
            
            # Show error message
            messagebox.showerror("Installation Failed", 
                               f"Failed to enable Group Policy Editor:\n\n{error_message}")

    def update_system_description(self, text):
        """Update the description in the system tab"""
        if hasattr(self, 'system_desc_text'):
            self.system_desc_text.config(state=tk.NORMAL)
            self.system_desc_text.delete(1.0, tk.END)
            self.system_desc_text.insert(tk.END, text)
            self.system_desc_text.config(state=tk.DISABLED)
    
    def init_update_tab(self):
        """Initialize the Windows Update tab with controls"""
        frame = ttk.Frame(self.update_tab, style='Tab.TFrame', padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title with icon
        title_frame = ttk.Frame(frame, style='Tab.TFrame')
        title_frame.grid(column=0, row=0, columnspan=2, sticky=tk.W, pady=(0, 10))
        
        ttk.Label(
            title_frame, 
            text="Windows Update Controls", 
            font=HEADING_FONT,
            foreground=PRIMARY_COLOR
        ).pack(side=tk.LEFT)
        
        # Windows Update Controls frame
        update_frame = ttk.LabelFrame(frame, text="Update Settings", padding=8, style='Group.TLabelframe')
        update_frame.grid(column=0, row=1, sticky=tk.NSEW, pady=5, padx=5)
        
        # Windows Update controls buttons
        self.create_button(update_frame, "Check for Updates", 
                          lambda: self.check_for_updates(), 0, 0)
        
        self.create_button(update_frame, "View Update History", 
                          lambda: self.view_update_history(), 0, 1)
        
        self.create_button(update_frame, "Open Windows Update", 
                          lambda: self.open_windows_update(), 0, 2)
        
        # Update Status frame
        status_frame = ttk.LabelFrame(frame, text="Update Status", padding=8, style='Group.TLabelframe')
        status_frame.grid(column=0, row=2, sticky=tk.NSEW, pady=5, padx=5)
        
        # Status display
        self.update_status_label = ttk.Label(status_frame, text="Current Status: Unknown")
        self.update_status_label.grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        
        # Refresh status button
        self.create_button(status_frame, "Refresh Status", 
                          lambda: self.refresh_update_status(), 0, 1)
        
        # Update Configuration frame
        config_frame = ttk.LabelFrame(frame, text="Update Configuration", padding=8, style='Group.TLabelframe')
        config_frame.grid(column=1, row=1, rowspan=2, sticky=tk.NSEW, pady=5, padx=5)
        
        # Update configuration radio buttons
        self.update_config_var = tk.StringVar(value="default")
        
        ttk.Radiobutton(
            config_frame, 
            text="Default (Microsoft Managed)",
            variable=self.update_config_var,
            value="default"
        ).grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        
        ttk.Radiobutton(
            config_frame, 
            text="Notify Only (Don't Download or Install)",
            variable=self.update_config_var,
            value="notify"
        ).grid(column=0, row=1, sticky=tk.W, padx=5, pady=5)
        
        ttk.Radiobutton(
            config_frame, 
            text="Download Only (Don't Install)",
            variable=self.update_config_var,
            value="download"
        ).grid(column=0, row=2, sticky=tk.W, padx=5, pady=5)
        
        ttk.Radiobutton(
            config_frame, 
            text="Completely Disable Windows Update",
            variable=self.update_config_var,
            value="disable"
        ).grid(column=0, row=3, sticky=tk.W, padx=5, pady=5)
        
        # Apply button
        self.create_button(config_frame, "Apply Configuration", 
                          lambda: self.apply_update_configuration(), 0, 4, 
                          is_primary=True)
        
        # Advanced Options frame
        advanced_frame = ttk.LabelFrame(frame, text="Advanced Options", padding=8, style='Group.TLabelframe')
        advanced_frame.grid(column=0, row=3, columnspan=2, sticky=tk.NSEW, pady=5, padx=5)
        
        # Advanced options buttons
        self.create_button(advanced_frame, "Pause Updates for 7 Days", 
                          lambda: self.pause_updates(7), 0, 0)
        
        self.create_button(advanced_frame, "Disable Feature Updates Only", 
                          lambda: self.disable_feature_updates(), 0, 1)
        
        self.create_button(advanced_frame, "Clear Update Cache", 
                          lambda: self.clear_update_cache(), 0, 2)
        
        self.create_button(advanced_frame, "Reset Windows Update", 
                          lambda: self.reset_windows_update(), 0, 3, 
                          is_secondary=True)
        
        # Configure grid weights
        frame.columnconfigure(0, weight=1)
        frame.columnconfigure(1, weight=1)
        for i in range(1, 4):
            frame.rowconfigure(i, weight=1)
        
        # Get initial update status
        self.root.after(1000, self.refresh_update_status)
    
    def check_for_updates(self):
        """Manually check for Windows updates"""
        self.log("Checking for Windows updates...")
        self.update_status("Checking for Windows updates...")
        
        try:
            subprocess.Popen("ms-settings:windowsupdate-action", shell=True)
            self.log("Windows Update check initiated", "success")
        except Exception as e:
            self.log(f"Error checking for updates: {str(e)}", "error")
            self.update_status("Error checking for updates")
    
    def view_update_history(self):
        """View Windows Update history"""
        self.log("Opening Windows Update history...")
        self.update_status("Opening Windows Update history...")
        
        try:
            subprocess.Popen("ms-settings:windowsupdate-history", shell=True)
            self.log("Windows Update history opened", "success")
        except Exception as e:
            self.log(f"Error opening update history: {str(e)}", "error")
            self.update_status("Error opening update history")
    
    def open_windows_update(self):
        """Open Windows Update settings"""
        self.log("Opening Windows Update settings...")
        self.update_status("Opening Windows Update settings...")
        
        try:
            subprocess.Popen("ms-settings:windowsupdate", shell=True)
            self.log("Windows Update settings opened", "success")
        except Exception as e:
            self.log(f"Error opening Windows Update: {str(e)}", "error")
            self.update_status("Error opening Windows Update")
    
    def refresh_update_status(self):
        """Refresh Windows Update status"""
        self.log("Refreshing Windows Update status...")
        
        try:
            # Use PowerShell to get update service status
            ps_command = [
                "powershell", 
                "-Command", 
                "(Get-Service -Name wuauserv).Status"
            ]
            
            process = subprocess.Popen(
                ps_command, 
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=10)
            
            if process.returncode == 0 and stdout.strip():
                service_status = stdout.strip()
                
                # Now check update settings using registry
                ps_registry_command = [
                    "powershell",
                    "-Command",
                    "Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU' -Name 'NoAutoUpdate' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty NoAutoUpdate"
                ]
                
                registry_process = subprocess.Popen(
                    ps_registry_command,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                
                reg_stdout, reg_stderr = registry_process.communicate(timeout=10)
                
                # Determine update policy based on registry value
                if registry_process.returncode == 0 and reg_stdout.strip():
                    try:
                        no_auto_update = int(reg_stdout.strip())
                        if no_auto_update == 1:
                            policy_status = "Disabled"
                            self.update_config_var.set("disable")
                        else:
                            # Check for AUOptions value
                            ps_au_command = [
                                "powershell",
                                "-Command",
                                "Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU' -Name 'AUOptions' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty AUOptions"
                            ]
                            
                            au_process = subprocess.Popen(
                                ps_au_command,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                text=True,
                                creationflags=subprocess.CREATE_NO_WINDOW
                            )
                            
                            au_stdout, au_stderr = au_process.communicate(timeout=10)
                            
                            if au_process.returncode == 0 and au_stdout.strip():
                                try:
                                    au_option = int(au_stdout.strip())
                                    if au_option == 2:
                                        policy_status = "Notify Only"
                                        self.update_config_var.set("notify")
                                    elif au_option == 3:
                                        policy_status = "Download Only"
                                        self.update_config_var.set("download")
                                    else:
                                        policy_status = "Microsoft Managed"
                                        self.update_config_var.set("default")
                                except ValueError:
                                    policy_status = "Microsoft Managed (Default)"
                                    self.update_config_var.set("default")
                            else:
                                policy_status = "Microsoft Managed (Default)"
                                self.update_config_var.set("default")
                    except ValueError:
                        policy_status = "Unknown"
                        self.update_config_var.set("default")
                else:
                    policy_status = "Microsoft Managed (Default)"
                    self.update_config_var.set("default")
                
                # Update the status label
                status_text = f"Service Status: {service_status}, Policy: {policy_status}"
                self.update_status_label.config(text=status_text)
                self.log(f"Windows Update status: {status_text}", "info")
            else:
                self.update_status_label.config(text="Could not determine update status")
                self.log("Failed to get Windows Update status", "warning")
        
        except Exception as e:
            self.update_status_label.config(text="Error checking update status")
            self.log(f"Error refreshing update status: {str(e)}", "error")
    
    def apply_update_configuration(self):
        """Apply the selected Windows Update configuration"""
        selected_config = self.update_config_var.get()
        self.log(f"Applying Windows Update configuration: {selected_config}")
        
        # Check for admin rights
        if not self.check_admin_rights("Changing Windows Update settings"):
            return
        
        # Define registry paths
        au_path = r"SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
        wu_path = r"SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"
        
        try:
            # Ensure the registry keys exist
            ps_create_keys = [
                "powershell",
                "-Command",
                f"New-Item -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows' -Name 'WindowsUpdate' -Force; New-Item -Path 'HKLM:\\{wu_path}' -Name 'AU' -Force"
            ]
            
            subprocess.run(
                ps_create_keys,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW,
                check=True
            )
            
            if selected_config == "disable":
                # Completely disable Windows Update
                ps_commands = [
                    f"Set-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'NoAutoUpdate' -Value 1 -Type DWord -Force",
                    # Stop and disable the Windows Update service
                    "Stop-Service -Name wuauserv -Force; Set-Service -Name wuauserv -StartupType Disabled"
                ]
                status_msg = "Windows Update has been completely disabled"
            
            elif selected_config == "notify":
                # Set to notify only (don't download or install)
                ps_commands = [
                    f"Set-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'NoAutoUpdate' -Value 0 -Type DWord -Force",
                    f"Set-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'AUOptions' -Value 2 -Type DWord -Force",
                    # Ensure the service is running
                    "Set-Service -Name wuauserv -StartupType Manual; Start-Service -Name wuauserv"
                ]
                status_msg = "Windows Update set to notify only mode"
            
            elif selected_config == "download":
                # Set to download only (don't install)
                ps_commands = [
                    f"Set-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'NoAutoUpdate' -Value 0 -Type DWord -Force",
                    f"Set-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'AUOptions' -Value 3 -Type DWord -Force",
                    # Ensure the service is running
                    "Set-Service -Name wuauserv -StartupType Automatic; Start-Service -Name wuauserv"
                ]
                status_msg = "Windows Update set to download only mode"
            
            else:  # default
                # Remove custom settings and restore defaults
                ps_commands = [
                    f"Remove-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'NoAutoUpdate' -Force -ErrorAction SilentlyContinue",
                    f"Remove-ItemProperty -Path 'HKLM:\\{au_path}' -Name 'AUOptions' -Force -ErrorAction SilentlyContinue",
                    # Ensure the service is running with automatic startup
                    "Set-Service -Name wuauserv -StartupType Automatic; Start-Service -Name wuauserv"
                ]
                status_msg = "Windows Update restored to default settings"
            
            # Execute the commands
            for cmd in ps_commands:
                ps_full_cmd = ["powershell", "-Command", cmd]
                subprocess.run(
                    ps_full_cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW,
                    check=True
                )
            
            # Refresh status after applying changes
            self.refresh_update_status()
            
            self.log(status_msg, "success")
            self.update_status(status_msg)
            messagebox.showinfo("Success", status_msg)
            
        except Exception as e:
            error_msg = f"Error applying update configuration: {str(e)}"
            self.log(error_msg, "error")
            self.update_status("Error applying update configuration")
            messagebox.showerror("Error", error_msg)
    
    def pause_updates(self, days=7):
        """Pause Windows updates for the specified number of days"""
        self.log(f"Pausing Windows updates for {days} days...")
        
        # Check for admin rights
        if not self.check_admin_rights("Pausing Windows Updates"):
            return
        
        try:
            # Use PowerShell to pause updates
            ps_command = [
                "powershell",
                "-Command",
                f"New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\WindowsUpdate\\UX\\Settings' -Name 'PauseUpdatesExpiryTime' -Value ((Get-Date).AddDays({days}).ToString('yyyy-MM-dd')) -PropertyType String -Force"
            ]
            
            subprocess.run(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW,
                check=True
            )
            
            self.log(f"Windows updates paused for {days} days", "success")
            self.update_status(f"Windows updates paused for {days} days")
            messagebox.showinfo("Success", f"Windows updates have been paused for {days} days.")
            
            # Refresh the status
            self.refresh_update_status()
            
        except Exception as e:
            error_msg = f"Error pausing updates: {str(e)}"
            self.log(error_msg, "error")
            self.update_status("Error pausing updates")
            messagebox.showerror("Error", error_msg)
    
    def disable_feature_updates(self):
        """Disable feature updates while allowing security updates"""
        self.log("Disabling Windows feature updates...")
        
        # Check for admin rights
        if not self.check_admin_rights("Modifying Windows Update settings"):
            return
        
        try:
            # Set registry keys to disable feature updates
            ps_commands = [
                # Create the TargetReleaseVersion key
                "New-Item -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Force",
                # Set the policies to defer feature updates
                "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Name 'DisableOSUpgrade' -Value 1 -Type DWord -Force",
                "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate' -Name 'TargetReleaseVersion' -Value 1 -Type DWord -Force"
            ]
            
            for cmd in ps_commands:
                ps_full_cmd = ["powershell", "-Command", cmd]
                subprocess.run(
                    ps_full_cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW,
                    check=True
                )
            
            self.log("Windows feature updates disabled successfully", "success")
            self.update_status("Feature updates disabled")
            messagebox.showinfo("Success", "Windows feature updates have been disabled. Security updates will still be installed.")
            
            # Refresh the status
            self.refresh_update_status()
            
        except Exception as e:
            error_msg = f"Error disabling feature updates: {str(e)}"
            self.log(error_msg, "error")
            self.update_status("Error disabling feature updates")
            messagebox.showerror("Error", error_msg)
    
    def clear_update_cache(self):
        """Clear Windows Update cache files"""
        self.log("Clearing Windows Update cache...")
        
        # Check for admin rights
        if not self.check_admin_rights("Clearing Windows Update cache"):
            return
        
        # Create a thread to clear the cache
        clear_thread = Thread(target=self._clear_update_cache_thread)
        clear_thread.daemon = True
        clear_thread.start()
    
    def _clear_update_cache_thread(self):
        """Thread to clear Windows Update cache"""
        try:
            self.root.after(0, lambda: self.update_status("Stopping Windows Update service..."))
            
            # Command list to execute
            commands = [
                # Stop Windows Update service
                ["net", "stop", "wuauserv"],
                ["net", "stop", "bits"],
                ["net", "stop", "cryptsvc"],
                
                # Rename SoftwareDistribution folder
                ["cmd", "/c", "ren %systemroot%\\SoftwareDistribution SoftwareDistribution.old"],
                ["cmd", "/c", "ren %systemroot%\\System32\\catroot2 catroot2.old"],
                
                # Start services again
                ["net", "start", "wuauserv"],
                ["net", "start", "bits"],
                ["net", "start", "cryptsvc"]
            ]
            
            for cmd in commands:
                self.root.after(0, lambda c=cmd: self.log(f"Executing: {' '.join(c)}"))
                process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                stdout, stderr = process.communicate()
                
                if stderr and process.returncode != 0:
                    self.root.after(0, lambda s=stderr: self.log(f"Command error: {s}", "warning"))
            
            self.root.after(0, lambda: self.log("Windows Update cache cleared successfully", "success"))
            self.root.after(0, lambda: self.update_status("Update cache cleared"))
            self.root.after(0, lambda: messagebox.showinfo("Cache Cleared", 
                                                        "Windows Update cache has been cleared successfully.\n\n"
                                                        "You may need to restart your computer for the changes to take effect."))
            
            # Refresh the status
            self.root.after(1000, self.refresh_update_status)
            
        except Exception as e:
            error_msg = f"Error clearing update cache: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error clearing update cache"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))
    
    def reset_windows_update(self):
        """Reset Windows Update components"""
        self.log("Preparing to reset Windows Update components...")
        
        # Check for admin rights
        if not self.check_admin_rights("Resetting Windows Update"):
            return
        
        # Ask for confirmation as this is a significant operation
        if not messagebox.askyesno("Confirm Reset", 
                                 "This will reset all Windows Update components to their default state.\n\n"
                                 "This is a significant operation and should only be used when Windows Update "
                                 "is experiencing serious problems.\n\n"
                                 "Do you want to continue?"):
            self.log("Windows Update reset cancelled by user", "info")
            return
        
        # Create a thread to reset Windows Update
        reset_thread = Thread(target=self._reset_windows_update_thread)
        reset_thread.daemon = True
        reset_thread.start()
    
    def _reset_windows_update_thread(self):
        """Thread to reset Windows Update components"""
        try:
            self.root.after(0, lambda: self.update_status("Resetting Windows Update components..."))
            
            # Create a temporary batch file with the reset commands
            temp_dir = tempfile.gettempdir()
            batch_file = os.path.join(temp_dir, "reset_windows_update.bat")
            
            reset_script = """@echo off
echo Resetting Windows Update components...
echo.

echo Stopping services...
net stop wuauserv
net stop cryptSvc
net stop bits
net stop msiserver
echo.

echo Removing Windows Update data...
rd /s /q %systemroot%\\SoftwareDistribution
rd /s /q %systemroot%\\System32\\catroot2
echo.

echo Resetting Windows Update components...
netsh winsock reset
netsh winhttp reset proxy
echo.

echo Registering DLLs...
regsvr32 /s atl.dll
regsvr32 /s urlmon.dll
regsvr32 /s mshtml.dll
regsvr32 /s shdocvw.dll
regsvr32 /s browseui.dll
regsvr32 /s jscript.dll
regsvr32 /s vbscript.dll
regsvr32 /s scrrun.dll
regsvr32 /s msxml.dll
regsvr32 /s msxml3.dll
regsvr32 /s msxml6.dll
regsvr32 /s actxprxy.dll
regsvr32 /s softpub.dll
regsvr32 /s wintrust.dll
regsvr32 /s dssenh.dll
regsvr32 /s rsaenh.dll
regsvr32 /s gpkcsp.dll
regsvr32 /s sccbase.dll
regsvr32 /s slbcsp.dll
regsvr32 /s cryptdlg.dll
regsvr32 /s oleaut32.dll
regsvr32 /s ole32.dll
regsvr32 /s shell32.dll
regsvr32 /s initpki.dll
regsvr32 /s wuapi.dll
regsvr32 /s wuaueng.dll
regsvr32 /s wuaueng1.dll
regsvr32 /s wucltui.dll
regsvr32 /s wups.dll
regsvr32 /s wups2.dll
regsvr32 /s wuweb.dll
regsvr32 /s qmgr.dll
regsvr32 /s qmgrprxy.dll
regsvr32 /s wucltux.dll
regsvr32 /s muweb.dll
regsvr32 /s wuwebv.dll
echo.

echo Starting services...
net start wuauserv
net start cryptSvc
net start bits
net start msiserver
echo.

echo Reset completed. Please restart your computer.
echo.
"""
            
            with open(batch_file, 'w') as f:
                f.write(reset_script)
            
            # Execute the batch file with admin privileges
            self.root.after(0, lambda: self.log("Executing Windows Update reset script..."))
            
            process = subprocess.Popen(
                ["powershell", "-Command", f"Start-Process '{batch_file}' -Verb RunAs -Wait"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=300)  # Allow up to 5 minutes
            
            if process.returncode == 0:
                self.root.after(0, lambda: self.log("Windows Update components reset successfully", "success"))
                self.root.after(0, lambda: self.update_status("Windows Update reset completed"))
                self.root.after(0, lambda: messagebox.showinfo("Reset Complete", 
                                                            "Windows Update components have been reset successfully.\n\n"
                                                            "Please restart your computer for the changes to take effect."))
            else:
                self.root.after(0, lambda: self.log(f"Error during reset: {stderr}", "error"))
                self.root.after(0, lambda: self.update_status("Error resetting Windows Update"))
                self.root.after(0, lambda: messagebox.showerror("Error", 
                                                             f"Error resetting Windows Update components:\n\n{stderr}"))
            
            # Try to delete the temporary batch file
            try:
                os.remove(batch_file)
            except:
                pass
            
            # Refresh the status
            self.root.after(1000, self.refresh_update_status)
            
        except Exception as e:
            error_msg = f"Error resetting Windows Update: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error resetting Windows Update"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))
    
    def init_storage_tab(self):
        """Initialize the Storage tab with disk space analysis features"""
        frame = ttk.Frame(self.storage_tab, style='Tab.TFrame', padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title with icon
        title_frame = ttk.Frame(frame, style='Tab.TFrame')
        title_frame.grid(column=0, row=0, columnspan=3, sticky=tk.W, pady=(0, 10))
        
        ttk.Label(
            title_frame, 
            text="Storage Management", 
            font=HEADING_FONT,
            foreground=PRIMARY_COLOR
        ).pack(side=tk.LEFT)
        
        # Drive selection frame
        drive_frame = ttk.LabelFrame(frame, text="Drives", padding=8, style='Group.TLabelframe')
        drive_frame.grid(column=0, row=1, sticky=tk.NSEW, pady=5, padx=5)
        
        # Drive selection
        ttk.Label(drive_frame, text="Select Drive:").grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        
        # Get available drives
        self.drives_var = tk.StringVar()
        self.drives_listbox = tk.Listbox(drive_frame, height=5, exportselection=False)
        self.drives_listbox.grid(column=0, row=1, sticky=tk.NSEW, padx=5, pady=5)
        self.drives_listbox.bind('<<ListboxSelect>>', self.on_drive_select)
        
        # Scrollbar for drives listbox
        drives_scrollbar = ttk.Scrollbar(drive_frame, orient="vertical", command=self.drives_listbox.yview)
        drives_scrollbar.grid(column=1, row=1, sticky=tk.NS, pady=5)
        self.drives_listbox.config(yscrollcommand=drives_scrollbar.set)
        
        # Drive information
        self.drive_info_var = tk.StringVar(value="No drive selected")
        ttk.Label(drive_frame, textvariable=self.drive_info_var).grid(column=0, row=2, columnspan=2, sticky=tk.W, padx=5, pady=5)
        
        # Refresh drives button
        self.create_button(drive_frame, "Refresh Drives", 
                          lambda: self.refresh_drives(), 0, 3, columnspan=2)
        
        # Storage tools frame
        tools_frame = ttk.LabelFrame(frame, text="Storage Tools", padding=8, style='Group.TLabelframe')
        tools_frame.grid(column=0, row=2, sticky=tk.NSEW, pady=5, padx=5)
        
        # Storage tools buttons
        self.create_button(tools_frame, "Disk Cleanup", 
                          lambda: self.run_disk_cleanup(), 0, 0)
        
        self.create_button(tools_frame, "Disk Defragment", 
                          lambda: self.defragment_disk(), 0, 1)
        
        self.create_button(tools_frame, "Check Disk", 
                          lambda: self.check_disk(), 0, 2)
        
        # Folder analysis frame
        analysis_frame = ttk.LabelFrame(frame, text="Folder Analysis", padding=8, style='Group.TLabelframe')
        analysis_frame.grid(column=1, row=1, rowspan=2, sticky=tk.NSEW, padx=5, pady=5)
        
        # Folder selection
        ttk.Label(analysis_frame, text="Select Folder to Analyze:").grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        
        self.folder_path_var = tk.StringVar()
        folder_entry = ttk.Entry(analysis_frame, textvariable=self.folder_path_var, width=40)
        folder_entry.grid(column=0, row=1, sticky=tk.EW, padx=5, pady=5)
        
        self.create_button(analysis_frame, "Browse...", 
                          lambda: self.select_folder_to_analyze(), 1, 1)
        
        self.create_button(analysis_frame, "Analyze Folder", 
                          lambda: self.analyze_folder(), 0, 2, columnspan=2, is_primary=True)
        
        # Add a separator
        ttk.Separator(analysis_frame, orient='horizontal').grid(column=0, row=3, columnspan=2, sticky=tk.EW, pady=10)
        
        # Results area
        ttk.Label(analysis_frame, text="Analysis Results:").grid(column=0, row=4, sticky=tk.W, padx=5, pady=5)
        
        # Results treeview
        self.folder_results_tree = ttk.Treeview(analysis_frame, columns=("size", "percent"), show="tree headings")
        self.folder_results_tree.grid(column=0, row=5, columnspan=2, sticky=tk.NSEW, padx=5, pady=5)
        
        self.folder_results_tree.heading("#0", text="Folder")
        self.folder_results_tree.heading("size", text="Size")
        self.folder_results_tree.heading("percent", text="% of Parent")
        
        self.folder_results_tree.column("#0", width=250)
        self.folder_results_tree.column("size", width=100)
        self.folder_results_tree.column("percent", width=100)
        
        # Scrollbar for results
        results_scrollbar = ttk.Scrollbar(analysis_frame, orient="vertical", command=self.folder_results_tree.yview)
        results_scrollbar.grid(column=2, row=5, sticky=tk.NS, pady=5)
        self.folder_results_tree.config(yscrollcommand=results_scrollbar.set)
        
        # Add export and open buttons
        button_frame = ttk.Frame(analysis_frame)
        button_frame.grid(column=0, row=6, columnspan=2, sticky=tk.EW, pady=5)
        
        self.create_button(button_frame, "Export Results", 
                          lambda: self.export_folder_analysis(), 0, 0)
        
        self.create_button(button_frame, "Open Selected", 
                          lambda: self.open_selected_folder(), 1, 0)
        
        # Visualization frame
        viz_frame = ttk.LabelFrame(frame, text="Disk Space Visualization", padding=8, style='Group.TLabelframe')
        viz_frame.grid(column=2, row=1, rowspan=2, sticky=tk.NSEW, padx=5, pady=5)
        
        # Create matplotlib figure for visualization
        self.fig = plt.Figure(figsize=(5, 4), dpi=100)
        self.canvas = FigureCanvasTkAgg(self.fig, master=viz_frame)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # Configure grid weights
        frame.columnconfigure(0, weight=1)
        frame.columnconfigure(1, weight=2)
        frame.columnconfigure(2, weight=2)
        frame.rowconfigure(1, weight=1)
        frame.rowconfigure(2, weight=1)
        
        # Set up drive analysis tools
        analysis_frame.columnconfigure(0, weight=1)
        analysis_frame.rowconfigure(5, weight=1)
        
        # Populate drives
        self.refresh_drives()
    
    def refresh_drives(self):
        """Refresh the list of available drives"""
        self.log("Refreshing drives list...")
        self.update_status("Refreshing drives list...")
        
        # Clear the listbox
        self.drives_listbox.delete(0, tk.END)
        
        try:
            # Get all disk partitions
            partitions = psutil.disk_partitions()
            
            # Insert each drive into the listbox
            for i, partition in enumerate(partitions):
                try:
                    usage = psutil.disk_usage(partition.mountpoint)
                    # Format drive info: Drive Letter (Label) - Size
                    drive_text = f"{partition.mountpoint} - {usage.total / (1024**3):.1f} GB"
                    self.drives_listbox.insert(tk.END, drive_text)
                except PermissionError:
                    # Skip drives we can't access
                    self.drives_listbox.insert(tk.END, f"{partition.mountpoint} - Access denied")
            
            # Select the first drive by default if available
            if self.drives_listbox.size() > 0:
                self.drives_listbox.selection_set(0)
                self.on_drive_select(None)
            
            self.log("Drives list refreshed", "success")
            self.update_status("Drives list refreshed")
            
        except Exception as e:
            self.log(f"Error refreshing drives: {str(e)}", "error")
            self.update_status("Error refreshing drives")
    
    def on_drive_select(self, event):
        """Handle drive selection event"""
        try:
            # Get the selected index
            selected_indices = self.drives_listbox.curselection()
            if not selected_indices:
                return
            
            # Get selected drive from the text
            drive_text = self.drives_listbox.get(selected_indices[0])
            drive = drive_text.split(" - ")[0]
            
            # Get drive information
            usage = psutil.disk_usage(drive)
            
            # Update the drive info text
            info_text = (
                f"Drive: {drive}\n"
                f"Total: {usage.total / (1024**3):.2f} GB\n"
                f"Used: {usage.used / (1024**3):.2f} GB ({usage.percent}%)\n"
                f"Free: {usage.free / (1024**3):.2f} GB"
            )
            self.drive_info_var.set(info_text)
            
            # Update the visualization
            self.update_drive_visualization(drive, usage)
            
        except Exception as e:
            self.log(f"Error displaying drive info: {str(e)}", "error")
            self.drive_info_var.set("Error getting drive information")
    
    def update_drive_visualization(self, drive, usage):
        """Update the disk space visualization"""
        try:
            # Clear the figure
            self.fig.clear()
            
            # Create a pie chart
            ax = self.fig.add_subplot(111)
            
            # Data for the chart
            sizes = [usage.used, usage.free]
            labels = [f'Used ({usage.percent}%)', f'Free ({100-usage.percent}%)']
            colors = ['#ff9999', '#66b3ff']
            explode = (0.1, 0)  # explode the 1st slice (Used)
            
            # Create the pie chart
            ax.pie(sizes, explode=explode, labels=labels, colors=colors,
                  autopct='%1.1f%%', shadow=True, startangle=90)
            ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
            
            # Set title
            ax.set_title(f'Disk Space Usage - {drive}')
            
            # Draw the updated chart
            self.canvas.draw()
            
        except Exception as e:
            self.log(f"Error updating visualization: {str(e)}", "error")
    
    def defragment_disk(self):
        """Run disk defragmentation tool"""
        self.log("Starting disk defragmentation...")
        self.update_status("Starting disk defragmentation...")
        
        try:
            # Get the selected drive
            selected_indices = self.drives_listbox.curselection()
            if not selected_indices:
                messagebox.showinfo("No Drive Selected", "Please select a drive to defragment.")
                return
            
            drive_text = self.drives_listbox.get(selected_indices[0])
            drive = drive_text.split(" - ")[0].strip()
            
            # Open the Windows defragmentation tool
            subprocess.Popen("dfrgui.exe", creationflags=subprocess.CREATE_NO_WINDOW)
            self.log(f"Disk defragmentation tool opened for drive {drive}", "success")
            
        except Exception as e:
            self.log(f"Error starting disk defragmentation: {str(e)}", "error")
            self.update_status("Error starting disk defragmentation")
            messagebox.showerror("Error", f"Failed to start disk defragmentation: {str(e)}")
    
    def check_disk(self):
        """Run check disk on the selected drive"""
        self.log("Preparing to run check disk...")
        self.update_status("Preparing to run check disk...")
        
        # Check for admin rights
        if not self.check_admin_rights("Running check disk"):
            return
        
        try:
            # Get the selected drive
            selected_indices = self.drives_listbox.curselection()
            if not selected_indices:
                messagebox.showinfo("No Drive Selected", "Please select a drive to check.")
                return
            
            drive_text = self.drives_listbox.get(selected_indices[0])
            drive = drive_text.split(" - ")[0].strip()
            
            # Format the drive letter correctly
            if drive.endswith(':'):
                drive_letter = drive[:1]
            else:
                drive_letter = drive[0]
            
            # Confirm with the user
            if not messagebox.askyesno("Confirm Check Disk", 
                                     f"Do you want to run Check Disk on drive {drive}?\n\n"
                                     "This will schedule a disk check on next restart."):
                self.log("Check Disk cancelled by user", "info")
                return
            
            # Execute the chkdsk command
            cmd = f"chkdsk {drive_letter}: /f /r"
            process = subprocess.Popen(
                ["powershell", "-Command", f"Start-Process cmd -ArgumentList '/c {cmd}' -Verb RunAs"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate()
            
            if process.returncode == 0:
                self.log(f"Check Disk scheduled for drive {drive}", "success")
                self.update_status(f"Check Disk scheduled for drive {drive}")
                messagebox.showinfo("Check Disk Scheduled", 
                                  f"Check Disk has been scheduled for drive {drive}.\n\n"
                                  "The scan will run on the next system restart.")
            else:
                self.log(f"Error running Check Disk: {stderr}", "error")
                self.update_status("Error running Check Disk")
                messagebox.showerror("Error", f"Failed to schedule Check Disk: {stderr}")
            
        except Exception as e:
            self.log(f"Error running Check Disk: {str(e)}", "error")
            self.update_status("Error running Check Disk")
            messagebox.showerror("Error", f"Failed to run Check Disk: {str(e)}")
    
    def select_folder_to_analyze(self):
        """Open folder browser to select a folder for analysis"""
        folder_path = filedialog.askdirectory(title="Select Folder to Analyze")
        if folder_path:
            self.folder_path_var.set(folder_path)
    
    def analyze_folder(self):
        """Analyze the selected folder for storage usage"""
        folder_path = self.folder_path_var.get()
        
        if not folder_path or not os.path.exists(folder_path):
            messagebox.showinfo("Invalid Path", "Please select a valid folder to analyze.")
            return
        
        self.log(f"Analyzing folder: {folder_path}...")
        self.update_status(f"Analyzing folder: {folder_path}...")
        
        # Start analysis in a thread
        analysis_thread = Thread(target=self._analyze_folder_thread, args=(folder_path,))
        analysis_thread.daemon = True
        analysis_thread.start()
    
    def _analyze_folder_thread(self, folder_path):
        """Thread to analyze folder storage usage"""
        try:
            # Clear previous results
            self.root.after(0, lambda: self.folder_results_tree.delete(*self.folder_results_tree.get_children()))
            
            # Get the total size of the folder
            total_size = self._get_folder_size(folder_path)
            if total_size == 0:
                self.root.after(0, lambda: messagebox.showinfo("Empty Folder", 
                                                            f"The folder '{folder_path}' is empty or cannot be analyzed."))
                return
            
            # Get the top-level subfolders and their sizes
            self.root.after(0, lambda: self.log(f"Getting subfolder sizes for {folder_path}..."))
            
            # Get all immediate subfolders
            subfolders = []
            files_size = 0
            
            for item in os.listdir(folder_path):
                item_path = os.path.join(folder_path, item)
                
                if os.path.isdir(item_path):
                    # For directories, calculate size and add to list
                    size = self._get_folder_size(item_path)
                    subfolders.append((item_path, item, size))
                elif os.path.isfile(item_path):
                    # For files, add to files_size
                    try:
                        files_size += os.path.getsize(item_path)
                    except:
                        pass
            
            # Sort by size (largest first)
            subfolders.sort(key=lambda x: x[2], reverse=True)
            
            # Display the results
            folder_name = os.path.basename(folder_path) or folder_path
            
            # Add the root folder
            root_id = self.root.after(0, lambda: self.folder_results_tree.insert("", tk.END, text=folder_name, 
                                                             values=(self._format_size(total_size), "100.0%")))
            
            # Add all subfolders
            for path, name, size in subfolders:
                percent = (size / total_size) * 100 if total_size > 0 else 0
                self.root.after(0, lambda p=path, n=name, s=size, perc=percent: 
                           self.folder_results_tree.insert(root_id, tk.END, text=n, values=(self._format_size(s), f"{perc:.1f}%")))
            
            # Add a node for direct files
            if files_size > 0:
                percent = (files_size / total_size) * 100
                self.root.after(0, lambda: self.folder_results_tree.insert(root_id, tk.END, text="Files", 
                                                          values=(self._format_size(files_size), f"{percent:.1f}%")))
            
            # Create visualization
            self.root.after(0, lambda: self._create_folder_visualization(folder_name, subfolders, files_size, total_size))
            
            self.root.after(0, lambda: self.log(f"Folder analysis complete: {folder_path}", "success"))
            self.root.after(0, lambda: self.update_status("Folder analysis complete"))
            
        except Exception as e:
            error_msg = f"Error analyzing folder: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error analyzing folder"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))
    
    def _get_folder_size(self, folder_path):
        """Get the total size of a folder and its contents"""
        total_size = 0
        
        try:
            for dirpath, dirnames, filenames in os.walk(folder_path):
                for f in filenames:
                    fp = os.path.join(dirpath, f)
                    try:
                        total_size += os.path.getsize(fp)
                    except (PermissionError, FileNotFoundError, OSError):
                        continue
        except (PermissionError, FileNotFoundError, OSError):
            pass
            
        return total_size
    
    def _format_size(self, size_bytes):
        """Format size in bytes to a human-readable format"""
        # Define unit sizes
        KB = 1024
        MB = KB * 1024
        GB = MB * 1024
        TB = GB * 1024
        
        # Format based on size
        if size_bytes < KB:
            return f"{size_bytes} B"
        elif size_bytes < MB:
            return f"{size_bytes/KB:.2f} KB"
        elif size_bytes < GB:
            return f"{size_bytes/MB:.2f} MB"
        elif size_bytes < TB:
            return f"{size_bytes/GB:.2f} GB"
        else:
            return f"{size_bytes/TB:.2f} TB"
    
    def _create_folder_visualization(self, folder_name, subfolders, files_size, total_size):
        """Create visualization for folder analysis"""
        try:
            # Clear the figure
            self.fig.clear()
            
            # Create a pie chart
            ax = self.fig.add_subplot(111)
            
            # Prepare data for chart
            # Only include top 10 folders, then group the rest as "Other"
            labels = []
            sizes = []
            
            # Add top folders (up to 9)
            other_size = 0
            for i, (path, name, size) in enumerate(subfolders):
                if i < 9 and size > 0:
                    labels.append(name)
                    sizes.append(size)
                else:
                    other_size += size
            
            # Add "Files" if there are direct files
            if files_size > 0:
                labels.append("Files")
                sizes.append(files_size)
            
            # Add "Other" if there are more folders
            if other_size > 0:
                labels.append("Other")
                sizes.append(other_size)
            
            # Create color map
            colors = plt.cm.tab20.colors[:len(labels)]
            
            # Create pie chart
            wedges, texts, autotexts = ax.pie(sizes, labels=None, autopct='%1.1f%%', 
                                          startangle=90, colors=colors)
            
            # Equal aspect ratio
            ax.axis('equal')
            
            # Set title
            ax.set_title(f'Storage Analysis: {folder_name}')
            
            # Add a legend
            ax.legend(wedges, labels, title="Folders", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
            
            # Draw the updated chart
            self.canvas.draw()
            
        except Exception as e:
            self.log(f"Error creating visualization: {str(e)}", "error")
    
    def export_folder_analysis(self):
        """Export folder analysis results to a CSV file"""
        if not self.folder_results_tree.get_children():
            messagebox.showinfo("No Data", "There is no analysis data to export.")
            return
        
        # Ask for file location
        file_path = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
            title="Export Folder Analysis"
        )
        
        if not file_path:
            return  # User cancelled
        
        try:
            with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
                csv_writer = csv.writer(csvfile)
                
                # Write header
                csv_writer.writerow(["Folder", "Size", "Percentage"])
                
                # Write data
                root_item = self.folder_results_tree.get_children()[0]
                root_text = self.folder_results_tree.item(root_item, "text")
                root_values = self.folder_results_tree.item(root_item, "values")
                
                # Write root folder
                csv_writer.writerow([root_text, root_values[0], root_values[1]])
                
                # Write children
                for child_item in self.folder_results_tree.get_children(root_item):
                    child_text = self.folder_results_tree.item(child_item, "text")
                    child_values = self.folder_results_tree.item(child_item, "values")
                    csv_writer.writerow([f"  {child_text}", child_values[0], child_values[1]])
            
            self.log(f"Folder analysis exported to {file_path}", "success")
            self.update_status("Folder analysis exported")
            messagebox.showinfo("Export Complete", f"Folder analysis has been exported to:\n{file_path}")
            
        except Exception as e:
            self.log(f"Error exporting analysis: {str(e)}", "error")
            self.update_status("Error exporting analysis")
            messagebox.showerror("Export Error", f"Failed to export analysis: {str(e)}")
    
    def open_selected_folder(self):
        """Open the selected folder in Windows Explorer"""
        selected_items = self.folder_results_tree.selection()
        
        if not selected_items:
            messagebox.showinfo("No Selection", "Please select a folder to open.")
            return
        
        try:
            # Get the folder name
            item_text = self.folder_results_tree.item(selected_items[0], "text")
            
            # Get the full path
            parent_id = self.folder_results_tree.parent(selected_items[0])
            
            if parent_id:  # This is a subfolder
                # Get the path from the root item
                root_path = self.folder_path_var.get()
                folder_path = os.path.join(root_path, item_text)
            else:  # This is the root folder
                folder_path = self.folder_path_var.get()
            
            # Handle 'Files' special case
            if item_text == "Files":
                folder_path = self.folder_path_var.get()
            
            # Open the folder if it exists
            if os.path.exists(folder_path):
                os.startfile(folder_path)
                self.log(f"Opened folder: {folder_path}", "success")
            else:
                self.log(f"Cannot find folder: {folder_path}", "error")
                messagebox.showerror("Error", f"Cannot find folder: {folder_path}")
                
        except Exception as e:
            self.log(f"Error opening folder: {str(e)}", "error")
            self.update_status("Error opening folder")
            messagebox.showerror("Error", f"Failed to open folder: {str(e)}")
    
    def init_network_tab(self):
        """Initialize the Network tab with network tools"""
        frame = ttk.Frame(self.network_tab, style='Tab.TFrame', padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title with icon
        title_frame = ttk.Frame(frame, style='Tab.TFrame')
        title_frame.grid(column=0, row=0, columnspan=2, sticky=tk.W, pady=(0, 10))
        
        ttk.Label(
            title_frame, 
            text="Network Tools", 
            font=HEADING_FONT,
            foreground=PRIMARY_COLOR
        ).pack(side=tk.LEFT)
        
        # Network diagnostics frame
        diagnostics_frame = ttk.LabelFrame(frame, text="Network Diagnostics", padding=8, style='Group.TLabelframe')
        diagnostics_frame.grid(column=0, row=1, sticky=tk.NSEW, pady=5, padx=5)
        
        # Network diagnostics buttons
        self.create_button(diagnostics_frame, "Ping Test", 
                          lambda: self.run_ping_test(), 0, 0)
        
        self.create_button(diagnostics_frame, "Trace Route", 
                          lambda: self.run_traceroute(), 0, 1)
        
        self.create_button(diagnostics_frame, "DNS Lookup", 
                          lambda: self.run_dns_lookup(), 0, 2)
        
        # IP Configuration frame
        ipconfig_frame = ttk.LabelFrame(frame, text="IP Configuration", padding=8, style='Group.TLabelframe')
        ipconfig_frame.grid(column=0, row=2, sticky=tk.NSEW, pady=5, padx=5)
        
        # IP Configuration buttons
        self.create_button(ipconfig_frame, "Show IP Config", 
                          lambda: self.show_ip_config(), 0, 0)
        
        self.create_button(ipconfig_frame, "Release IP", 
                          lambda: self.release_ip(), 0, 1)
        
        self.create_button(ipconfig_frame, "Renew IP", 
                          lambda: self.renew_ip(), 0, 2)
        
        # Network reset frame
        reset_frame = ttk.LabelFrame(frame, text="Network Reset", padding=8, style='Group.TLabelframe')
        reset_frame.grid(column=0, row=3, sticky=tk.NSEW, pady=5, padx=5)
        
        # Network reset buttons
        self.create_button(reset_frame, "Reset Winsock", 
                          lambda: self.reset_winsock(), 0, 0)
        
        self.create_button(reset_frame, "Reset TCP/IP Stack", 
                          lambda: self.reset_tcpip(), 0, 1)
        
        self.create_button(reset_frame, "Flush DNS Cache", 
                          lambda: self.flush_dns(), 0, 2)
        
        # Network output frame - for displaying results
        output_frame = ttk.LabelFrame(frame, text="Network Output", padding=8, style='Group.TLabelframe')
        output_frame.grid(column=1, row=1, rowspan=3, sticky=tk.NSEW, padx=5, pady=5)
        
        # Output text widget
        self.network_output = scrolledtext.ScrolledText(output_frame, wrap=tk.WORD, height=20,
                                                     width=50, font=LOG_FONT)
        self.network_output.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.network_output.config(state=tk.DISABLED)
        
        # Configure grid weights
        frame.columnconfigure(0, weight=1)
        frame.columnconfigure(1, weight=2)
        for i in range(1, 4):
            frame.rowconfigure(i, weight=1)
        
        # Initialize with local IP information
        self.root.after(500, self.show_ip_config)
    
    def run_ping_test(self):
        """Run a ping test to a specified host"""
        self.log("Preparing to run ping test...")
        self.update_status("Preparing to run ping test...")
        
        # Ask for host
        host = simpledialog.askstring("Ping Test", "Enter hostname or IP address to ping:", 
                                     initialvalue="google.com")
        if not host:
            return
        
        # Clear the network output
        self.clear_network_output()
        self.update_network_output(f"Pinging {host}...\n")
        
        # Start ping in a thread
        ping_thread = Thread(target=self._run_ping_test_thread, args=(host,))
        ping_thread.daemon = True
        ping_thread.start()
    
    def _run_ping_test_thread(self, host):
        """Thread to run ping test"""
        try:
            # Run ping command
            cmd = ["ping", "-n", "4", host]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                     text=True, creationflags=subprocess.CREATE_NO_WINDOW)
            
            stdout, stderr = process.communicate()
            
            if stderr:
                self.root.after(0, lambda: self.update_network_output(f"Error: {stderr}"))
                self.root.after(0, lambda: self.log(f"Ping error: {stderr}", "error"))
            else:
                self.root.after(0, lambda: self.update_network_output(stdout))
                self.root.after(0, lambda: self.log("Ping test completed", "success"))
            
            self.root.after(0, lambda: self.update_status("Ping test completed"))
            
        except Exception as e:
            error_msg = f"Error performing ping test: {str(e)}"
            self.root.after(0, lambda: self.update_network_output(f"Error: {error_msg}"))
            self.root.after(0, lambda: self.log(error_msg, "error"))
            self.root.after(0, lambda: self.update_status("Ping test failed"))
    
    def run_traceroute(self):
        """Run a traceroute to a specified host"""
        self.log("Preparing to run traceroute...")
        self.update_status("Preparing to run traceroute...")
        
        # Ask for host
        host = simpledialog.askstring("Traceroute", "Enter hostname or IP address to trace:", 
                                    initialvalue="google.com")
        if not host:
            return
        
        # Clear the network output
        self.clear_network_output()
        self.update_network_output(f"Tracing route to {host}...\n")
        
        # Start traceroute in a thread
        trace_thread = Thread(target=self._run_traceroute_thread, args=(host,))
        trace_thread.daemon = True
        trace_thread.start()
    
    def _run_traceroute_thread(self, host):
        """Thread to run traceroute"""
        try:
            # Run tracert command
            cmd = ["tracert", host]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                     text=True, creationflags=subprocess.CREATE_NO_WINDOW)
            
            # Stream the output
            while True:
                line = process.stdout.readline()
                if not line and process.poll() is not None:
                    break
                if line:
                    self.root.after(0, lambda l=line: self.update_network_output(l))
            
            stderr = process.stderr.read()
            if stderr:
                self.root.after(0, lambda: self.update_network_output(f"Error: {stderr}"))
                self.root.after(0, lambda: self.log(f"Traceroute error: {stderr}", "error"))
            else:
                self.root.after(0, lambda: self.log("Traceroute completed", "success"))
            
            self.root.after(0, lambda: self.update_status("Traceroute completed"))
            
        except Exception as e:
            error_msg = f"Error performing traceroute: {str(e)}"
            self.root.after(0, lambda: self.update_network_output(f"Error: {error_msg}"))
            self.root.after(0, lambda: self.log(error_msg, "error"))
            self.root.after(0, lambda: self.update_status("Traceroute failed"))
    
    def run_dns_lookup(self):
        """Run a DNS lookup for a hostname"""
        self.log("Preparing to run DNS lookup...")
        self.update_status("Preparing to run DNS lookup...")
        
        # Ask for host
        host = simpledialog.askstring("DNS Lookup", "Enter hostname to lookup:", 
                                     initialvalue="google.com")
        if not host:
            return
        
        # Clear the network output
        self.clear_network_output()
        self.update_network_output(f"Looking up DNS for {host}...\n")
        
        # Start DNS lookup in a thread
        dns_thread = Thread(target=self._run_dns_lookup_thread, args=(host,))
        dns_thread.daemon = True
        dns_thread.start()
    
    def _run_dns_lookup_thread(self, host):
        """Thread to run DNS lookup"""
        try:
            # Run nslookup command
            cmd = ["nslookup", host]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                     text=True, creationflags=subprocess.CREATE_NO_WINDOW)
            
            stdout, stderr = process.communicate()
            
            if stderr:
                self.root.after(0, lambda: self.update_network_output(f"Error: {stderr}"))
                self.root.after(0, lambda: self.log(f"DNS lookup error: {stderr}", "error"))
            else:
                self.root.after(0, lambda: self.update_network_output(stdout))
                self.root.after(0, lambda: self.log("DNS lookup completed", "success"))
            
            self.root.after(0, lambda: self.update_status("DNS lookup completed"))
            
            # Try to get detailed IP information
            try:
                ip_addresses = []
                for line in stdout.splitlines():
                    line = line.strip()
                    if line and "Address:" in line and not ":" in line.split("Address:")[1].strip():
                        ip = line.split("Address:")[1].strip()
                        if ip not in ["127.0.0.1", "::1"] and not ip.startswith("192.168.") and not ip.startswith("10."):
                            ip_addresses.append(ip)
                
                if ip_addresses:
                    self.root.after(0, lambda: self.update_network_output("\n\nDetailed IP Information:\n"))
                    # Get information about the first IP
                    try:
                        # Try to get geographic information using a Python socket
                        import socket
                        hostname, aliaslist, ipaddrlist = socket.gethostbyaddr(ip_addresses[0])
                        self.root.after(0, lambda: self.update_network_output(f"Hostname: {hostname}\n"))
                    except:
                        pass
            except:
                # Ignore errors in the additional info section
                pass
            
        except Exception as e:
            error_msg = f"Error performing DNS lookup: {str(e)}"
            self.root.after(0, lambda: self.update_network_output(f"Error: {error_msg}"))
            self.root.after(0, lambda: self.log(error_msg, "error"))
            self.root.after(0, lambda: self.update_status("DNS lookup failed"))
    
    def show_ip_config(self):
        """Display IP configuration information"""
        self.log("Retrieving IP configuration...")
        self.update_status("Retrieving IP configuration...")
        
        # Clear the network output
        self.clear_network_output()
        self.update_network_output("Retrieving IP configuration...\n")
        
        # Start IP config retrieval in a thread
        ipconfig_thread = Thread(target=self._show_ip_config_thread)
        ipconfig_thread.daemon = True
        ipconfig_thread.start()
    
    def _show_ip_config_thread(self):
        """Thread to retrieve IP configuration"""
        try:
            # Run ipconfig command
            cmd = ["ipconfig", "/all"]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                     text=True, creationflags=subprocess.CREATE_NO_WINDOW)
            
            stdout, stderr = process.communicate()
            
            if stderr:
                self.root.after(0, lambda: self.update_network_output(f"Error: {stderr}"))
                self.root.after(0, lambda: self.log(f"IP config error: {stderr}", "error"))
            else:
                self.root.after(0, lambda: self.update_network_output(stdout))
                self.root.after(0, lambda: self.log("IP configuration retrieved", "success"))
                
                # Also try to get external IP
                try:
                    self.root.after(0, lambda: self.update_network_output("\n\nExternal IP Information:\n"))
                    external_ip_thread = Thread(target=self._get_external_ip)
                    external_ip_thread.daemon = True
                    external_ip_thread.start()
                except:
                    pass
            
            self.root.after(0, lambda: self.update_status("IP configuration retrieved"))
            
        except Exception as e:
            error_msg = f"Error retrieving IP configuration: {str(e)}"
            self.root.after(0, lambda: self.update_network_output(f"Error: {error_msg}"))
            self.root.after(0, lambda: self.log(error_msg, "error"))
            self.root.after(0, lambda: self.update_status("IP configuration retrieval failed"))
    
    def _get_external_ip(self):
        """Get external IP address"""
        try:
            # There are multiple services we can try
            urls = [
                "https://api.ipify.org",
                "https://ifconfig.me/ip",
                "https://icanhazip.com",
                "http://checkip.dyndns.org"
            ]
            
            import urllib.request
            import re
            
            for url in urls:
                try:
                    response = urllib.request.urlopen(url, timeout=3)
                    data = response.read().decode('utf-8')
                    
                    # Extract IP (needed for some services that return HTML)
                    if "<body>" in data:
                        # For services that return HTML
                        ip_match = re.search(r'\d+\.\d+\.\d+\.\d+', data)
                        if ip_match:
                            external_ip = ip_match.group(0)
                            self.root.after(0, lambda: self.update_network_output(f"External IP: {external_ip}\n"))
                            return
                    else:
                        # For services that return just the IP
                        external_ip = data.strip()
                        self.root.after(0, lambda: self.update_network_output(f"External IP: {external_ip}\n"))
                        return
                except:
                    continue
            
            self.root.after(0, lambda: self.update_network_output("Could not determine external IP\n"))
            
        except Exception as e:
            self.root.after(0, lambda: self.update_network_output(f"Error getting external IP: {str(e)}\n"))
    
    def release_ip(self):
        """Release IP address"""
        self.log("Preparing to release IP address...")
        self.update_status("Preparing to release IP address...")
        
        # Check for admin rights
        if not self.check_admin_rights("Releasing IP address"):
            return
        
        # Confirm with user
        if not messagebox.askyesno("Confirm Release", 
                                "This will release your current IP address.\n\n"
                                "You will temporarily lose network connectivity.\n\n"
                                "Do you want to continue?"):
            self.log("IP release cancelled by user", "info")
            return
        
        # Clear the network output
        self.clear_network_output()
        self.update_network_output("Releasing IP address...\n")
        
        # Start IP release in a thread
        release_thread = Thread(target=self._release_ip_thread)
        release_thread.daemon = True
        release_thread.start()
    
    def _release_ip_thread(self):
        """Thread to release IP address"""
        try:
            # Run ipconfig /release command
            cmd = ["ipconfig", "/release"]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                     text=True, creationflags=subprocess.CREATE_NO_WINDOW)
            
            stdout, stderr = process.communicate()
            
            if stderr:
                self.root.after(0, lambda: self.update_network_output(f"Error: {stderr}"))
                self.root.after(0, lambda: self.log(f"IP release error: {stderr}", "error"))
            else:
                self.root.after(0, lambda: self.update_network_output("IP address released successfully.\n"))
                self.root.after(0, lambda: self.log("IP address released successfully", "success"))
            
            self.root.after(0, lambda: self.update_status("IP address released"))
            
        except Exception as e:
            error_msg = f"Error releasing IP address: {str(e)}"
            self.root.after(0, lambda: self.update_network_output(f"Error: {error_msg}"))
            self.root.after(0, lambda: self.log(error_msg, "error"))
            self.root.after(0, lambda: self.update_status("IP release failed"))
    
    def renew_ip(self):
        """Renew IP address"""
        self.log("Preparing to renew IP address...")
        self.update_status("Preparing to renew IP address...")
        
        # Check for admin rights
        if not self.check_admin_rights("Renewing IP address"):
            return
        
        # Clear the network output
        self.clear_network_output()
        self.update_network_output("Renewing IP address...\n")
        
        # Start IP renew in a thread
        renew_thread = Thread(target=self._renew_ip_thread)
        renew_thread.daemon = True
        renew_thread.start()
    
    def _renew_ip_thread(self):
        """Thread to renew IP address"""
        try:
            # Run ipconfig /renew command
            cmd = ["ipconfig", "/renew"]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                     text=True, creationflags=subprocess.CREATE_NO_WINDOW)
            
            stdout, stderr = process.communicate()
            
            if stderr:
                self.root.after(0, lambda: self.update_network_output(f"Error: {stderr}"))
                self.root.after(0, lambda: self.log(f"IP renew error: {stderr}", "error"))
            else:
                self.root.after(0, lambda: self.update_network_output("IP address renewed successfully.\n"))
                self.root.after(0, lambda: self.log("IP address renewed successfully", "success"))
                
                # Show the new IP configuration
                self.root.after(0, lambda: self.update_network_output("\nNew IP Configuration:\n"))
                self.root.after(0, self._show_ip_config_thread)
            
            self.root.after(0, lambda: self.update_status("IP address renewed"))
            
        except Exception as e:
            error_msg = f"Error renewing IP address: {str(e)}"
            self.root.after(0, lambda: self.update_network_output(f"Error: {error_msg}"))
            self.root.after(0, lambda: self.log(error_msg, "error"))
            self.root.after(0, lambda: self.update_status("IP renew failed"))
    
    def reset_winsock(self):
        """Reset Winsock catalog"""
        self.log("Preparing to reset Winsock...")
        self.update_status("Preparing to reset Winsock...")
        
        # Check for admin rights
        if not self.check_admin_rights("Resetting Winsock"):
            return
        
        # Confirm with user
        if not messagebox.askyesno("Confirm Reset", 
                                "This will reset the Winsock catalog.\n\n"
                                "This action will restore network settings to default and might fix network issues.\n\n"
                                "A system restart may be required afterward.\n\n"
                                "Do you want to continue?"):
            self.log("Winsock reset cancelled by user", "info")
            return
        
        # Clear the network output
        self.clear_network_output()
        self.update_network_output("Resetting Winsock catalog...\n")
        
        # Start Winsock reset in a thread
        winsock_thread = Thread(target=self._reset_winsock_thread)
        winsock_thread.daemon = True
        winsock_thread.start()
    
    def _reset_winsock_thread(self):
        """Thread to reset Winsock catalog"""
        try:
            # Run netsh winsock reset command
            cmd = ["netsh", "winsock", "reset"]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                     text=True, creationflags=subprocess.CREATE_NO_WINDOW)
            
            stdout, stderr = process.communicate()
            
            if stderr:
                self.root.after(0, lambda: self.update_network_output(f"Error: {stderr}"))
                self.root.after(0, lambda: self.log(f"Winsock reset error: {stderr}", "error"))
            else:
                self.root.after(0, lambda: self.update_network_output(stdout or "Winsock catalog has been reset.\n"))
                self.root.after(0, lambda: self.update_network_output("\nA system restart may be required for the changes to take effect.\n"))
                self.root.after(0, lambda: self.log("Winsock catalog reset successfully", "success"))
                
                # Ask if user wants to restart now
                self.root.after(0, lambda: self._ask_for_restart("Winsock Reset", 
                                                              "The Winsock catalog has been reset successfully.\n\n"
                                                              "A system restart is recommended for the changes to take effect.\n\n"
                                                              "Do you want to restart now?"))
            
            self.root.after(0, lambda: self.update_status("Winsock reset completed"))
            
        except Exception as e:
            error_msg = f"Error resetting Winsock catalog: {str(e)}"
            self.root.after(0, lambda: self.update_network_output(f"Error: {error_msg}"))
            self.root.after(0, lambda: self.log(error_msg, "error"))
            self.root.after(0, lambda: self.update_status("Winsock reset failed"))
    
    def reset_tcpip(self):
        """Reset TCP/IP stack"""
        self.log("Preparing to reset TCP/IP stack...")
        self.update_status("Preparing to reset TCP/IP stack...")
        
        # Check for admin rights
        if not self.check_admin_rights("Resetting TCP/IP stack"):
            return
        
        # Confirm with user
        if not messagebox.askyesno("Confirm Reset", 
                                "This will reset the TCP/IP stack to its original state.\n\n"
                                "This action will restore network settings to default and might fix connection issues.\n\n"
                                "A system restart may be required afterward.\n\n"
                                "Do you want to continue?"):
            self.log("TCP/IP reset cancelled by user", "info")
            return
        
        # Clear the network output
        self.clear_network_output()
        self.update_network_output("Resetting TCP/IP stack...\n")
        
        # Start TCP/IP reset in a thread
        tcpip_thread = Thread(target=self._reset_tcpip_thread)
        tcpip_thread.daemon = True
        tcpip_thread.start()
    
    def _reset_tcpip_thread(self):
        """Thread to reset TCP/IP stack"""
        try:
            # Run netsh int ip reset command
            cmd = ["netsh", "int", "ip", "reset"]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                     text=True, creationflags=subprocess.CREATE_NO_WINDOW)
            
            stdout, stderr = process.communicate()
            
            if stderr:
                self.root.after(0, lambda: self.update_network_output(f"Error: {stderr}"))
                self.root.after(0, lambda: self.log(f"TCP/IP reset error: {stderr}", "error"))
            else:
                self.root.after(0, lambda: self.update_network_output(stdout or "TCP/IP stack has been reset.\n"))
                self.root.after(0, lambda: self.update_network_output("\nA system restart may be required for the changes to take effect.\n"))
                self.root.after(0, lambda: self.log("TCP/IP stack reset successfully", "success"))
                
                # Ask if user wants to restart now
                self.root.after(0, lambda: self._ask_for_restart("TCP/IP Reset", 
                                                              "The TCP/IP stack has been reset successfully.\n\n"
                                                              "A system restart is recommended for the changes to take effect.\n\n"
                                                              "Do you want to restart now?"))
            
            self.root.after(0, lambda: self.update_status("TCP/IP reset completed"))
            
        except Exception as e:
            error_msg = f"Error resetting TCP/IP stack: {str(e)}"
            self.root.after(0, lambda: self.update_network_output(f"Error: {error_msg}"))
            self.root.after(0, lambda: self.log(error_msg, "error"))
            self.root.after(0, lambda: self.update_status("TCP/IP reset failed"))
    
    def flush_dns(self):
        """Flush DNS resolver cache"""
        self.log("Flushing DNS resolver cache...")
        self.update_status("Flushing DNS resolver cache...")
        
        # Check for admin rights
        if not self.check_admin_rights("Flushing DNS cache"):
            return
        
        # Clear the network output
        self.clear_network_output()
        self.update_network_output("Flushing DNS resolver cache...\n")
        
        # Start DNS flush in a thread
        dns_thread = Thread(target=self._flush_dns_thread)
        dns_thread.daemon = True
        dns_thread.start()
    
    def _flush_dns_thread(self):
        """Thread to flush DNS resolver cache"""
        try:
            # Run ipconfig /flushdns command
            cmd = ["ipconfig", "/flushdns"]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                     text=True, creationflags=subprocess.CREATE_NO_WINDOW)
            
            stdout, stderr = process.communicate()
            
            if stderr:
                self.root.after(0, lambda: self.update_network_output(f"Error: {stderr}"))
                self.root.after(0, lambda: self.log(f"DNS flush error: {stderr}", "error"))
            else:
                self.root.after(0, lambda: self.update_network_output(stdout or "DNS resolver cache has been flushed.\n"))
                self.root.after(0, lambda: self.log("DNS resolver cache flushed successfully", "success"))
            
            self.root.after(0, lambda: self.update_status("DNS cache flushed"))
            
        except Exception as e:
            error_msg = f"Error flushing DNS cache: {str(e)}"
            self.root.after(0, lambda: self.update_network_output(f"Error: {error_msg}"))
            self.root.after(0, lambda: self.log(error_msg, "error"))
            self.root.after(0, lambda: self.update_status("DNS flush failed"))
    
    def clear_network_output(self):
        """Clear the network output text widget"""
        self.network_output.config(state=tk.NORMAL)
        self.network_output.delete(1.0, tk.END)
        self.network_output.config(state=tk.DISABLED)
    
    def update_network_output(self, text):
        """Update the network output text widget"""
        self.network_output.config(state=tk.NORMAL)
        self.network_output.insert(tk.END, text)
        self.network_output.see(tk.END)
        self.network_output.config(state=tk.DISABLED)
    
    def _ask_for_restart(self, title, message):
        """Ask if user wants to restart the computer"""
        if messagebox.askyesno(title, message):
            self.log("System restart initiated", "info")
            self.update_status("Restarting system...")
            
            # Give the user a few seconds before restarting
            for i in range(5, 0, -1):
                self.update_status(f"Restarting in {i} seconds...")
                time.sleep(1)
            
            # Restart the system
            subprocess.Popen(
                ["shutdown", "/r", "/t", "0"],
                creationflags=subprocess.CREATE_NO_WINDOW
            )

    def init_hyperv_tab(self):
        """Initialize the Hyper-V tab with management controls"""
        frame = ttk.Frame(self.hyperv_tab, style='Tab.TFrame', padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title with icon
        title_frame = ttk.Frame(frame, style='Tab.TFrame')
        title_frame.grid(column=0, row=0, columnspan=2, sticky=tk.W, pady=(0, 10))
        
        ttk.Label(
            title_frame, 
            text="Hyper-V Management", 
            font=HEADING_FONT,
            foreground=PRIMARY_COLOR
        ).pack(side=tk.LEFT)
        
        # Hyper-V status frame
        status_frame = ttk.LabelFrame(frame, text="Hyper-V Status", padding=8, style='Group.TLabelframe')
        status_frame.grid(column=0, row=1, sticky=tk.NSEW, pady=5, padx=5)
        
        # Status indicator
        self.hyperv_status_var = tk.StringVar(value="Checking Hyper-V status...")
        self.hyperv_status_label = ttk.Label(status_frame, textvariable=self.hyperv_status_var)
        self.hyperv_status_label.grid(column=0, row=0, columnspan=2, sticky=tk.W, padx=5, pady=5)
        
        # Refresh status button
        self.create_button(status_frame, "Refresh Status", 
                          lambda: self.check_hyperv_status(), 0, 1)
        
        # Hyper-V controls frame
        controls_frame = ttk.LabelFrame(frame, text="Hyper-V Controls", padding=8, style='Group.TLabelframe')
        controls_frame.grid(column=0, row=2, sticky=tk.NSEW, pady=5, padx=5)
        
        # Hyper-V control buttons
        self.hyperv_enable_button = self.create_button(controls_frame, "Enable Hyper-V", 
                                                     lambda: self.enable_hyperv(), 0, 0)
        
        self.hyperv_disable_button = self.create_button(controls_frame, "Disable Hyper-V", 
                                                      lambda: self.disable_hyperv(), 0, 1)
        
        self.create_button(controls_frame, "Open Hyper-V Manager", 
                          lambda: self.open_hyperv_manager(), 0, 2)
        
        # Hyper-V information frame
        info_frame = ttk.LabelFrame(frame, text="Virtual Machines", padding=8, style='Group.TLabelframe')
        info_frame.grid(column=1, row=1, rowspan=2, sticky=tk.NSEW, padx=5, pady=5)
        
        # VM list with scrollbar
        self.vm_listbox = tk.Listbox(info_frame, height=10)
        self.vm_listbox.grid(column=0, row=0, sticky=tk.NSEW, padx=5, pady=5)
        
        vm_scrollbar = ttk.Scrollbar(info_frame, orient="vertical", command=self.vm_listbox.yview)
        vm_scrollbar.grid(column=1, row=0, sticky=tk.NS, pady=5)
        self.vm_listbox.config(yscrollcommand=vm_scrollbar.set)
        
        # VM control buttons
        vm_control_frame = ttk.Frame(info_frame)
        vm_control_frame.grid(column=0, row=1, columnspan=2, sticky=tk.EW, pady=5)
        
        self.create_button(vm_control_frame, "Start VM", lambda: self.start_vm(), 0, 0)
        self.create_button(vm_control_frame, "Stop VM", lambda: self.stop_vm(), 1, 0)
        self.create_button(vm_control_frame, "Refresh VMs", lambda: self.refresh_vms(), 2, 0)
        
        # Configure grid weights
        frame.columnconfigure(0, weight=1)
        frame.columnconfigure(1, weight=1)
        frame.rowconfigure(1, weight=1)
        frame.rowconfigure(2, weight=1)
        
        # Set up VM list area
        info_frame.columnconfigure(0, weight=1)
        info_frame.rowconfigure(0, weight=1)
        
        # Check Hyper-V status initially
        self.check_hyperv_status()
    
    def check_hyperv_status(self):
        """Check if Hyper-V is enabled"""
        self.log("Checking Hyper-V status...")
        self.update_status("Checking Hyper-V status...")
        
        # Start in a thread
        status_thread = Thread(target=self._check_hyperv_status_thread)
        status_thread.daemon = True
        status_thread.start()
    
    def _check_hyperv_status_thread(self):
        """Thread to check Hyper-V status"""
        try:
            # Check if Hyper-V is enabled using PowerShell
            self.root.after(0, lambda: self.hyperv_status_var.set("Checking Hyper-V status..."))
            
            # Check if Hyper-V feature is installed
            ps_command = [
                "powershell",
                "-Command",
                "(Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online).State"
            ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=20)
            
            is_enabled = False
            if process.returncode == 0 and stdout.strip():
                state = stdout.strip()
                is_enabled = state == "Enabled"
                
                if is_enabled:
                    status_text = "Hyper-V is enabled on this system."
                    self.root.after(0, lambda: self.hyperv_status_var.set(status_text))
                    self.root.after(0, lambda: self.hyperv_status_label.config(foreground="green"))
                    self.root.after(0, lambda: self.hyperv_enable_button.config(state=tk.DISABLED))
                    self.root.after(0, lambda: self.hyperv_disable_button.config(state=tk.NORMAL))
                    
                    # Also check Hyper-V service
                    self._check_hyperv_service()
                    
                    # Refresh VMs
                    self.refresh_vms()
                else:
                    status_text = "Hyper-V is not enabled on this system."
                    self.root.after(0, lambda: self.hyperv_status_var.set(status_text))
                    self.root.after(0, lambda: self.hyperv_status_label.config(foreground="red"))
                    self.root.after(0, lambda: self.hyperv_enable_button.config(state=tk.NORMAL))
                    self.root.after(0, lambda: self.hyperv_disable_button.config(state=tk.DISABLED))
                    
                    # Clear VM list
                    self.root.after(0, lambda: self.vm_listbox.delete(0, tk.END))
                    self.root.after(0, lambda: self.vm_listbox.insert(tk.END, "Hyper-V is not enabled."))
            else:
                status_text = "Error checking Hyper-V status."
                self.root.after(0, lambda: self.hyperv_status_var.set(status_text))
                self.root.after(0, lambda: self.hyperv_status_label.config(foreground="orange"))
                self.root.after(0, lambda: self.log(f"Error checking Hyper-V status: {stderr}", "error"))
            
            self.root.after(0, lambda: self.log(f"Hyper-V status: {is_enabled}", "info"))
            self.root.after(0, lambda: self.update_status("Hyper-V status checked"))
            
        except Exception as e:
            error_msg = f"Error checking Hyper-V status: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error checking Hyper-V status"))
            self.root.after(0, lambda: self.hyperv_status_var.set("Error checking Hyper-V status"))
    
    def _check_hyperv_service(self):
        """Check Hyper-V service status"""
        try:
            # Check Hyper-V Virtual Machine Management service status
            ps_command = [
                "powershell",
                "-Command",
                "(Get-Service -Name 'vmms').Status"
            ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=10)
            
            if process.returncode == 0 and stdout.strip():
                service_status = stdout.strip()
                current_status = self.hyperv_status_var.get()
                
                # Update the status text with service info
                self.root.after(0, lambda s=service_status: 
                           self.hyperv_status_var.set(f"{current_status}\nService status: {s}"))
                
        except Exception as e:
            self.root.after(0, lambda: self.log(f"Error checking Hyper-V service: {str(e)}", "warning"))
    
    def enable_hyperv(self):
        """Enable Hyper-V feature"""
        self.log("Preparing to enable Hyper-V...")
        self.update_status("Preparing to enable Hyper-V...")
        
        # Check for admin rights
        if not self.check_admin_rights("Enabling Hyper-V"):
            return
        
        # Confirm with user
        if not messagebox.askyesno("Confirm Enable Hyper-V", 
                                 "This will enable the Hyper-V feature on your system.\n\n"
                                 "Your computer will need to restart to complete this action.\n\n"
                                 "Do you want to continue?"):
            self.log("Hyper-V enable cancelled by user", "info")
            return
        
        # Start in a thread
        enable_thread = Thread(target=self._enable_hyperv_thread)
        enable_thread.daemon = True
        enable_thread.start()
    
    def _enable_hyperv_thread(self):
        """Thread to enable Hyper-V"""
        try:
            self.root.after(0, lambda: self.log("Enabling Hyper-V feature..."))
            self.root.after(0, lambda: self.update_status("Enabling Hyper-V feature..."))
            
            # Enable Hyper-V using DISM
            process = subprocess.Popen(
                ["powershell", "-Command", 
                 "Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -NoRestart"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=300)  # Allow up to 5 minutes
            
            if process.returncode == 0:
                self.root.after(0, lambda: self.log("Hyper-V feature enabled successfully", "success"))
                self.root.after(0, lambda: self.update_status("Hyper-V feature enabled"))
                
                self.root.after(0, lambda: self.hyperv_status_var.set(
                    "Hyper-V has been enabled. A system restart is required to complete the process."))
                
                # Ask if user wants to restart now
                if messagebox.askyesno("Restart Required", 
                                     "Hyper-V has been enabled. A system restart is required to complete the process.\n\n"
                                     "Do you want to restart now?"):
                    self.root.after(0, lambda: self.log("Restarting system..."))
                    self.root.after(0, lambda: self.update_status("Restarting system..."))
                    
                    # Give the user a few seconds before restarting
                    for i in range(5, 0, -1):
                        self.root.after(0, lambda c=i: self.update_status(f"Restarting in {c} seconds..."))
                        time.sleep(1)
                    
                    # Restart the system
                    subprocess.Popen(
                        ["shutdown", "/r", "/t", "0"],
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
            else:
                self.root.after(0, lambda: self.log(f"Error enabling Hyper-V: {stderr}", "error"))
                self.root.after(0, lambda: self.update_status("Error enabling Hyper-V"))
                self.root.after(0, lambda: self.hyperv_status_var.set("Error enabling Hyper-V"))
                self.root.after(0, lambda: messagebox.showerror("Error", f"Failed to enable Hyper-V:\n\n{stderr}"))
            
        except Exception as e:
            error_msg = f"Error enabling Hyper-V: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error enabling Hyper-V"))
            self.root.after(0, lambda: self.hyperv_status_var.set("Error enabling Hyper-V"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))
    
    def disable_hyperv(self):
        """Disable Hyper-V feature"""
        self.log("Preparing to disable Hyper-V...")
        self.update_status("Preparing to disable Hyper-V...")
        
        # Check for admin rights
        if not self.check_admin_rights("Disabling Hyper-V"):
            return
        
        # Confirm with user
        if not messagebox.askyesno("Confirm Disable Hyper-V", 
                                 "This will disable the Hyper-V feature on your system.\n\n"
                                 "Your computer will need to restart to complete this action.\n\n"
                                 "Do you want to continue?"):
            self.log("Hyper-V disable cancelled by user", "info")
            return
        
        # Start in a thread
        disable_thread = Thread(target=self._disable_hyperv_thread)
        disable_thread.daemon = True
        disable_thread.start()
    
    def _disable_hyperv_thread(self):
        """Thread to disable Hyper-V"""
        try:
            self.root.after(0, lambda: self.log("Disabling Hyper-V feature..."))
            self.root.after(0, lambda: self.update_status("Disabling Hyper-V feature..."))
            
            # Disable Hyper-V using DISM
            process = subprocess.Popen(
                ["powershell", "-Command", 
                 "Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -NoRestart"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=300)  # Allow up to 5 minutes
            
            if process.returncode == 0:
                self.root.after(0, lambda: self.log("Hyper-V feature disabled successfully", "success"))
                self.root.after(0, lambda: self.update_status("Hyper-V feature disabled"))
                
                self.root.after(0, lambda: self.hyperv_status_var.set(
                    "Hyper-V has been disabled. A system restart is required to complete the process."))
                
                # Ask if user wants to restart now
                if messagebox.askyesno("Restart Required", 
                                     "Hyper-V has been disabled. A system restart is required to complete the process.\n\n"
                                     "Do you want to restart now?"):
                    self.root.after(0, lambda: self.log("Restarting system..."))
                    self.root.after(0, lambda: self.update_status("Restarting system..."))
                    
                    # Give the user a few seconds before restarting
                    for i in range(5, 0, -1):
                        self.root.after(0, lambda c=i: self.update_status(f"Restarting in {c} seconds..."))
                        time.sleep(1)
                    
                    # Restart the system
                    subprocess.Popen(
                        ["shutdown", "/r", "/t", "0"],
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
            else:
                self.root.after(0, lambda: self.log(f"Error disabling Hyper-V: {stderr}", "error"))
                self.root.after(0, lambda: self.update_status("Error disabling Hyper-V"))
                self.root.after(0, lambda: self.hyperv_status_var.set("Error disabling Hyper-V"))
                self.root.after(0, lambda: messagebox.showerror("Error", f"Failed to disable Hyper-V:\n\n{stderr}"))
            
        except Exception as e:
            error_msg = f"Error disabling Hyper-V: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error disabling Hyper-V"))
            self.root.after(0, lambda: self.hyperv_status_var.set("Error disabling Hyper-V"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))
    
    def open_hyperv_manager(self):
        """Open Hyper-V Manager"""
        self.log("Opening Hyper-V Manager...")
        self.update_status("Opening Hyper-V Manager...")
        
        try:
            # Try to open Hyper-V Manager
            subprocess.Popen("virtmgmt.msc", creationflags=subprocess.CREATE_NO_WINDOW)
            self.log("Hyper-V Manager opened successfully", "success")
            
        except Exception as e:
            self.log(f"Error opening Hyper-V Manager: {str(e)}", "error")
            self.update_status("Error opening Hyper-V Manager")
            messagebox.showerror("Error", f"Failed to open Hyper-V Manager. Make sure Hyper-V is enabled.")
    
    def refresh_vms(self):
        """Refresh the list of virtual machines"""
        self.log("Refreshing virtual machines list...")
        self.update_status("Refreshing virtual machines list...")
        
        # Start in a thread
        vm_thread = Thread(target=self._refresh_vms_thread)
        vm_thread.daemon = True
        vm_thread.start()
    
    def _refresh_vms_thread(self):
        """Thread to refresh VM list"""
        try:
            # Clear the VM list
            self.root.after(0, lambda: self.vm_listbox.delete(0, tk.END))
            
            # Check if Hyper-V is enabled
            ps_check_command = [
                "powershell",
                "-Command",
                "(Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online).State"
            ]
            
            check_process = subprocess.Popen(
                ps_check_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            check_stdout, check_stderr = check_process.communicate(timeout=20)
            
            if check_process.returncode != 0 or check_stdout.strip() != "Enabled":
                self.root.after(0, lambda: self.vm_listbox.insert(tk.END, "Hyper-V is not enabled."))
                return
            
            # Get list of VMs
            ps_command = [
                "powershell",
                "-Command",
                "Get-VM | Select-Object -Property Name, State | Format-Table -HideTableHeaders | Out-String -Width 1000"
            ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=20)
            
            if process.returncode == 0 and stdout.strip():
                # Process the VM list
                vm_lines = stdout.strip().split('\n')
                vm_lines = [line.strip() for line in vm_lines if line.strip()]
                
                if vm_lines:
                    for line in vm_lines:
                        self.root.after(0, lambda l=line: self.vm_listbox.insert(tk.END, l))
                else:
                    self.root.after(0, lambda: self.vm_listbox.insert(tk.END, "No virtual machines found."))
                    
                self.root.after(0, lambda: self.log("Virtual machines list refreshed", "success"))
            else:
                if "ObjectNotFound" in stderr:
                    self.root.after(0, lambda: self.vm_listbox.insert(tk.END, "No virtual machines found."))
                    self.root.after(0, lambda: self.log("No virtual machines found", "info"))
                else:
                    self.root.after(0, lambda: self.vm_listbox.insert(tk.END, "Error listing virtual machines."))
                    self.root.after(0, lambda: self.log(f"Error listing virtual machines: {stderr}", "error"))
            
            self.root.after(0, lambda: self.update_status("VM list refreshed"))
            
        except Exception as e:
            error_msg = f"Error refreshing VMs: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error refreshing VMs"))
            self.root.after(0, lambda: self.vm_listbox.insert(tk.END, "Error listing virtual machines."))
    
    def start_vm(self):
        """Start the selected virtual machine"""
        selected = self.vm_listbox.curselection()
        
        if not selected:
            messagebox.showinfo("No Selection", "Please select a virtual machine to start.")
            return
        
        # Get the VM name from the selected item
        vm_text = self.vm_listbox.get(selected[0])
        if "Hyper-V is not enabled" in vm_text or "No virtual machines found" in vm_text or "Error" in vm_text:
            messagebox.showinfo("No VM", "No valid virtual machine selected.")
            return
        
        # Extract the VM name (assume format is "VM_NAME Running/Off/etc")
        vm_name = vm_text.split(" ")[0]
        
        self.log(f"Starting virtual machine: {vm_name}...")
        self.update_status(f"Starting virtual machine: {vm_name}...")
        
        # Start VM in a thread
        start_thread = Thread(target=self._start_vm_thread, args=(vm_name,))
        start_thread.daemon = True
        start_thread.start()
    
    def _start_vm_thread(self, vm_name):
        """Thread to start a VM"""
        try:
            # Start the VM
            ps_command = [
                "powershell",
                "-Command",
                f"Start-VM -Name '{vm_name}'"
            ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=30)
            
            if process.returncode == 0:
                self.root.after(0, lambda: self.log(f"Virtual machine '{vm_name}' started successfully", "success"))
                self.root.after(0, lambda: self.update_status(f"Virtual machine '{vm_name}' started"))
                
                # Refresh the VM list after a short delay
                time.sleep(2)
                self.root.after(0, self.refresh_vms)
            else:
                self.root.after(0, lambda: self.log(f"Error starting VM '{vm_name}': {stderr}", "error"))
                self.root.after(0, lambda: self.update_status(f"Error starting VM '{vm_name}'"))
                self.root.after(0, lambda e=stderr: messagebox.showerror("Error", f"Failed to start VM '{vm_name}':\n\n{e}"))
            
        except Exception as e:
            error_msg = f"Error starting VM '{vm_name}': {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status(f"Error starting VM '{vm_name}'"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))
    
    def stop_vm(self):
        """Stop the selected virtual machine"""
        selected = self.vm_listbox.curselection()
        
        if not selected:
            messagebox.showinfo("No Selection", "Please select a virtual machine to stop.")
            return
        
        # Get the VM name from the selected item
        vm_text = self.vm_listbox.get(selected[0])
        if "Hyper-V is not enabled" in vm_text or "No virtual machines found" in vm_text or "Error" in vm_text:
            messagebox.showinfo("No VM", "No valid virtual machine selected.")
            return
        
        # Extract the VM name (assume format is "VM_NAME Running/Off/etc")
        vm_name = vm_text.split(" ")[0]
        
        # Ask for shutdown type
        shutdown_type = messagebox.askyesnocancel(
            "VM Shutdown Type",
            f"How do you want to stop '{vm_name}'?\n\n"
            "Yes: Save state (Hibernation)\n"
            "No: Shut down (Normal shutdown)\n"
            "Cancel: Abort operation"
        )
        
        if shutdown_type is None:  # Cancel
            return
        
        shutdown_method = "Save" if shutdown_type else "Shutdown"
        
        self.log(f"{shutdown_method} virtual machine: {vm_name}...")
        self.update_status(f"{shutdown_method} virtual machine: {vm_name}...")
        
        # Stop VM in a thread
        stop_thread = Thread(target=self._stop_vm_thread, args=(vm_name, shutdown_method))
        stop_thread.daemon = True
        stop_thread.start()
    
    def _stop_vm_thread(self, vm_name, shutdown_method):
        """Thread to stop a VM"""
        try:
            # Stop the VM
            if shutdown_method == "Save":
                ps_command = [
                    "powershell",
                    "-Command",
                    f"Save-VM -Name '{vm_name}'"
                ]
            else:  # Shutdown
                ps_command = [
                    "powershell",
                    "-Command",
                    f"Stop-VM -Name '{vm_name}'"
                ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=60)
            
            if process.returncode == 0:
                self.root.after(0, lambda: self.log(f"Virtual machine '{vm_name}' stopped successfully", "success"))
                self.root.after(0, lambda: self.update_status(f"Virtual machine '{vm_name}' stopped"))
                
                # Refresh the VM list after a short delay
                time.sleep(2)
                self.root.after(0, self.refresh_vms)
            else:
                self.root.after(0, lambda: self.log(f"Error stopping VM '{vm_name}': {stderr}", "error"))
                self.root.after(0, lambda: self.update_status(f"Error stopping VM '{vm_name}'"))
                self.root.after(0, lambda e=stderr: messagebox.showerror("Error", f"Failed to stop VM '{vm_name}':\n\n{e}"))
            
        except Exception as e:
            error_msg = f"Error stopping VM '{vm_name}': {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status(f"Error stopping VM '{vm_name}'"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))

    def init_optimize_tab(self):
        """Initialize the Optimize tab with system optimization features"""
        frame = ttk.Frame(self.optimize_tab, style='Tab.TFrame', padding=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # Title with icon
        title_frame = ttk.Frame(frame, style='Tab.TFrame')
        title_frame.grid(column=0, row=0, columnspan=2, sticky=tk.W, pady=(0, 10))
        
        ttk.Label(
            title_frame, 
            text="System Optimization", 
            font=HEADING_FONT,
            foreground=PRIMARY_COLOR
        ).pack(side=tk.LEFT)
        
        # Performance optimization frame
        perf_frame = ttk.LabelFrame(frame, text="Performance Optimization", padding=8, style='Group.TLabelframe')
        perf_frame.grid(column=0, row=1, sticky=tk.NSEW, pady=5, padx=5)
        
        # Performance optimization buttons
        self.create_button(perf_frame, "Optimize Visual Effects", 
                          lambda: self.optimize_visual_effects(), 0, 0)
        
        self.create_button(perf_frame, "Optimize Startup Programs", 
                          lambda: self.optimize_startup(), 0, 1)
        
        self.create_button(perf_frame, "Optimize Services", 
                          lambda: self.optimize_services(), 0, 2)
        
        # Memory optimization frame
        memory_frame = ttk.LabelFrame(frame, text="Memory Optimization", padding=8, style='Group.TLabelframe')
        memory_frame.grid(column=0, row=2, sticky=tk.NSEW, pady=5, padx=5)
        
        # Memory optimization buttons
        self.create_button(memory_frame, "Empty Working Set", 
                          lambda: self.empty_working_set(), 0, 0)
        
        self.create_button(memory_frame, "Optimize Virtual Memory", 
                          lambda: self.optimize_virtual_memory(), 0, 1)
        
        self.create_button(memory_frame, "Clear Standby List", 
                          lambda: self.clear_standby_memory(), 0, 2)
        
        # Advanced optimization frame
        advanced_frame = ttk.LabelFrame(frame, text="Advanced Optimization", padding=8, style='Group.TLabelframe')
        advanced_frame.grid(column=0, row=3, sticky=tk.NSEW, pady=5, padx=5)
        
        # Advanced optimization buttons
        self.create_button(advanced_frame, "Optimize Power Plan", 
                         lambda: self.optimize_power_plan(), 0, 0)
        
        self.create_button(advanced_frame, "Optimize Indexing", 
                         lambda: self.optimize_indexing(), 0, 1)
        
        self.create_button(advanced_frame, "Full System Optimization", 
                         lambda: self.full_system_optimization(), 0, 2, is_primary=True)
        
        # System monitoring frame
        monitor_frame = ttk.LabelFrame(frame, text="System Monitoring", padding=8, style='Group.TLabelframe')
        monitor_frame.grid(column=1, row=1, rowspan=3, sticky=tk.NSEW, padx=5, pady=5)
        
        # Resource monitor
        self.fig_perf = plt.Figure(figsize=(5, 8), dpi=100)
        self.canvas_perf = FigureCanvasTkAgg(self.fig_perf, master=monitor_frame)
        self.canvas_perf.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # Create subplots for CPU, Memory, Disk, and Network
        self.cpu_ax = self.fig_perf.add_subplot(411)
        self.memory_ax = self.fig_perf.add_subplot(412)
        self.disk_ax = self.fig_perf.add_subplot(413)
        self.network_ax = self.fig_perf.add_subplot(414)
        
        # Setup monitor data
        self.monitor_data = {
            'times': [],
            'cpu': [],
            'memory': [],
            'disk': [],
            'network': []
        }
        
        # Max data points to keep
        self.max_data_points = 60
        
        # Auto-refresh checkbox
        self.auto_refresh_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            monitor_frame, 
            text="Auto-refresh (every 1s)",
            variable=self.auto_refresh_var
        ).pack(pady=5)
        
        # Manual refresh button
        self.create_button(monitor_frame, "Refresh Now", 
                          lambda: self.update_performance_monitor(), 0, 0)
        
        # Configure grid weights
        frame.columnconfigure(0, weight=1)
        frame.columnconfigure(1, weight=1)
        frame.rowconfigure(1, weight=1)
        frame.rowconfigure(2, weight=1)
        frame.rowconfigure(3, weight=1)
        
        # Start the performance monitor
        self._setup_performance_monitor()
    
    def _setup_performance_monitor(self):
        """Setup the performance monitoring charts"""
        # Initialize the charts
        self.update_performance_monitor()
        
        # Schedule the first update
        self.root.after(1000, self._update_performance_monitor_loop)
    
    def _update_performance_monitor_loop(self):
        """Continuous loop to update performance monitor"""
        if hasattr(self, 'auto_refresh_var') and self.auto_refresh_var.get():
            self.update_performance_monitor()
        
        # Schedule the next update
        self.root.after(1000, self._update_performance_monitor_loop)
    
    def update_performance_monitor(self):
        """Update system performance monitor graphs"""
        try:
            # Get current time
            current_time = datetime.now().strftime('%H:%M:%S')
            
            # Get CPU usage
            cpu_percent = psutil.cpu_percent()
            
            # Get memory usage
            memory_percent = psutil.virtual_memory().percent
            
            # Get disk usage
            try:
                disk_io = psutil.disk_io_counters()
                if hasattr(self, 'last_disk_read'):
                    disk_read_speed = (disk_io.read_bytes - self.last_disk_read) / 1024 / 1024  # MB/s
                    disk_write_speed = (disk_io.write_bytes - self.last_disk_write) / 1024 / 1024  # MB/s
                    disk_speed = min(100, max(disk_read_speed, disk_write_speed))  # Scale to 0-100
                else:
                    disk_speed = 0
                
                self.last_disk_read = disk_io.read_bytes
                self.last_disk_write = disk_io.write_bytes
            except:
                disk_speed = 0
            
            # Get network usage
            try:
                net_io = psutil.net_io_counters()
                if hasattr(self, 'last_net_sent'):
                    net_send_speed = (net_io.bytes_sent - self.last_net_sent) / 1024 / 1024  # MB/s
                    net_recv_speed = (net_io.bytes_recv - self.last_net_recv) / 1024 / 1024  # MB/s
                    net_speed = min(100, (net_send_speed + net_recv_speed) * 10)  # Scale to 0-100
                else:
                    net_speed = 0
                
                self.last_net_sent = net_io.bytes_sent
                self.last_net_recv = net_io.bytes_recv
            except:
                net_speed = 0
            
            # Update the data lists
            self.monitor_data['times'].append(current_time)
            self.monitor_data['cpu'].append(cpu_percent)
            self.monitor_data['memory'].append(memory_percent)
            self.monitor_data['disk'].append(disk_speed)
            self.monitor_data['network'].append(net_speed)
            
            # Limit the data points
            if len(self.monitor_data['times']) > self.max_data_points:
                self.monitor_data['times'] = self.monitor_data['times'][-self.max_data_points:]
                self.monitor_data['cpu'] = self.monitor_data['cpu'][-self.max_data_points:]
                self.monitor_data['memory'] = self.monitor_data['memory'][-self.max_data_points:]
                self.monitor_data['disk'] = self.monitor_data['disk'][-self.max_data_points:]
                self.monitor_data['network'] = self.monitor_data['network'][-self.max_data_points:]
            
            # Only display the last 10 time labels to avoid crowding
            display_times = self.monitor_data['times'][::6] if len(self.monitor_data['times']) > 10 else self.monitor_data['times']
            time_positions = list(range(0, len(self.monitor_data['times']), 6)) if len(self.monitor_data['times']) > 10 else range(len(self.monitor_data['times']))
            
            # Update the plots
            self.fig_perf.clear()
            
            # CPU plot
            self.cpu_ax = self.fig_perf.add_subplot(411)
            self.cpu_ax.plot(self.monitor_data['cpu'], 'r-')
            self.cpu_ax.set_title('CPU Usage (%)')
            self.cpu_ax.set_ylim(0, 100)
            self.cpu_ax.set_xticks(time_positions)
            self.cpu_ax.set_xticklabels([])
            
            # Memory plot
            self.memory_ax = self.fig_perf.add_subplot(412)
            self.memory_ax.plot(self.monitor_data['memory'], 'b-')
            self.memory_ax.set_title('Memory Usage (%)')
            self.memory_ax.set_ylim(0, 100)
            self.memory_ax.set_xticks(time_positions)
            self.memory_ax.set_xticklabels([])
            
            # Disk plot
            self.disk_ax = self.fig_perf.add_subplot(413)
            self.disk_ax.plot(self.monitor_data['disk'], 'g-')
            self.disk_ax.set_title('Disk Activity')
            self.disk_ax.set_ylim(0, 100)
            self.disk_ax.set_xticks(time_positions)
            self.disk_ax.set_xticklabels([])
            
            # Network plot
            self.network_ax = self.fig_perf.add_subplot(414)
            self.network_ax.plot(self.monitor_data['network'], 'c-')
            self.network_ax.set_title('Network Activity')
            self.network_ax.set_ylim(0, 100)
            self.network_ax.set_xticks(time_positions)
            if display_times:
                self.network_ax.set_xticklabels(display_times, rotation=45, ha='right')
            
            # Adjust layout and draw
            self.fig_perf.tight_layout()
            self.canvas_perf.draw()
            
        except Exception as e:
            self.log(f"Error updating performance monitor: {str(e)}", "error")
    
    def optimize_visual_effects(self):
        """Optimize Windows visual effects for performance"""
        self.log("Optimizing visual effects for performance...")
        self.update_status("Optimizing visual effects for performance...")
        
        # Check for admin rights
        if not self.check_admin_rights("Optimizing visual effects"):
            return
        
        # Confirm with user
        if not messagebox.askyesno("Confirm Optimization", 
                                 "This will configure Windows visual effects for best performance.\n\n"
                                 "Some visual elements like animations and transparency will be disabled.\n\n"
                                 "Do you want to continue?"):
            self.log("Visual effects optimization cancelled by user", "info")
            return
        
        try:
            # Registry path for visual effects
            reg_path = r"Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
            
            # Set visual effects to "Adjust for best performance"
            ps_commands = [
                # Create the key if it doesn't exist
                f"New-Item -Path 'HKCU:\\{reg_path}' -Force | Out-Null",
                
                # Set visual effects to optimize for performance
                f"Set-ItemProperty -Path 'HKCU:\\{reg_path}' -Name 'VisualFXSetting' -Value 2 -Type DWord -Force"
            ]
            
            # Additional performance optimizations
            perf_path = r"Control Panel\Desktop"
            ps_commands.extend([
                # Disable window animations
                f"Set-ItemProperty -Path 'HKCU:\\{perf_path}' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Force",
                
                # Disable menu animations
                f"Set-ItemProperty -Path 'HKCU:\\{perf_path}' -Name 'MenuShowDelay' -Value 0 -Force"
            ])
            
            # Execute commands
            for cmd in ps_commands:
                ps_command = ["powershell", "-Command", cmd]
                subprocess.run(
                    ps_command,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW,
                    check=True
                )
            
            self.log("Visual effects optimized for performance", "success")
            self.update_status("Visual effects optimized for performance")
            messagebox.showinfo("Optimization Complete", 
                              "Visual effects have been optimized for performance.\n\n"
                              "You may need to restart your computer to see the full effect.")
            
        except Exception as e:
            self.log(f"Error optimizing visual effects: {str(e)}", "error")
            self.update_status("Error optimizing visual effects")
            messagebox.showerror("Error", f"Failed to optimize visual effects: {str(e)}")
    
    def optimize_startup(self):
        """Open Task Manager to Startup tab for managing startup programs"""
        self.log("Opening Task Manager startup tab...")
        self.update_status("Opening Task Manager startup tab...")
        
        try:
            # Open Task Manager with startup tab
            subprocess.Popen(["taskmgr.exe", "/7", "/startup"], creationflags=subprocess.CREATE_NO_WINDOW)
            self.log("Task Manager startup tab opened successfully", "success")
            
        except Exception as e:
            self.log(f"Error opening Task Manager: {str(e)}", "error")
            self.update_status("Error opening Task Manager")
            messagebox.showerror("Error", f"Failed to open Task Manager: {str(e)}")
    
    def optimize_services(self):
        """Open Services manager for optimizing services"""
        self.log("Opening Services manager...")
        self.update_status("Opening Services manager...")
        
        try:
            # Open Services
            subprocess.Popen("services.msc", creationflags=subprocess.CREATE_NO_WINDOW)
            self.log("Services manager opened successfully", "success")
            
        except Exception as e:
            self.log(f"Error opening Services manager: {str(e)}", "error")
            self.update_status("Error opening Services manager")
            messagebox.showerror("Error", f"Failed to open Services manager: {str(e)}")
    
    def empty_working_set(self):
        """Empty working set to free up memory"""
        self.log("Emptying working set to free up memory...")
        self.update_status("Freeing up system memory...")
        
        try:
            # PowerShell script to clear working set of processes
            ps_script = """
            Get-Process | Where-Object {$_.WorkingSet -gt 10MB} | ForEach-Object {
                try { [void]$_.MinWorkingSet } catch {}
            }
            """
            
            subprocess.run(
                ["powershell", "-Command", ps_script],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW,
                check=True
            )
            
            self.log("Working set emptied successfully", "success")
            self.update_status("System memory freed")
            messagebox.showinfo("Memory Optimization", "System memory has been freed successfully.")
            
        except Exception as e:
            self.log(f"Error freeing memory: {str(e)}", "error")
            self.update_status("Error freeing memory")
            messagebox.showerror("Error", f"Failed to free system memory: {str(e)}")
    
    def optimize_virtual_memory(self):
        """Open virtual memory settings"""
        self.log("Opening virtual memory settings...")
        self.update_status("Opening virtual memory settings...")
        
        try:
            # PowerShell command to open virtual memory settings
            ps_command = """
            $systemPropertiesAdvanced = rundll32.exe sysdm.cpl,EditSysdm 3
            Start-Process -FilePath $systemPropertiesAdvanced
            """
            
            subprocess.run(
                ["powershell", "-Command", ps_command],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            self.log("Virtual memory settings opened successfully", "success")
            
        except Exception as e:
            self.log(f"Error opening virtual memory settings: {str(e)}", "error")
            self.update_status("Error opening virtual memory settings")
            messagebox.showerror("Error", f"Failed to open virtual memory settings: {str(e)}")
    
    def clear_standby_memory(self):
        """Clear standby memory list"""
        self.log("Clearing standby memory list...")
        self.update_status("Clearing standby memory list...")
        
        # Check for admin rights
        if not self.check_admin_rights("Clearing standby memory"):
            return
        
        try:
            # Using RAMMap (Sysinternals) to clear standby list
            # Create a temporary script to automate RAMMap
            temp_dir = tempfile.gettempdir()
            script_path = os.path.join(temp_dir, "clear_standby.bat")
            
            with open(script_path, 'w') as f:
                f.write('@echo off\n')
                f.write('echo Clearing standby memory list...\n')
                f.write('echo This requires RAMMap (Sysinternals) to be installed.\n')
                f.write('echo If not installed, it will automatically download it.\n\n')
                
                f.write('set "RAMMAP_PATH=%ProgramFiles%\\RAMMap\\RAMMap.exe"\n')
                f.write('if not exist "%RAMMAP_PATH%" (\n')
                f.write('    echo RAMMap not found. Downloading...\n')
                f.write('    powershell -Command "Invoke-WebRequest -Uri \'https://download.sysinternals.com/files/RAMMap.zip\' -OutFile \'%TEMP%\\RAMMap.zip\'"\n')
                f.write('    powershell -Command "Expand-Archive -Path \'%TEMP%\\RAMMap.zip\' -DestinationPath \'%TEMP%\\RAMMap\' -Force"\n')
                f.write('    set "RAMMAP_PATH=%TEMP%\\RAMMap\\RAMMap.exe"\n')
                f.write(')\n\n')
                
                f.write('echo Running RAMMap to clear standby list...\n')
                f.write('"%RAMMAP_PATH%" -c -e\n')
                
                f.write('echo Standby memory list cleared.\n')
                f.write('pause\n')
            
            # Execute the script with admin privileges
            subprocess.Popen(
                ["powershell", "-Command", f"Start-Process '{script_path}' -Verb RunAs"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            self.log("Standby memory clear process started", "success")
            self.update_status("Standby memory clear process started")
            
        except Exception as e:
            self.log(f"Error clearing standby memory: {str(e)}", "error")
            self.update_status("Error clearing standby memory")
            messagebox.showerror("Error", f"Failed to clear standby memory: {str(e)}")
    
    def optimize_power_plan(self):
        """Set power plan to high performance"""
        self.log("Optimizing power plan...")
        self.update_status("Optimizing power plan...")
        
        # Check for admin rights
        if not self.check_admin_rights("Optimizing power plan"):
            return
        
        try:
            # Set power plan to high performance
            subprocess.run(
                ["powercfg", "-setactive", "8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c"],  # High Performance GUID
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW,
                check=True
            )
            
            self.log("Power plan set to High Performance", "success")
            self.update_status("Power plan optimized")
            messagebox.showinfo("Power Plan Optimized", 
                              "Power plan has been set to High Performance for maximum system performance.")
            
        except Exception as e:
            self.log(f"Error optimizing power plan: {str(e)}", "error")
            self.update_status("Error optimizing power plan")
            messagebox.showerror("Error", f"Failed to optimize power plan: {str(e)}")
    
    def optimize_indexing(self):
        """Optimize Windows Search indexing"""
        self.log("Optimizing Windows Search indexing...")
        self.update_status("Optimizing Windows Search indexing...")
        
        # Check for admin rights
        if not self.check_admin_rights("Optimizing indexing"):
            return
        
        # Confirm with user
        if not messagebox.askyesno("Confirm Indexing Optimization", 
                                 "This will optimize Windows Search indexing to improve performance.\n\n"
                                 "Do you want to continue?"):
            self.log("Indexing optimization cancelled by user", "info")
            return
        
        try:
            # Open indexing options
            subprocess.Popen("control.exe srchadmin.dll", creationflags=subprocess.CREATE_NO_WINDOW)
            
            # Show instructions
            messagebox.showinfo("Indexing Optimization", 
                              "The Indexing Options window will now open.\n\n"
                              "For best performance, we recommend:\n"
                              "1. Click 'Modify' to manage indexed locations\n"
                              "2. Remove unnecessary locations (leave only Start Menu and user folders)\n"
                              "3. Click 'Advanced' to access advanced options\n"
                              "4. Click 'Rebuild' to recreate the index from scratch\n\n"
                              "Note: Rebuilding the index may take some time.")
            
            self.log("Indexing options opened for optimization", "success")
            self.update_status("Indexing options opened")
            
        except Exception as e:
            self.log(f"Error opening indexing options: {str(e)}", "error")
            self.update_status("Error opening indexing options")
            messagebox.showerror("Error", f"Failed to open indexing options: {str(e)}")
    
    def full_system_optimization(self):
        """Perform full system optimization"""
        self.log("Starting full system optimization...")
        self.update_status("Starting full system optimization...")
        
        # Check for admin rights
        if not self.check_admin_rights("Full system optimization"):
            return
        
        # Confirm with user
        if not messagebox.askyesno("Confirm Full Optimization", 
                                 "This will perform a complete system optimization including:\n\n"
                                 "- Optimizing visual effects for performance\n"
                                 "- Setting power plan to high performance\n"
                                 "- Clearing system caches\n"
                                 "- Freeing up memory\n"
                                 "- Running disk cleanup\n\n"
                                 "This process may take several minutes.\n"
                                 "Do you want to continue?"):
            self.log("Full system optimization cancelled by user", "info")
            return
        
        # Create a progress window
        progress_window = tk.Toplevel(self.root)
        progress_window.title("System Optimization")
        progress_window.geometry("400x150")
        progress_window.resizable(False, False)
        progress_window.transient(self.root)
        progress_window.grab_set()
        
        # Add progress label
        progress_label = ttk.Label(progress_window, text="Starting optimization...", font=NORMAL_FONT)
        progress_label.pack(pady=(20, 10))
        
        # Add progress bar
        progress_bar = ttk.Progressbar(progress_window, length=350, mode='determinate')
        progress_bar.pack(pady=10, padx=25)
        
        # Create a thread to run optimizations
        optimization_thread = Thread(target=self._full_system_optimization_thread, 
                                  args=(progress_window, progress_label, progress_bar))
        optimization_thread.daemon = True
        optimization_thread.start()
    
    def _full_system_optimization_thread(self, progress_window, progress_label, progress_bar):
        """Thread to perform full system optimization"""
        try:
            total_steps = 7
            current_step = 0
            
            # Helper to update progress
            def update_progress(message, step_increment=1):
                nonlocal current_step
                current_step += step_increment
                progress_percentage = (current_step / total_steps) * 100
                self.root.after(0, lambda: progress_bar.config(value=progress_percentage))
                self.root.after(0, lambda msg=message: progress_label.config(text=msg))
                self.root.after(0, lambda msg=message: self.log(msg))
                self.root.after(0, lambda msg=message: self.update_status(msg))
                time.sleep(1)  # Brief pause for visual feedback
            
            # Step 1: Optimize visual effects
            update_progress("Optimizing visual effects...")
            
            try:
                # Registry path for visual effects
                reg_path = r"Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects"
                
                # Set visual effects to "Adjust for best performance"
                ps_commands = [
                    f"New-Item -Path 'HKCU:\\{reg_path}' -Force | Out-Null",
                    f"Set-ItemProperty -Path 'HKCU:\\{reg_path}' -Name 'VisualFXSetting' -Value 2 -Type DWord -Force"
                ]
                
                # Additional performance optimizations
                perf_path = r"Control Panel\Desktop"
                ps_commands.extend([
                    f"Set-ItemProperty -Path 'HKCU:\\{perf_path}' -Name 'UserPreferencesMask' -Value ([byte[]](0x90, 0x12, 0x01, 0x80)) -Force",
                    f"Set-ItemProperty -Path 'HKCU:\\{perf_path}' -Name 'MenuShowDelay' -Value 0 -Force"
                ])
                
                # Execute commands
                for cmd in ps_commands:
                    ps_command = ["powershell", "-Command", cmd]
                    subprocess.run(
                        ps_command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
            except Exception as e:
                self.root.after(0, lambda: self.log(f"Error optimizing visual effects: {str(e)}", "error"))
            
            # Step 2: Set power plan to high performance
            update_progress("Optimizing power plan...")
            
            try:
                # Set power plan to high performance
                subprocess.run(
                    ["powercfg", "-setactive", "8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c"],  # High Performance GUID
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
            except Exception as e:
                self.root.after(0, lambda: self.log(f"Error optimizing power plan: {str(e)}", "error"))
            
            # Step 3: Empty working set
            update_progress("Freeing up system memory...")
            
            try:
                # PowerShell script to clear working set of processes
                ps_script = """
                Get-Process | Where-Object {$_.WorkingSet -gt 10MB} | ForEach-Object {
                    try { [void]$_.MinWorkingSet } catch {}
                }
                """
                
                subprocess.run(
                    ["powershell", "-Command", ps_script],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
            except Exception as e:
                self.root.after(0, lambda: self.log(f"Error freeing memory: {str(e)}", "error"))
            
            # Step 4: Run disk cleanup
            update_progress("Running disk cleanup...")
            
            try:
                # Run disk cleanup with built-in settings
                subprocess.run(
                    ["cleanmgr", "/sagerun:1"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
            except Exception as e:
                self.root.after(0, lambda: self.log(f"Error running disk cleanup: {str(e)}", "error"))
            
            # Step 5: Clear Windows Update cache
            update_progress("Clearing Windows Update cache...")
            
            try:
                # Stop Windows Update service
                subprocess.run(
                    ["net", "stop", "wuauserv"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                
                # Rename SoftwareDistribution folder
                subprocess.run(
                    ["cmd", "/c", "ren %systemroot%\\SoftwareDistribution SoftwareDistribution.old"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                
                # Start Windows Update service
                subprocess.run(
                    ["net", "start", "wuauserv"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
            except Exception as e:
                self.root.after(0, lambda: self.log(f"Error clearing Windows Update cache: {str(e)}", "error"))
            
            # Step 6: Clear temporary files
            update_progress("Clearing temporary files...")
            
            try:
                # Clear temp directories
                temp_dirs = [
                    os.environ.get('TEMP', ''),
                    os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), 'Temp'),
                    os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), 'Prefetch')
                ]
                
                for temp_dir in temp_dirs:
                    if os.path.exists(temp_dir):
                        for item in os.listdir(temp_dir):
                            item_path = os.path.join(temp_dir, item)
                            try:
                                if os.path.isfile(item_path):
                                    os.remove(item_path)
                                elif os.path.isdir(item_path):
                                    shutil.rmtree(item_path, ignore_errors=True)
                            except:
                                pass
            except Exception as e:
                self.root.after(0, lambda: self.log(f"Error clearing temporary files: {str(e)}", "error"))
            
            # Step 7: Optimize network settings
            update_progress("Optimizing network settings...")
            
            try:
                # Reset Winsock
                subprocess.run(
                    ["netsh", "winsock", "reset"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                
                # Reset TCP/IP stack
                subprocess.run(
                    ["netsh", "int", "ip", "reset"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                
                # Flush DNS
                subprocess.run(
                    ["ipconfig", "/flushdns"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
            except Exception as e:
                self.root.after(0, lambda: self.log(f"Error optimizing network settings: {str(e)}", "error"))
            
            # Finalize optimization
            update_progress("System optimization completed successfully!", 0)
            progress_bar.config(value=100)
            
            self.root.after(0, lambda: self.log("Full system optimization completed", "success"))
            self.root.after(0, lambda: self.update_status("System optimization completed"))
            
            # Show completion message
            self.root.after(0, lambda: messagebox.showinfo("Optimization Complete", 
                                                        "System optimization has been completed successfully.\n\n"
                                                        "You may need to restart your computer for all optimizations to take effect."))
            
            # Close progress window after a delay
            self.root.after(2000, progress_window.destroy)
            
        except Exception as e:
            error_msg = f"Error during system optimization: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error during system optimization"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))
            
            # Close progress window
            self.root.after(0, progress_window.destroy)

    def manage_services(self):
        """Open Windows Services manager"""
        self.log("Opening Windows Services manager...")
        self.update_status("Opening Windows Services manager...")
        try:
            subprocess.Popen("services.msc", creationflags=subprocess.CREATE_NO_WINDOW)
            self.log("Windows Services manager opened successfully", "success")
        except Exception as e:
            self.log(f"Error opening Windows Services manager: {str(e)}", "error")
            self.update_status("Error opening Windows Services manager")

    def backup_registry(self):
        """Create a backup of the Windows registry"""
        self.log("Creating registry backup...")
        self.update_status("Creating registry backup...")
        
        # Check for admin rights
        if not self.check_admin_rights("Creating registry backup"):
            return
        
        # Ask for backup location
        backup_dir = filedialog.askdirectory(title="Select Backup Location")
        if not backup_dir:
            self.log("Registry backup cancelled by user", "info")
            return
        
        # Start backup in a thread
        backup_thread = Thread(target=self._backup_registry_thread, args=(backup_dir,))
        backup_thread.daemon = True
        backup_thread.start()
    
    def _backup_registry_thread(self, backup_dir):
        """Thread to create registry backup"""
        try:
            # Create timestamp for filename
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"registry_backup_{timestamp}.reg"
            backup_path = os.path.join(backup_dir, backup_filename)
            
            self.root.after(0, lambda: self.log(f"Backing up registry to {backup_path}..."))
            self.root.after(0, lambda: self.update_status("Creating registry backup..."))
            
            # Use reg.exe to export the registry
            process = subprocess.Popen(
                ["reg", "export", "HKLM", backup_path, "/y"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=300)  # Allow up to 5 minutes
            
            if process.returncode == 0:
                # Create a complementary backup of HKCU
                hkcu_backup_filename = f"registry_backup_HKCU_{timestamp}.reg"
                hkcu_backup_path = os.path.join(backup_dir, hkcu_backup_filename)
                
                hkcu_process = subprocess.Popen(
                    ["reg", "export", "HKCU", hkcu_backup_path, "/y"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                
                hkcu_stdout, hkcu_stderr = hkcu_process.communicate(timeout=300)
                
                if hkcu_process.returncode == 0:
                    # Also create system restore point
                    self.root.after(0, lambda: self.log("Creating system restore point..."))
                    
                    restore_process = subprocess.Popen(
                        ["powershell", "-Command", 
                         "Checkpoint-Computer -Description 'Registry Backup' -RestorePointType 'MODIFY_SETTINGS'"],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    
                    restore_stdout, restore_stderr = restore_process.communicate(timeout=60)
                    
                    if restore_process.returncode == 0:
                        self.root.after(0, lambda: self.log("System restore point created successfully", "success"))
                    else:
                        self.root.after(0, lambda: self.log(f"Error creating system restore point: {restore_stderr}", "warning"))
                
                # Success message
                self.root.after(0, lambda: self.log("Registry backup completed successfully", "success"))
                self.root.after(0, lambda: self.update_status("Registry backup completed"))
                self.root.after(0, lambda: messagebox.showinfo("Backup Complete", 
                                                            f"Registry backup completed successfully.\n\n"
                                                            f"Backup location: {backup_dir}\n"
                                                            f"Files: {backup_filename} and {hkcu_backup_filename}"))
            else:
                self.root.after(0, lambda: self.log(f"Error creating registry backup: {stderr}", "error"))
                self.root.after(0, lambda: self.update_status("Error creating registry backup"))
                self.root.after(0, lambda: messagebox.showerror("Backup Error", 
                                                             f"Failed to create registry backup:\n\n{stderr}"))
                
        except Exception as e:
            error_msg = f"Error backing up registry: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error backing up registry"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))

    def check_driver_updates(self):
        """Check for driver updates"""
        self.log("Checking for driver updates...")
        self.update_status("Checking for driver updates...")
        self.update_system_description("Driver Update Check feature will be implemented soon")
        messagebox.showinfo("Coming Soon", "Driver Update Check feature will be implemented soon")

    def run_network_diagnostics(self):
        """Run network diagnostics tests"""
        self.log("Running network diagnostics...")
        self.update_status("Running network diagnostics...")
        self.update_system_description("Network Diagnostics feature will be implemented soon")
        messagebox.showinfo("Coming Soon", "Network Diagnostics feature will be implemented soon")

    def create_system_restore_point(self):
        """Create a system restore point"""
        self.log("Creating system restore point...")
        self.update_status("Creating system restore point...")
        
        # Check for admin rights
        if not self.check_admin_rights("Creating system restore point"):
            return
        
        # Prompt for restore point description
        description = simpledialog.askstring(
            "System Restore Point", 
            "Enter a description for this restore point:",
            initialvalue=f"Manual Restore Point - {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        )
        
        if not description:
            self.log("System restore point creation cancelled by user", "info")
            return
        
        # Create restore point in a thread
        restore_thread = Thread(target=self._create_restore_point_thread, args=(description,))
        restore_thread.daemon = True
        restore_thread.start()
    
    def _create_restore_point_thread(self, description):
        """Thread to create a system restore point"""
        try:
            self.root.after(0, lambda: self.log(f"Creating system restore point: {description}..."))
            self.root.after(0, lambda: self.update_status("Creating system restore point..."))
            
            # First enable system restore if it's not enabled
            enable_cmd = [
                "powershell",
                "-Command",
                "Enable-ComputerRestore -Drive 'C:\\'",
            ]
            
            try:
                subprocess.run(
                    enable_cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW,
                    check=True
                )
            except:
                # System restore might already be enabled, continue
                pass
            
            # Create the restore point
            ps_command = [
                "powershell",
                "-Command",
                f"Checkpoint-Computer -Description '{description}' -RestorePointType 'MODIFY_SETTINGS'"
            ]
            
            process = subprocess.Popen(
                ps_command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            stdout, stderr = process.communicate(timeout=120)  # Allow up to 2 minutes
            
            if process.returncode == 0:
                self.root.after(0, lambda: self.log("System restore point created successfully", "success"))
                self.root.after(0, lambda: self.update_status("System restore point created"))
                self.root.after(0, lambda: messagebox.showinfo("Success", 
                                                            "System restore point created successfully."))
                
                # Update the system description
                self.root.after(0, lambda: self.update_system_description(
                    "System Restore Point\n\n" +
                    f"A system restore point with the description '{description}' has been created.\n\n" +
                    "You can restore your system to this point through Windows System Restore if needed."
                ))
            else:
                # Try alternative method if first method fails
                self.root.after(0, lambda: self.log("First method failed, trying alternative method..."))
                
                alt_command = [
                    "wmic", "recoveros", "set", "CreateRestorePoint", 
                    f"Description='{description}'", "EventType=1", "RestorePointType=0", "/f"
                ]
                
                alt_process = subprocess.Popen(
                    alt_command,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                
                alt_stdout, alt_stderr = alt_process.communicate(timeout=120)
                
                if alt_process.returncode == 0:
                    self.root.after(0, lambda: self.log("System restore point created successfully", "success"))
                    self.root.after(0, lambda: self.update_status("System restore point created"))
                    self.root.after(0, lambda: messagebox.showinfo("Success", 
                                                                "System restore point created successfully."))
                    
                    # Update the system description
                    self.root.after(0, lambda: self.update_system_description(
                        "System Restore Point\n\n" +
                        f"A system restore point with the description '{description}' has been created.\n\n" +
                        "You can restore your system to this point through Windows System Restore if needed."
                    ))
                else:
                    error_msg = f"Error creating system restore point: {stderr}"
                    self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
                    self.root.after(0, lambda: self.update_status("Error creating system restore point"))
                    self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))
                    
                    # Update the system description
                    self.root.after(0, lambda err=stderr: self.update_system_description(
                        "System Restore Point Error\n\n" +
                        f"Failed to create a system restore point.\n\n" +
                        f"Error: {err}\n\n" +
                        "Please make sure System Restore is enabled on your system."
                    ))
        
        except Exception as e:
            error_msg = f"Error creating system restore point: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error creating system restore point"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))

    def remove_update_files(self):
        """Remove Windows Update cached files"""
        self.log("Removing Windows Update files...")
        self.update_status("Removing Windows Update files...")
        
        # Check for admin rights
        if not self.check_admin_rights("Removing Windows Update files"):
            return
        
        # Update description
        self.update_cleanup_description(
            "Windows Update File Removal\n\n" +
            "This tool removes cached Windows Update files to free up disk space.\n\n" +
            "This will stop the Windows Update service temporarily, remove the cached files, "
            "and then restart the service."
        )
        
        # Confirm with user
        if not messagebox.askyesno("Confirm Removal", 
                                 "This will remove Windows Update cached files.\n\n"
                                 "The Windows Update service will be stopped temporarily.\n\n"
                                 "Do you want to continue?"):
            self.log("Windows Update file removal cancelled by user", "info")
            return
        
        # Start the cleanup in a thread
        update_thread = Thread(target=self._remove_update_files_thread)
        update_thread.daemon = True
        update_thread.start()
    
    def _remove_update_files_thread(self):
        """Thread to remove Windows Update files"""
        try:
            self.root.after(0, lambda: self.log("Stopping Windows Update service..."))
            self.root.after(0, lambda: self.update_status("Stopping Windows Update service..."))
            
            # Stop Windows Update service
            subprocess.run(
                ["net", "stop", "wuauserv"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            # Get the SoftwareDistribution folder path
            sd_path = os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), 'SoftwareDistribution')
            self.root.after(0, lambda: self.log(f"Cleaning Windows Update files in {sd_path}..."))
            
            # Create a backup of the SoftwareDistribution folder
            sd_old_path = os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), 'SoftwareDistribution.old')
            
            # Remove old backup if exists
            if os.path.exists(sd_old_path):
                self.root.after(0, lambda: self.log("Removing old backup..."))
                try:
                    shutil.rmtree(sd_old_path, ignore_errors=True)
                except:
                    pass
            
            # Try to rename the folder (most reliable method)
            if os.path.exists(sd_path):
                try:
                    os.rename(sd_path, sd_old_path)
                    self.root.after(0, lambda: self.log("Windows Update folder renamed successfully"))
                except Exception as e:
                    self.root.after(0, lambda: self.log(f"Error renaming folder: {str(e)}", "warning"))
                    
                    # If rename fails, try to clear the contents
                    self.root.after(0, lambda: self.log("Trying to clear contents instead..."))
                    try:
                        # Clear Download folder
                        download_path = os.path.join(sd_path, "Download")
                        if os.path.exists(download_path):
                            shutil.rmtree(download_path, ignore_errors=True)
                            
                        # Clear DataStore folder
                        datastore_path = os.path.join(sd_path, "DataStore")
                        if os.path.exists(datastore_path):
                            shutil.rmtree(datastore_path, ignore_errors=True)
                    except Exception as inner_e:
                        self.root.after(0, lambda: self.log(f"Error clearing folder contents: {str(inner_e)}", "warning"))
            
            # Start Windows Update service again
            self.root.after(0, lambda: self.log("Starting Windows Update service..."))
            self.root.after(0, lambda: self.update_status("Starting Windows Update service..."))
            
            subprocess.run(
                ["net", "start", "wuauserv"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            # Calculate space saved
            space_saved = "Unknown"
            if os.path.exists(sd_old_path):
                total_size = 0
                for dirpath, dirnames, filenames in os.walk(sd_old_path):
                    for f in filenames:
                        fp = os.path.join(dirpath, f)
                        try:
                            total_size += os.path.getsize(fp)
                        except:
                            pass
                
                # Convert to human-readable format
                if total_size > 1024**3:  # GB
                    space_saved = f"{total_size / (1024**3):.2f} GB"
                else:  # MB
                    space_saved = f"{total_size / (1024**2):.2f} MB"
            
            # Success message
            success_msg = "Windows Update cached files removed successfully"
            self.root.after(0, lambda: self.log(success_msg, "success"))
            self.root.after(0, lambda: self.update_status("Windows Update files removed"))
            
            if space_saved != "Unknown":
                success_msg += f"\nSpace freed: {space_saved}"
            
            self.root.after(0, lambda msg=success_msg: messagebox.showinfo("Cleanup Complete", msg))
            
            # Update the description
            self.root.after(0, lambda space=space_saved: self.update_cleanup_description(
                "Windows Update File Removal\n\n" +
                "Windows Update cached files have been removed successfully.\n\n" +
                f"Estimated space freed: {space}"
            ))
            
        except Exception as e:
            error_msg = f"Error removing Windows Update files: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error removing Windows Update files"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))

    def clean_browser_data(self):
        """Clean browser cache and history"""
        self.log("Preparing to clean browser data...")
        self.update_status("Preparing to clean browser data...")
        
        # Create a dialog to select browsers
        browser_dialog = tk.Toplevel(self.root)
        browser_dialog.title("Clean Browser Data")
        browser_dialog.geometry("400x300")
        browser_dialog.resizable(False, False)
        browser_dialog.transient(self.root)
        browser_dialog.grab_set()
        
        # Center the dialog
        browser_dialog.update_idletasks()
        width = browser_dialog.winfo_width()
        height = browser_dialog.winfo_height()
        x = (browser_dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (browser_dialog.winfo_screenheight() // 2) - (height // 2)
        browser_dialog.geometry(f"{width}x{height}+{x}+{y}")
        
        # Browser checkboxes
        ttk.Label(browser_dialog, text="Select browsers to clean:", font=NORMAL_FONT).pack(pady=(15, 5))
        
        # Check which browsers are installed
        chrome_installed = os.path.exists(os.path.join(os.environ.get('LOCALAPPDATA', ''), 'Google', 'Chrome'))
        firefox_installed = os.path.exists(os.path.join(os.environ.get('APPDATA', ''), 'Mozilla', 'Firefox'))
        edge_installed = os.path.exists(os.path.join(os.environ.get('LOCALAPPDATA', ''), 'Microsoft', 'Edge'))
        ie_installed = os.path.exists(os.path.join(os.environ.get('LOCALAPPDATA', ''), 'Microsoft', 'Windows', 'INetCache'))
        
        # Browser selection variables
        chrome_var = tk.BooleanVar(value=chrome_installed)
        firefox_var = tk.BooleanVar(value=firefox_installed)
        edge_var = tk.BooleanVar(value=edge_installed)
        ie_var = tk.BooleanVar(value=ie_installed)
        
        # Create checkboxes frame
        checkbox_frame = ttk.Frame(browser_dialog)
        checkbox_frame.pack(fill=tk.X, pady=10, padx=20)
        
        # Add checkboxes
        ttk.Checkbutton(
            checkbox_frame, 
            text="Google Chrome",
            variable=chrome_var,
            state=tk.NORMAL if chrome_installed else tk.DISABLED
        ).grid(row=0, column=0, sticky=tk.W, pady=2)
        
        ttk.Checkbutton(
            checkbox_frame, 
            text="Mozilla Firefox",
            variable=firefox_var,
            state=tk.NORMAL if firefox_installed else tk.DISABLED
        ).grid(row=1, column=0, sticky=tk.W, pady=2)
        
        ttk.Checkbutton(
            checkbox_frame, 
            text="Microsoft Edge",
            variable=edge_var,
            state=tk.NORMAL if edge_installed else tk.DISABLED
        ).grid(row=2, column=0, sticky=tk.W, pady=2)
        
        ttk.Checkbutton(
            checkbox_frame, 
            text="Internet Explorer",
            variable=ie_var,
            state=tk.NORMAL if ie_installed else tk.DISABLED
        ).grid(row=3, column=0, sticky=tk.W, pady=2)
        
        # Clean options
        ttk.Label(browser_dialog, text="Select what to clean:", font=NORMAL_FONT).pack(pady=(15, 5))
        
        # Clean options frame
        options_frame = ttk.Frame(browser_dialog)
        options_frame.pack(fill=tk.X, pady=10, padx=20)
        
        # Clean options variables
        cache_var = tk.BooleanVar(value=True)
        cookies_var = tk.BooleanVar(value=False)
        history_var = tk.BooleanVar(value=False)
        
        # Add options checkboxes
        ttk.Checkbutton(options_frame, text="Cache", variable=cache_var).grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Checkbutton(options_frame, text="Cookies", variable=cookies_var).grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Checkbutton(options_frame, text="History", variable=history_var).grid(row=2, column=0, sticky=tk.W, pady=2)
        
        # Buttons frame
        button_frame = ttk.Frame(browser_dialog)
        button_frame.pack(fill=tk.X, pady=(15, 10), padx=20)
        
        # Cancel button
        ttk.Button(
            button_frame, 
            text="Cancel",
            command=browser_dialog.destroy
        ).pack(side=tk.RIGHT, padx=5)
        
        # Clean button
        ttk.Button(
            button_frame, 
            text="Clean Browser Data",
            command=lambda: self._process_browser_clean(
                browser_dialog,
                chrome_var.get(), firefox_var.get(), edge_var.get(), ie_var.get(),
                cache_var.get(), cookies_var.get(), history_var.get()
            )
        ).pack(side=tk.RIGHT, padx=5)
        
        # Update the cleanup description
        self.update_cleanup_description(
            "Browser Data Cleanup\n\n" +
            "This tool cleans temporary browser data including cache, cookies, and history.\n\n" +
            "Select the browsers you want to clean and the specific data types to remove."
        )
    
    def _process_browser_clean(self, dialog, clean_chrome, clean_firefox, clean_edge, clean_ie, 
                             clean_cache, clean_cookies, clean_history):
        """Process browser cleaning selections"""
        # Check if at least one browser and one option is selected
        if not (clean_chrome or clean_firefox or clean_edge or clean_ie):
            messagebox.showinfo("No Selection", "Please select at least one browser to clean.")
            return
        
        if not (clean_cache or clean_cookies or clean_history):
            messagebox.showinfo("No Selection", "Please select at least one data type to clean.")
            return
        
        # Close the dialog
        dialog.destroy()
        
        # Start cleaning in a thread
        clean_thread = Thread(
            target=self._clean_browser_thread,
            args=(clean_chrome, clean_firefox, clean_edge, clean_ie, clean_cache, clean_cookies, clean_history)
        )
        clean_thread.daemon = True
        clean_thread.start()
    
    def _clean_browser_thread(self, clean_chrome, clean_firefox, clean_edge, clean_ie, 
                            clean_cache, clean_cookies, clean_history):
        """Thread to clean browser data"""
        try:
            self.root.after(0, lambda: self.log("Starting browser data cleanup..."))
            self.root.after(0, lambda: self.update_status("Cleaning browser data..."))
            
            # Track results
            results = []
            
            # Clean Chrome
            if clean_chrome:
                self.root.after(0, lambda: self.log("Cleaning Google Chrome data..."))
                chrome_result = self._clean_chrome(clean_cache, clean_cookies, clean_history)
                results.append(f"Chrome: {chrome_result}")
            
            # Clean Firefox
            if clean_firefox:
                self.root.after(0, lambda: self.log("Cleaning Mozilla Firefox data..."))
                firefox_result = self._clean_firefox(clean_cache, clean_cookies, clean_history)
                results.append(f"Firefox: {firefox_result}")
            
            # Clean Edge
            if clean_edge:
                self.root.after(0, lambda: self.log("Cleaning Microsoft Edge data..."))
                edge_result = self._clean_edge(clean_cache, clean_cookies, clean_history)
                results.append(f"Edge: {edge_result}")
            
            # Clean IE
            if clean_ie:
                self.root.after(0, lambda: self.log("Cleaning Internet Explorer data..."))
                ie_result = self._clean_ie(clean_cache, clean_cookies, clean_history)
                results.append(f"Internet Explorer: {ie_result}")
            
            # Update status
            self.root.after(0, lambda: self.log("Browser data cleanup completed", "success"))
            self.root.after(0, lambda: self.update_status("Browser data cleanup completed"))
            
            # Show results
            result_msg = "Browser Data Cleanup Results:\n\n" + "\n".join(results)
            self.root.after(0, lambda msg=result_msg: messagebox.showinfo("Cleanup Complete", msg))
            
        except Exception as e:
            error_msg = f"Error cleaning browser data: {str(e)}"
            self.root.after(0, lambda msg=error_msg: self.log(msg, "error"))
            self.root.after(0, lambda: self.update_status("Error cleaning browser data"))
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("Error", msg))
    
    def _clean_chrome(self, clean_cache, clean_cookies, clean_history):
        """Clean Google Chrome data"""
        try:
            # Kill Chrome processes
            os.system("taskkill /F /IM chrome.exe /T 2>nul")
            
            # Get Chrome profile path
            chrome_path = os.path.join(os.environ.get('LOCALAPPDATA', ''), 'Google', 'Chrome', 'User Data')
            
            if not os.path.exists(chrome_path):
                return "Not installed or not found"
            
            # Find all profile directories
            profiles = ['Default']
            profile_dir = os.path.join(chrome_path, 'Default')
            
            # Look for additional profiles
            for item in os.listdir(chrome_path):
                if item.startswith('Profile ') and os.path.isdir(os.path.join(chrome_path, item)):
                    profiles.append(item)
            
            # Clean each profile
            cleaned_items = []
            
            for profile in profiles:
                profile_path = os.path.join(chrome_path, profile)
                
                # Clean cache
                if clean_cache:
                    cache_path = os.path.join(profile_path, 'Cache')
                    if os.path.exists(cache_path):
                        shutil.rmtree(cache_path, ignore_errors=True)
                    
                    # Modern Chrome uses different cache location
                    modern_cache_path = os.path.join(profile_path, 'Service Worker', 'CacheStorage')
                    if os.path.exists(modern_cache_path):
                        shutil.rmtree(modern_cache_path, ignore_errors=True)
                    
                    cleaned_items.append('Cache')
                
                # Clean cookies
                if clean_cookies:
                    cookies_path = os.path.join(profile_path, 'Cookies')
                    if os.path.exists(cookies_path):
                        try:
                            os.remove(cookies_path)
                        except:
                            pass
                    
                    cookies_journal_path = os.path.join(profile_path, 'Cookies-journal')
                    if os.path.exists(cookies_journal_path):
                        try:
                            os.remove(cookies_journal_path)
                        except:
                            pass
                    
                    cleaned_items.append('Cookies')
                
                # Clean history
                if clean_history:
                    history_path = os.path.join(profile_path, 'History')
                    if os.path.exists(history_path):
                        try:
                            os.remove(history_path)
                        except:
                            pass
                    
                    history_journal_path = os.path.join(profile_path, 'History-journal')
                    if os.path.exists(history_journal_path):
                        try:
                            os.remove(history_journal_path)
                        except:
                            pass
                    
                    cleaned_items.append('History')
            
            if cleaned_items:
                return f"Cleaned {', '.join(set(cleaned_items))}"
            else:
                return "No items selected to clean"
            
        except Exception as e:
            return f"Error: {str(e)}"
    
    def _clean_firefox(self, clean_cache, clean_cookies, clean_history):
        """Clean Mozilla Firefox data"""
        try:
            # Kill Firefox processes
            os.system("taskkill /F /IM firefox.exe /T 2>nul")
            
            # Get Firefox profile path
            firefox_path = os.path.join(os.environ.get('APPDATA', ''), 'Mozilla', 'Firefox', 'Profiles')
            
            if not os.path.exists(firefox_path):
                return "Not installed or not found"
            
            # Find all profile directories
            profiles = []
            for item in os.listdir(firefox_path):
                if os.path.isdir(os.path.join(firefox_path, item)) and '.' in item:
                    profiles.append(item)
            
            if not profiles:
                return "No profiles found"
            
            # Clean each profile
            cleaned_items = []
            
            for profile in profiles:
                profile_path = os.path.join(firefox_path, profile)
                
                # Clean cache
                if clean_cache:
                    cache_path = os.path.join(profile_path, 'cache2')
                    if os.path.exists(cache_path):
                        shutil.rmtree(cache_path, ignore_errors=True)
                    
                    # Clean offline cache
                    offline_cache = os.path.join(profile_path, 'OfflineCache')
                    if os.path.exists(offline_cache):
                        shutil.rmtree(offline_cache, ignore_errors=True)
                    
                    cleaned_items.append('Cache')
                
                # Clean cookies
                if clean_cookies:
                    cookies_path = os.path.join(profile_path, 'cookies.sqlite')
                    if os.path.exists(cookies_path):
                        try:
                            os.remove(cookies_path)
                        except:
                            pass
                    
                    cookies_journal_path = os.path.join(profile_path, 'cookies.sqlite-journal')
                    if os.path.exists(cookies_journal_path):
                        try:
                            os.remove(cookies_journal_path)
                        except:
                            pass
                    
                    cleaned_items.append('Cookies')
                
                # Clean history
                if clean_history:
                    history_files = [
                        'places.sqlite', 'places.sqlite-journal',
                        'formhistory.sqlite', 'formhistory.sqlite-journal'
                    ]
                    
                    for history_file in history_files:
                        file_path = os.path.join(profile_path, history_file)
                        if os.path.exists(file_path):
                            try:
                                os.remove(file_path)
                            except:
                                pass
                    
                    cleaned_items.append('History')
            
            if cleaned_items:
                return f"Cleaned {', '.join(set(cleaned_items))}"
            else:
                return "No items selected to clean"
            
        except Exception as e:
            return f"Error: {str(e)}"
    
    def _clean_edge(self, clean_cache, clean_cookies, clean_history):
        """Clean Microsoft Edge data"""
        try:
            # Kill Edge processes
            os.system("taskkill /F /IM msedge.exe /T 2>nul")
            
            # Get Edge path
            edge_path = os.path.join(os.environ.get('LOCALAPPDATA', ''), 'Microsoft', 'Edge', 'User Data')
            
            if not os.path.exists(edge_path):
                return "Not installed or not found"
            
            # Find all profile directories
            profiles = ['Default']
            
            # Look for additional profiles
            for item in os.listdir(edge_path):
                if item.startswith('Profile ') and os.path.isdir(os.path.join(edge_path, item)):
                    profiles.append(item)
            
            # Clean each profile
            cleaned_items = []
            
            for profile in profiles:
                profile_path = os.path.join(edge_path, profile)
                
                # Clean cache
                if clean_cache:
                    cache_path = os.path.join(profile_path, 'Cache')
                    if os.path.exists(cache_path):
                        shutil.rmtree(cache_path, ignore_errors=True)
                    
                    # Modern Edge uses different cache location
                    modern_cache_path = os.path.join(profile_path, 'Service Worker', 'CacheStorage')
                    if os.path.exists(modern_cache_path):
                        shutil.rmtree(modern_cache_path, ignore_errors=True)
                    
                    cleaned_items.append('Cache')
                
                # Clean cookies
                if clean_cookies:
                    cookies_path = os.path.join(profile_path, 'Cookies')
                    if os.path.exists(cookies_path):
                        try:
                            os.remove(cookies_path)
                        except:
                            pass
                    
                    cookies_journal_path = os.path.join(profile_path, 'Cookies-journal')
                    if os.path.exists(cookies_journal_path):
                        try:
                            os.remove(cookies_journal_path)
                        except:
                            pass
                    
                    cleaned_items.append('Cookies')
                
                # Clean history
                if clean_history:
                    history_path = os.path.join(profile_path, 'History')
                    if os.path.exists(history_path):
                        try:
                            os.remove(history_path)
                        except:
                            pass
                    
                    history_journal_path = os.path.join(profile_path, 'History-journal')
                    if os.path.exists(history_journal_path):
                        try:
                            os.remove(history_journal_path)
                        except:
                            pass
                    
                    cleaned_items.append('History')
            
            if cleaned_items:
                return f"Cleaned {', '.join(set(cleaned_items))}"
            else:
                return "No items selected to clean"
            
        except Exception as e:
            return f"Error: {str(e)}"
    
    def _clean_ie(self, clean_cache, clean_cookies, clean_history):
        """Clean Internet Explorer/Windows data"""
        try:
            # Clean cache
            cleaned_items = []
            
            if clean_cache:
                # Internet Explorer Cache
                ie_cache = os.path.join(os.environ.get('LOCALAPPDATA', ''), 'Microsoft', 'Windows', 'INetCache')
                if os.path.exists(ie_cache):
                    # Use RunDll32 to clean IE cache
                    subprocess.run(
                        ["RunDll32.exe", "InetCpl.cpl,ClearMyTracksByProcess", "8"],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        creationflags=subprocess.CREATE_NO_WINDOW
                    )
                    cleaned_items.append('Cache')
            
            # Clean cookies
            if clean_cookies:
                subprocess.run(
                    ["RunDll32.exe", "InetCpl.cpl,ClearMyTracksByProcess", "2"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                cleaned_items.append('Cookies')
            
            # Clean history
            if clean_history:
                subprocess.run(
                    ["RunDll32.exe", "InetCpl.cpl,ClearMyTracksByProcess", "1"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                cleaned_items.append('History')
            
            if cleaned_items:
                return f"Cleaned {', '.join(cleaned_items)}"
            else:
                return "No items selected to clean"
            
        except Exception as e:
            return f"Error: {str(e)}"
            
    def full_system_cleanup(self):
        """Perform all cleanup operations"""
        self.log("Starting full system cleanup...")
        self.update_status("Starting full system cleanup...")
        
        # Update the description
        self.update_cleanup_description(
            "Full System Cleanup\n\n" +
            "This will perform a complete cleanup of your system, including:\n" +
            "- Temporary files\n" +
            "- Windows cache\n" +
            "- Recycle Bin\n" +
            "- Windows Update cache\n" +
            "- Internet browser cache\n\n" +
            "This process may take several minutes."
        )
        
        # Confirm with user
        if not messagebox.askyesno("Confirm Full Cleanup", 
                                 "This will perform a complete cleanup of your system. This includes:\n\n" +
                                 "• Empty the Recycle Bin\n" +
                                 "• Clear temporary files\n" +
                                 "• Run Windows Disk Cleanup\n" +
                                 "• Clear Windows cache\n" +
                                 "• Clean browser data\n" +
                                 "• Clear Windows Update files\n\n" +
                                 "This process may take several minutes. Continue?"):
            self.log("Full system cleanup cancelled by user", "info")
            return
        
        # Create a progress window
        progress_window = tk.Toplevel(self.root)
        progress_window.title("Full System Cleanup")
        progress_window.geometry("400x150")
        progress_window.resizable(False, False)
        progress_window.transient(self.root)
        progress_window.grab_set()
        
        # Center the dialog
        progress_window.update_idletasks()
        width = progress_window.winfo_width()
        height = progress_window.winfo_height()
        x = (progress_window.winfo_screenwidth() // 2) - (width // 2)
        y = (progress_window.winfo_screenheight() // 2) - (height // 2)
        progress_window.geometry(f"{width}x{height}+{x}+{y}")
        
        # Add progress info
        progress_label = ttk.Label(progress_window, text="Starting cleanup...", font=NORMAL_FONT)
        progress_label.pack(pady=(20, 10))
        
        # Add progress bar
        progress_bar = ttk.Progressbar(progress_window, length=350, mode='determinate')
        progress_bar.pack(pady=10, padx=25)
        
        # Start cleanup thread
        cleanup_thread = Thread(target=self._full_system_cleanup_thread, 
                              args=(progress_window, progress_label, progress_bar))
        cleanup_thread.daemon = True
        cleanup_thread.start()

    def clear_temp_files(self):
        """Clear temporary files from the system"""
        self.log("Clearing temporary files...")
        self.update_status("Clearing temporary files...")
        
        self.update_cleanup_description(
            "Clear Temporary Files\n\n" +
            "This will scan and delete temporary files from the following locations:\n" +
            "- Windows Temp folder (%windir%\\Temp)\n" +
            "- User Temp folder (%temp%)\n" +
            "- Windows Prefetch folder (%windir%\\Prefetch)\n" +
            "- Internet Explorer Cache\n" +
            "- Windows Recent Items\n" +
            "- Windows Thumbnail Cache\n\n" +
            "Temporary files can accumulate over time and consume valuable disk space. " +
            "Removing them is generally safe and can improve system performance."
        )
        
        # Create a thread to clear temp files
        temp_thread = Thread(target=self._clear_temp_files_thread)
        temp_thread.daemon = True
        temp_thread.start()

    def _clear_temp_files_thread(self):
        """Thread to clear temporary files"""
        try:
            # Get temp directories
            wintemp = os.environ.get('TEMP', os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), 'Temp'))
            usertemp = os.path.join(os.environ.get('USERPROFILE', ''), 'AppData', 'Local', 'Temp')
            prefetch = os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), 'Prefetch')
            ie_cache = os.path.join(os.environ.get('USERPROFILE', ''), 'AppData', 'Local', 'Microsoft', 'Windows', 'INetCache')
            recent_items = os.path.join(os.environ.get('USERPROFILE', ''), 'AppData', 'Roaming', 'Microsoft', 'Windows', 'Recent')
            thumbnails = os.path.join(os.environ.get('USERPROFILE', ''), 'AppData', 'Local', 'Microsoft', 'Windows', 'Explorer')
            
            # Track statistics
            stats = {
                'files_found': 0,
                'files_deleted': 0,
                'errors': 0,
                'space_freed': 0
            }
            
            # Function to delete files in a directory
            def delete_files_in_dir(directory, pattern="*"):
                if not os.path.exists(directory):
                    self.root.after(0, lambda: self.log(f"Directory not found: {directory}", "warning"))
                    return
                    
                self.root.after(0, lambda: self.log(f"Scanning: {directory}"))
                
                for root, dirs, files in os.walk(directory, topdown=False):
                    for file in files:
                        try:
                            file_path = os.path.join(root, file)
                            
                            # Handle special cases based on directory
                            if file.endswith('.lnk') and directory == recent_items:
                                # For Recent Items, only delete shortcuts
                                stats['files_found'] += 1
                                file_size = os.path.getsize(file_path)
                                os.remove(file_path)
                                stats['files_deleted'] += 1
                                stats['space_freed'] += file_size
                            elif (directory == thumbnails and 
                                  (file.startswith('thumbcache_') or file.startswith('iconcache_'))):
                                # For Thumbnails, only delete cache files
                                stats['files_found'] += 1
                                file_size = os.path.getsize(file_path)
                                os.remove(file_path)
                                stats['files_deleted'] += 1
                                stats['space_freed'] += file_size
                            elif directory != recent_items and directory != thumbnails:
                                # For other directories, delete all files matching pattern
                                if fnmatch.fnmatch(file, pattern):
                                    # Skip files in use
                                    try:
                                        stats['files_found'] += 1
                                        file_size = os.path.getsize(file_path)
                                        os.remove(file_path)
                                        stats['files_deleted'] += 1
                                        stats['space_freed'] += file_size
                                    except (PermissionError, OSError):
                                        # File is in use or otherwise locked
                                        stats['errors'] += 1
                        except Exception:
                            stats['errors'] += 1
                    
                    # Try to remove empty directories
                    for dir in dirs:
                        try:
                            dir_path = os.path.join(root, dir)
                            if os.path.exists(dir_path) and not os.listdir(dir_path):
                                os.rmdir(dir_path)
                        except:
                            # Directory not empty or in use
                            continue
            
            # Only attempt to clear system directories if running as admin
            if is_admin():
                # Clear Windows temp directory
                delete_files_in_dir(wintemp)
                
                # Clear Prefetch directory
                delete_files_in_dir(prefetch, "*.pf")
            else:
                self.root.after(0, lambda: self.log("Administrator rights required to clean some system folders", "warning"))
            
            # Clear user temp directory (doesn't require admin)
            delete_files_in_dir(usertemp)
            
            # Clear IE Cache
            delete_files_in_dir(ie_cache)
            
            # Clear Recent Items
            delete_files_in_dir(recent_items)
            
            # Clear Thumbnail Cache
            delete_files_in_dir(thumbnails)
            
            # Display results
            freed_mb = stats['space_freed'] / (1024 * 1024)
            success_msg = (f"Temporary files cleared: {stats['files_deleted']} of {stats['files_found']} files " +
                          f"({freed_mb:.2f} MB freed)")
            
            self.root.after(0, lambda: self.log(success_msg, "success"))
            self.root.after(0, lambda: self.update_status("Temporary files cleared"))
            
            if stats['errors'] > 0:
                warning_msg = f"{stats['errors']} files could not be deleted (they may be in use)"
                self.root.after(0, lambda: self.log(warning_msg, "warning"))
            
            self.root.after(0, lambda: messagebox.showinfo("Cleanup Complete", 
                                                        f"{success_msg}\n\n{stats['errors']} files could not be deleted."))
            
        except Exception as e:
            error_msg = f"Error clearing temporary files: {str(e)}"
            self.root.after(0, lambda: self.log(error_msg, "error"))
            self.root.after(0, lambda: self.update_status("Error clearing temporary files"))
            self.root.after(0, lambda: messagebox.showerror("Error", error_msg))

    def clear_windows_cache(self):
        """Clear various Windows cache files"""
        self.log("Clearing Windows cache files...")
        self.update_status("Clearing Windows cache files...")
        
        self.update_cleanup_description(
            "Clear Windows Cache\n\n" +
            "This will clear various Windows cache files including:\n" +
            "- DNS Cache\n" +
            "- Font Cache\n" +
            "- Icon Cache\n" +
            "- Windows Store Cache\n" +
            "- Windows Thumbnail Cache\n\n" +
            "Clearing these caches can help resolve performance issues and display problems. " +
            "Windows will automatically rebuild these caches as needed."
        )
        
        # Check for admin privileges
        if not self.check_admin_rights("Clearing Windows cache files"):
            return
        
        # Create a thread to clear cache files
        cache_thread = Thread(target=self._clear_windows_cache_thread)
        cache_thread.daemon = True
        cache_thread.start()

    def _clear_windows_cache_thread(self):
        """Thread to clear Windows cache files"""
        try:
            # Clear DNS Cache
            self.root.after(0, lambda: self.log("Clearing DNS Cache..."))
            subprocess.run(["ipconfig", "/flushdns"], 
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                         creationflags=subprocess.CREATE_NO_WINDOW, check=True)
            
            # Clear Font Cache
            self.root.after(0, lambda: self.log("Clearing Font Cache..."))
            # Stop Windows Font Cache service
            subprocess.run(["net", "stop", "FontCache"], 
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                         creationflags=subprocess.CREATE_NO_WINDOW)
            
            # Try to delete the font cache file
            try:
                font_cache = os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), 'ServiceProfiles', 
                                        'LocalService', 'AppData', 'Local', 'FontCache')
                if os.path.exists(font_cache):
                    os.remove(font_cache)
            except:
                self.root.after(0, lambda: self.log("Could not delete font cache file (may be in use)", "warning"))
            
            # Restart Font Cache service
            subprocess.run(["net", "start", "FontCache"], 
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                         creationflags=subprocess.CREATE_NO_WINDOW)
            
            # Clear Icon Cache
            self.root.after(0, lambda: self.log("Clearing Icon Cache..."))
            # Kill Explorer
            subprocess.run(["taskkill", "/f", "/im", "explorer.exe"], 
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                         creationflags=subprocess.CREATE_NO_WINDOW)
            
            # Delete IconCache.db
            try:
                icon_cache = os.path.join(os.environ.get('USERPROFILE', ''), 
                                        'AppData', 'Local', 'IconCache.db')
                if os.path.exists(icon_cache):
                    os.remove(icon_cache)
            except:
                self.root.after(0, lambda: self.log("Could not delete icon cache file (may be in use)", "warning"))
            
            # Delete icon cache files in Explorer directory
            explorer_cache_dir = os.path.join(os.environ.get('USERPROFILE', ''), 
                                            'AppData', 'Local', 'Microsoft', 'Windows', 'Explorer')
            try:
                for file in os.listdir(explorer_cache_dir):
                    if file.startswith('iconcache') or file.startswith('thumbcache'):
                        try:
                            os.remove(os.path.join(explorer_cache_dir, file))
                        except:
                            # Skip files that can't be deleted
                            continue
            except:
                self.root.after(0, lambda: self.log("Could not access Explorer cache directory", "warning"))
            
            # Restart Explorer
            subprocess.Popen("explorer.exe", creationflags=subprocess.CREATE_NEW_CONSOLE)
            
            # Clear Windows Store Cache
            self.root.after(0, lambda: self.log("Clearing Windows Store Cache..."))
            subprocess.run(["wsreset"], creationflags=subprocess.CREATE_NO_WINDOW)
            
            # Success message
            self.root.after(0, lambda: self.log("Windows cache files cleared successfully", "success"))
            self.root.after(0, lambda: self.update_status("Windows cache files cleared"))
            self.root.after(0, lambda: messagebox.showinfo("Cache Cleared", 
                                                        "Windows cache files have been cleared successfully."))
            
        except Exception as e:
            error_msg = f"Error clearing Windows cache: {str(e)}"
            self.root.after(0, lambda: self.log(error_msg, "error"))
            self.root.after(0, lambda: self.update_status("Error clearing Windows cache"))
            self.root.after(0, lambda: messagebox.showerror("Error", error_msg))
    
# Run the application
if __name__ == "__main__":
    # Check if running on Windows
    if not platform.system() == 'Windows':
        messagebox.showerror("Unsupported OS", "This application is designed for Windows operating systems.")
        sys.exit(1)
    
    # Check if running on Windows 10/11
    if not is_windows_10_or_11():
        if not messagebox.askyesno("Compatibility Warning", 
                                 "This application is designed for Windows 10 and 11.\n\n" +
                                 "Your Windows version may not be fully compatible. Continue anyway?"):
            sys.exit(1)
    
    # Create splash screen
    splash_root = tk.Tk()
    splash_root.overrideredirect(True)
    splash_root.geometry("400x200")
    splash_root.configure(background="#f8f9fa")
    
    # Center the splash window
    screen_width = splash_root.winfo_screenwidth()
    screen_height = splash_root.winfo_screenheight()
    x = (screen_width - 400) // 2
    y = (screen_height - 200) // 2
    splash_root.geometry(f"400x200+{x}+{y}")
    
    # Add a frame to the splash screen
    splash_frame = tk.Frame(splash_root, bg="#f8f9fa")
    splash_frame.pack(fill=tk.BOTH, expand=True)
    
    # Add application title
    tk.Label(
        splash_frame,
        text="Windows System Utilities",
        font=("Segoe UI", 18, "bold"),
        fg="#3498db",
        bg="#f8f9fa"
    ).pack(pady=(30, 10))
    
    # Add loading text
    loading_label = tk.Label(
        splash_frame,
        text="Loading...",
        font=("Segoe UI", 10),
        fg="#333333",
        bg="#f8f9fa"
    )
    loading_label.pack(pady=10)
    
    # Add version info
    version_label = tk.Label(
        splash_frame,
        text="Version 1.1",
        font=("Segoe UI", 8),
        fg="#666666",
        bg="#f8f9fa"
    )
    version_label.pack(side=tk.BOTTOM, pady=10)
    
    # Function to destroy splash and show main window
    def show_main_window():
        splash_root.destroy()
        
        # Create main application window
        root = tk.Tk()
        app = SystemUtilities(root)
        # Start background monitoring and periodic log updates
        root.after(2000, app.update_background_logs)
        # Start background monitoring and periodic log updates
        root.after(2000, app.update_background_logs)
        
        # Check for admin privileges and warn if not running as admin
        if not is_admin():
            app.log("Running without administrator privileges. Some features may be limited.", "warning")
            if messagebox.askyesno("Administrator Privileges Required", 
                                 "This application works best with administrator privileges.\n\n" +
                                 "Would you like to restart with administrator privileges?"):
                app.restart_as_admin()
                root.destroy()
            return
        
        root.mainloop()
    
    # Schedule the main window to appear after 2 seconds
    splash_root.after(2000, show_main_window)
    
    # Start the splash screen
    splash_root.mainloop()
    

